// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Im.File.proto

#ifndef PROTOBUF_Im_2eFile_2eproto__INCLUDED
#define PROTOBUF_Im_2eFile_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Im.Base.pb.h"
// @@protoc_insertion_point(includes)

namespace Im {
namespace File {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Im_2eFile_2eproto();
void protobuf_AssignDesc_Im_2eFile_2eproto();
void protobuf_ShutdownFile_Im_2eFile_2eproto();

class FileLoginRequest;
class FileLoginResponse;
class FileStatus;
class FilePullDataRequest;
class FilePullDataResponse;
class FileRequest;
class FileResponse;
class FileNotify;
class FileHasOfflineRequest;
class FileHasOfflineResponse;
class FileAddOfflineRequest;
class FileDelOfflineRequest;

// ===================================================================

class FileLoginRequest : public ::google::protobuf::Message {
 public:
  FileLoginRequest();
  virtual ~FileLoginRequest();

  FileLoginRequest(const FileLoginRequest& from);

  inline FileLoginRequest& operator=(const FileLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileLoginRequest& default_instance();

  void Swap(FileLoginRequest* other);

  // implements Message ----------------------------------------------

  FileLoginRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileLoginRequest& from);
  void MergeFrom(const FileLoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string task_id = 2;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 2;
  inline const ::std::string& task_id() const;
  inline void set_task_id(const ::std::string& value);
  inline void set_task_id(const char* value);
  inline void set_task_id(const char* value, size_t size);
  inline ::std::string* mutable_task_id();
  inline ::std::string* release_task_id();
  inline void set_allocated_task_id(::std::string* task_id);

  // required .Im.Base.ClientFileRole file_role = 3;
  inline bool has_file_role() const;
  inline void clear_file_role();
  static const int kFileRoleFieldNumber = 3;
  inline ::Im::Base::ClientFileRole file_role() const;
  inline void set_file_role(::Im::Base::ClientFileRole value);

  // @@protoc_insertion_point(class_scope:Im.File.FileLoginRequest)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_file_role();
  inline void clear_has_file_role();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* task_id_;
  ::google::protobuf::uint32 user_id_;
  int file_role_;
  friend void  protobuf_AddDesc_Im_2eFile_2eproto();
  friend void protobuf_AssignDesc_Im_2eFile_2eproto();
  friend void protobuf_ShutdownFile_Im_2eFile_2eproto();

  void InitAsDefaultInstance();
  static FileLoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class FileLoginResponse : public ::google::protobuf::Message {
 public:
  FileLoginResponse();
  virtual ~FileLoginResponse();

  FileLoginResponse(const FileLoginResponse& from);

  inline FileLoginResponse& operator=(const FileLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileLoginResponse& default_instance();

  void Swap(FileLoginResponse* other);

  // implements Message ----------------------------------------------

  FileLoginResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileLoginResponse& from);
  void MergeFrom(const FileLoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // required string task_id = 2;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 2;
  inline const ::std::string& task_id() const;
  inline void set_task_id(const ::std::string& value);
  inline void set_task_id(const char* value);
  inline void set_task_id(const char* value, size_t size);
  inline ::std::string* mutable_task_id();
  inline ::std::string* release_task_id();
  inline void set_allocated_task_id(::std::string* task_id);

  // @@protoc_insertion_point(class_scope:Im.File.FileLoginResponse)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_task_id();
  inline void clear_has_task_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* task_id_;
  ::google::protobuf::uint32 result_code_;
  friend void  protobuf_AddDesc_Im_2eFile_2eproto();
  friend void protobuf_AssignDesc_Im_2eFile_2eproto();
  friend void protobuf_ShutdownFile_Im_2eFile_2eproto();

  void InitAsDefaultInstance();
  static FileLoginResponse* default_instance_;
};
// -------------------------------------------------------------------

class FileStatus : public ::google::protobuf::Message {
 public:
  FileStatus();
  virtual ~FileStatus();

  FileStatus(const FileStatus& from);

  inline FileStatus& operator=(const FileStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileStatus& default_instance();

  void Swap(FileStatus* other);

  // implements Message ----------------------------------------------

  FileStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileStatus& from);
  void MergeFrom(const FileStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .Im.Base.ClientFileStatus file_status = 2;
  inline bool has_file_status() const;
  inline void clear_file_status();
  static const int kFileStatusFieldNumber = 2;
  inline ::Im::Base::ClientFileStatus file_status() const;
  inline void set_file_status(::Im::Base::ClientFileStatus value);

  // required string task_id = 3;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 3;
  inline const ::std::string& task_id() const;
  inline void set_task_id(const ::std::string& value);
  inline void set_task_id(const char* value);
  inline void set_task_id(const char* value, size_t size);
  inline ::std::string* mutable_task_id();
  inline ::std::string* release_task_id();
  inline void set_allocated_task_id(::std::string* task_id);

  // @@protoc_insertion_point(class_scope:Im.File.FileStatus)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_file_status();
  inline void clear_has_file_status();
  inline void set_has_task_id();
  inline void clear_has_task_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  int file_status_;
  ::std::string* task_id_;
  friend void  protobuf_AddDesc_Im_2eFile_2eproto();
  friend void protobuf_AssignDesc_Im_2eFile_2eproto();
  friend void protobuf_ShutdownFile_Im_2eFile_2eproto();

  void InitAsDefaultInstance();
  static FileStatus* default_instance_;
};
// -------------------------------------------------------------------

class FilePullDataRequest : public ::google::protobuf::Message {
 public:
  FilePullDataRequest();
  virtual ~FilePullDataRequest();

  FilePullDataRequest(const FilePullDataRequest& from);

  inline FilePullDataRequest& operator=(const FilePullDataRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FilePullDataRequest& default_instance();

  void Swap(FilePullDataRequest* other);

  // implements Message ----------------------------------------------

  FilePullDataRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FilePullDataRequest& from);
  void MergeFrom(const FilePullDataRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string task_id = 2;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 2;
  inline const ::std::string& task_id() const;
  inline void set_task_id(const ::std::string& value);
  inline void set_task_id(const char* value);
  inline void set_task_id(const char* value, size_t size);
  inline ::std::string* mutable_task_id();
  inline ::std::string* release_task_id();
  inline void set_allocated_task_id(::std::string* task_id);

  // required .Im.Base.FileType transfer_mode = 3;
  inline bool has_transfer_mode() const;
  inline void clear_transfer_mode();
  static const int kTransferModeFieldNumber = 3;
  inline ::Im::Base::FileType transfer_mode() const;
  inline void set_transfer_mode(::Im::Base::FileType value);

  // required uint32 offset = 4;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 4;
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // required uint32 data_size = 5;
  inline bool has_data_size() const;
  inline void clear_data_size();
  static const int kDataSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 data_size() const;
  inline void set_data_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Im.File.FilePullDataRequest)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_transfer_mode();
  inline void clear_has_transfer_mode();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_data_size();
  inline void clear_has_data_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* task_id_;
  ::google::protobuf::uint32 user_id_;
  int transfer_mode_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 data_size_;
  friend void  protobuf_AddDesc_Im_2eFile_2eproto();
  friend void protobuf_AssignDesc_Im_2eFile_2eproto();
  friend void protobuf_ShutdownFile_Im_2eFile_2eproto();

  void InitAsDefaultInstance();
  static FilePullDataRequest* default_instance_;
};
// -------------------------------------------------------------------

class FilePullDataResponse : public ::google::protobuf::Message {
 public:
  FilePullDataResponse();
  virtual ~FilePullDataResponse();

  FilePullDataResponse(const FilePullDataResponse& from);

  inline FilePullDataResponse& operator=(const FilePullDataResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FilePullDataResponse& default_instance();

  void Swap(FilePullDataResponse* other);

  // implements Message ----------------------------------------------

  FilePullDataResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FilePullDataResponse& from);
  void MergeFrom(const FilePullDataResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 result_code = 2;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // required string task_id = 3;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 3;
  inline const ::std::string& task_id() const;
  inline void set_task_id(const ::std::string& value);
  inline void set_task_id(const char* value);
  inline void set_task_id(const char* value, size_t size);
  inline ::std::string* mutable_task_id();
  inline ::std::string* release_task_id();
  inline void set_allocated_task_id(::std::string* task_id);

  // required uint32 offset = 4;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 4;
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // required bytes data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Im.File.FilePullDataResponse)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 result_code_;
  ::std::string* task_id_;
  ::std::string* data_;
  ::google::protobuf::uint32 offset_;
  friend void  protobuf_AddDesc_Im_2eFile_2eproto();
  friend void protobuf_AssignDesc_Im_2eFile_2eproto();
  friend void protobuf_ShutdownFile_Im_2eFile_2eproto();

  void InitAsDefaultInstance();
  static FilePullDataResponse* default_instance_;
};
// -------------------------------------------------------------------

class FileRequest : public ::google::protobuf::Message {
 public:
  FileRequest();
  virtual ~FileRequest();

  FileRequest(const FileRequest& from);

  inline FileRequest& operator=(const FileRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileRequest& default_instance();

  void Swap(FileRequest* other);

  // implements Message ----------------------------------------------

  FileRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileRequest& from);
  void MergeFrom(const FileRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 from_user_id = 1;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);

  // required uint32 to_user_id = 2;
  inline bool has_to_user_id() const;
  inline void clear_to_user_id();
  static const int kToUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 to_user_id() const;
  inline void set_to_user_id(::google::protobuf::uint32 value);

  // required string file_name = 3;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 3;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // required uint32 file_size = 4;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 file_size() const;
  inline void set_file_size(::google::protobuf::uint32 value);

  // required .Im.Base.FileType transfer_mode = 5;
  inline bool has_transfer_mode() const;
  inline void clear_transfer_mode();
  static const int kTransferModeFieldNumber = 5;
  inline ::Im::Base::FileType transfer_mode() const;
  inline void set_transfer_mode(::Im::Base::FileType value);

  // @@protoc_insertion_point(class_scope:Im.File.FileRequest)
 private:
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_to_user_id();
  inline void clear_has_to_user_id();
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_file_size();
  inline void clear_has_file_size();
  inline void set_has_transfer_mode();
  inline void clear_has_transfer_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 to_user_id_;
  ::std::string* file_name_;
  ::google::protobuf::uint32 file_size_;
  int transfer_mode_;
  friend void  protobuf_AddDesc_Im_2eFile_2eproto();
  friend void protobuf_AssignDesc_Im_2eFile_2eproto();
  friend void protobuf_ShutdownFile_Im_2eFile_2eproto();

  void InitAsDefaultInstance();
  static FileRequest* default_instance_;
};
// -------------------------------------------------------------------

class FileResponse : public ::google::protobuf::Message {
 public:
  FileResponse();
  virtual ~FileResponse();

  FileResponse(const FileResponse& from);

  inline FileResponse& operator=(const FileResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileResponse& default_instance();

  void Swap(FileResponse* other);

  // implements Message ----------------------------------------------

  FileResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileResponse& from);
  void MergeFrom(const FileResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // required uint32 from_user_id = 2;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);

  // required uint32 to_user_id = 3;
  inline bool has_to_user_id() const;
  inline void clear_to_user_id();
  static const int kToUserIdFieldNumber = 3;
  inline ::google::protobuf::uint32 to_user_id() const;
  inline void set_to_user_id(::google::protobuf::uint32 value);

  // required string file_name = 4;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 4;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // required string task_id = 5;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 5;
  inline const ::std::string& task_id() const;
  inline void set_task_id(const ::std::string& value);
  inline void set_task_id(const char* value);
  inline void set_task_id(const char* value, size_t size);
  inline ::std::string* mutable_task_id();
  inline ::std::string* release_task_id();
  inline void set_allocated_task_id(::std::string* task_id);

  // repeated .Im.Base.IpAddr ip_addr_list = 6;
  inline int ip_addr_list_size() const;
  inline void clear_ip_addr_list();
  static const int kIpAddrListFieldNumber = 6;
  inline const ::Im::Base::IpAddr& ip_addr_list(int index) const;
  inline ::Im::Base::IpAddr* mutable_ip_addr_list(int index);
  inline ::Im::Base::IpAddr* add_ip_addr_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Im::Base::IpAddr >&
      ip_addr_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Im::Base::IpAddr >*
      mutable_ip_addr_list();

  // required .Im.Base.FileType transfer_mode = 7;
  inline bool has_transfer_mode() const;
  inline void clear_transfer_mode();
  static const int kTransferModeFieldNumber = 7;
  inline ::Im::Base::FileType transfer_mode() const;
  inline void set_transfer_mode(::Im::Base::FileType value);

  // @@protoc_insertion_point(class_scope:Im.File.FileResponse)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_to_user_id();
  inline void clear_has_to_user_id();
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_transfer_mode();
  inline void clear_has_transfer_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 result_code_;
  ::google::protobuf::uint32 from_user_id_;
  ::std::string* file_name_;
  ::std::string* task_id_;
  ::google::protobuf::uint32 to_user_id_;
  int transfer_mode_;
  ::google::protobuf::RepeatedPtrField< ::Im::Base::IpAddr > ip_addr_list_;
  friend void  protobuf_AddDesc_Im_2eFile_2eproto();
  friend void protobuf_AssignDesc_Im_2eFile_2eproto();
  friend void protobuf_ShutdownFile_Im_2eFile_2eproto();

  void InitAsDefaultInstance();
  static FileResponse* default_instance_;
};
// -------------------------------------------------------------------

class FileNotify : public ::google::protobuf::Message {
 public:
  FileNotify();
  virtual ~FileNotify();

  FileNotify(const FileNotify& from);

  inline FileNotify& operator=(const FileNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileNotify& default_instance();

  void Swap(FileNotify* other);

  // implements Message ----------------------------------------------

  FileNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileNotify& from);
  void MergeFrom(const FileNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 from_user_id = 1;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);

  // required uint32 to_user_id = 2;
  inline bool has_to_user_id() const;
  inline void clear_to_user_id();
  static const int kToUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 to_user_id() const;
  inline void set_to_user_id(::google::protobuf::uint32 value);

  // required string file_name = 3;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 3;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // required uint32 file_size = 4;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 file_size() const;
  inline void set_file_size(::google::protobuf::uint32 value);

  // required string task_id = 5;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 5;
  inline const ::std::string& task_id() const;
  inline void set_task_id(const ::std::string& value);
  inline void set_task_id(const char* value);
  inline void set_task_id(const char* value, size_t size);
  inline ::std::string* mutable_task_id();
  inline ::std::string* release_task_id();
  inline void set_allocated_task_id(::std::string* task_id);

  // repeated .Im.Base.IpAddr ip_addr_list = 6;
  inline int ip_addr_list_size() const;
  inline void clear_ip_addr_list();
  static const int kIpAddrListFieldNumber = 6;
  inline const ::Im::Base::IpAddr& ip_addr_list(int index) const;
  inline ::Im::Base::IpAddr* mutable_ip_addr_list(int index);
  inline ::Im::Base::IpAddr* add_ip_addr_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Im::Base::IpAddr >&
      ip_addr_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Im::Base::IpAddr >*
      mutable_ip_addr_list();

  // required .Im.Base.FileType transfer_mode = 7;
  inline bool has_transfer_mode() const;
  inline void clear_transfer_mode();
  static const int kTransferModeFieldNumber = 7;
  inline ::Im::Base::FileType transfer_mode() const;
  inline void set_transfer_mode(::Im::Base::FileType value);

  // required uint32 offline_ready = 8;
  inline bool has_offline_ready() const;
  inline void clear_offline_ready();
  static const int kOfflineReadyFieldNumber = 8;
  inline ::google::protobuf::uint32 offline_ready() const;
  inline void set_offline_ready(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Im.File.FileNotify)
 private:
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_to_user_id();
  inline void clear_has_to_user_id();
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_file_size();
  inline void clear_has_file_size();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_transfer_mode();
  inline void clear_has_transfer_mode();
  inline void set_has_offline_ready();
  inline void clear_has_offline_ready();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 to_user_id_;
  ::std::string* file_name_;
  ::std::string* task_id_;
  ::google::protobuf::uint32 file_size_;
  int transfer_mode_;
  ::google::protobuf::RepeatedPtrField< ::Im::Base::IpAddr > ip_addr_list_;
  ::google::protobuf::uint32 offline_ready_;
  friend void  protobuf_AddDesc_Im_2eFile_2eproto();
  friend void protobuf_AssignDesc_Im_2eFile_2eproto();
  friend void protobuf_ShutdownFile_Im_2eFile_2eproto();

  void InitAsDefaultInstance();
  static FileNotify* default_instance_;
};
// -------------------------------------------------------------------

class FileHasOfflineRequest : public ::google::protobuf::Message {
 public:
  FileHasOfflineRequest();
  virtual ~FileHasOfflineRequest();

  FileHasOfflineRequest(const FileHasOfflineRequest& from);

  inline FileHasOfflineRequest& operator=(const FileHasOfflineRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileHasOfflineRequest& default_instance();

  void Swap(FileHasOfflineRequest* other);

  // implements Message ----------------------------------------------

  FileHasOfflineRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileHasOfflineRequest& from);
  void MergeFrom(const FileHasOfflineRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 2;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 2;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:Im.File.FileHasOfflineRequest)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  friend void  protobuf_AddDesc_Im_2eFile_2eproto();
  friend void protobuf_AssignDesc_Im_2eFile_2eproto();
  friend void protobuf_ShutdownFile_Im_2eFile_2eproto();

  void InitAsDefaultInstance();
  static FileHasOfflineRequest* default_instance_;
};
// -------------------------------------------------------------------

class FileHasOfflineResponse : public ::google::protobuf::Message {
 public:
  FileHasOfflineResponse();
  virtual ~FileHasOfflineResponse();

  FileHasOfflineResponse(const FileHasOfflineResponse& from);

  inline FileHasOfflineResponse& operator=(const FileHasOfflineResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileHasOfflineResponse& default_instance();

  void Swap(FileHasOfflineResponse* other);

  // implements Message ----------------------------------------------

  FileHasOfflineResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileHasOfflineResponse& from);
  void MergeFrom(const FileHasOfflineResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // repeated .Im.Base.OfflineFileInfo offline_file_list = 2;
  inline int offline_file_list_size() const;
  inline void clear_offline_file_list();
  static const int kOfflineFileListFieldNumber = 2;
  inline const ::Im::Base::OfflineFileInfo& offline_file_list(int index) const;
  inline ::Im::Base::OfflineFileInfo* mutable_offline_file_list(int index);
  inline ::Im::Base::OfflineFileInfo* add_offline_file_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Im::Base::OfflineFileInfo >&
      offline_file_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Im::Base::OfflineFileInfo >*
      mutable_offline_file_list();

  // repeated .Im.Base.IpAddr ip_addr_list = 3;
  inline int ip_addr_list_size() const;
  inline void clear_ip_addr_list();
  static const int kIpAddrListFieldNumber = 3;
  inline const ::Im::Base::IpAddr& ip_addr_list(int index) const;
  inline ::Im::Base::IpAddr* mutable_ip_addr_list(int index);
  inline ::Im::Base::IpAddr* add_ip_addr_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Im::Base::IpAddr >&
      ip_addr_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Im::Base::IpAddr >*
      mutable_ip_addr_list();

  // optional bytes attach_data = 4;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 4;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:Im.File.FileHasOfflineResponse)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Im::Base::OfflineFileInfo > offline_file_list_;
  ::google::protobuf::RepeatedPtrField< ::Im::Base::IpAddr > ip_addr_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  friend void  protobuf_AddDesc_Im_2eFile_2eproto();
  friend void protobuf_AssignDesc_Im_2eFile_2eproto();
  friend void protobuf_ShutdownFile_Im_2eFile_2eproto();

  void InitAsDefaultInstance();
  static FileHasOfflineResponse* default_instance_;
};
// -------------------------------------------------------------------

class FileAddOfflineRequest : public ::google::protobuf::Message {
 public:
  FileAddOfflineRequest();
  virtual ~FileAddOfflineRequest();

  FileAddOfflineRequest(const FileAddOfflineRequest& from);

  inline FileAddOfflineRequest& operator=(const FileAddOfflineRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileAddOfflineRequest& default_instance();

  void Swap(FileAddOfflineRequest* other);

  // implements Message ----------------------------------------------

  FileAddOfflineRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileAddOfflineRequest& from);
  void MergeFrom(const FileAddOfflineRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 from_user_id = 1;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);

  // required uint32 to_user_id = 2;
  inline bool has_to_user_id() const;
  inline void clear_to_user_id();
  static const int kToUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 to_user_id() const;
  inline void set_to_user_id(::google::protobuf::uint32 value);

  // required string task_id = 3;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 3;
  inline const ::std::string& task_id() const;
  inline void set_task_id(const ::std::string& value);
  inline void set_task_id(const char* value);
  inline void set_task_id(const char* value, size_t size);
  inline ::std::string* mutable_task_id();
  inline ::std::string* release_task_id();
  inline void set_allocated_task_id(::std::string* task_id);

  // required string file_name = 4;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 4;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // required uint32 file_size = 5;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 file_size() const;
  inline void set_file_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Im.File.FileAddOfflineRequest)
 private:
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_to_user_id();
  inline void clear_has_to_user_id();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_file_size();
  inline void clear_has_file_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 to_user_id_;
  ::std::string* task_id_;
  ::std::string* file_name_;
  ::google::protobuf::uint32 file_size_;
  friend void  protobuf_AddDesc_Im_2eFile_2eproto();
  friend void protobuf_AssignDesc_Im_2eFile_2eproto();
  friend void protobuf_ShutdownFile_Im_2eFile_2eproto();

  void InitAsDefaultInstance();
  static FileAddOfflineRequest* default_instance_;
};
// -------------------------------------------------------------------

class FileDelOfflineRequest : public ::google::protobuf::Message {
 public:
  FileDelOfflineRequest();
  virtual ~FileDelOfflineRequest();

  FileDelOfflineRequest(const FileDelOfflineRequest& from);

  inline FileDelOfflineRequest& operator=(const FileDelOfflineRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileDelOfflineRequest& default_instance();

  void Swap(FileDelOfflineRequest* other);

  // implements Message ----------------------------------------------

  FileDelOfflineRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileDelOfflineRequest& from);
  void MergeFrom(const FileDelOfflineRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 from_user_id = 1;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);

  // required uint32 to_user_id = 2;
  inline bool has_to_user_id() const;
  inline void clear_to_user_id();
  static const int kToUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 to_user_id() const;
  inline void set_to_user_id(::google::protobuf::uint32 value);

  // required string task_id = 3;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 3;
  inline const ::std::string& task_id() const;
  inline void set_task_id(const ::std::string& value);
  inline void set_task_id(const char* value);
  inline void set_task_id(const char* value, size_t size);
  inline ::std::string* mutable_task_id();
  inline ::std::string* release_task_id();
  inline void set_allocated_task_id(::std::string* task_id);

  // @@protoc_insertion_point(class_scope:Im.File.FileDelOfflineRequest)
 private:
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_to_user_id();
  inline void clear_has_to_user_id();
  inline void set_has_task_id();
  inline void clear_has_task_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 to_user_id_;
  ::std::string* task_id_;
  friend void  protobuf_AddDesc_Im_2eFile_2eproto();
  friend void protobuf_AssignDesc_Im_2eFile_2eproto();
  friend void protobuf_ShutdownFile_Im_2eFile_2eproto();

  void InitAsDefaultInstance();
  static FileDelOfflineRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// FileLoginRequest

// required uint32 user_id = 1;
inline bool FileLoginRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileLoginRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileLoginRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileLoginRequest::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 FileLoginRequest::user_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FileLoginRequest.user_id)
  return user_id_;
}
inline void FileLoginRequest::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileLoginRequest.user_id)
}

// required string task_id = 2;
inline bool FileLoginRequest::has_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileLoginRequest::set_has_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileLoginRequest::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileLoginRequest::clear_task_id() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_->clear();
  }
  clear_has_task_id();
}
inline const ::std::string& FileLoginRequest::task_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FileLoginRequest.task_id)
  return *task_id_;
}
inline void FileLoginRequest::set_task_id(const ::std::string& value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set:Im.File.FileLoginRequest.task_id)
}
inline void FileLoginRequest::set_task_id(const char* value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.File.FileLoginRequest.task_id)
}
inline void FileLoginRequest::set_task_id(const char* value, size_t size) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.File.FileLoginRequest.task_id)
}
inline ::std::string* FileLoginRequest::mutable_task_id() {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.File.FileLoginRequest.task_id)
  return task_id_;
}
inline ::std::string* FileLoginRequest::release_task_id() {
  clear_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = task_id_;
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FileLoginRequest::set_allocated_task_id(::std::string* task_id) {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (task_id) {
    set_has_task_id();
    task_id_ = task_id;
  } else {
    clear_has_task_id();
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.File.FileLoginRequest.task_id)
}

// required .Im.Base.ClientFileRole file_role = 3;
inline bool FileLoginRequest::has_file_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileLoginRequest::set_has_file_role() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileLoginRequest::clear_has_file_role() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileLoginRequest::clear_file_role() {
  file_role_ = 1;
  clear_has_file_role();
}
inline ::Im::Base::ClientFileRole FileLoginRequest::file_role() const {
  // @@protoc_insertion_point(field_get:Im.File.FileLoginRequest.file_role)
  return static_cast< ::Im::Base::ClientFileRole >(file_role_);
}
inline void FileLoginRequest::set_file_role(::Im::Base::ClientFileRole value) {
  assert(::Im::Base::ClientFileRole_IsValid(value));
  set_has_file_role();
  file_role_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileLoginRequest.file_role)
}

// -------------------------------------------------------------------

// FileLoginResponse

// required uint32 result_code = 1;
inline bool FileLoginResponse::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileLoginResponse::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileLoginResponse::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileLoginResponse::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 FileLoginResponse::result_code() const {
  // @@protoc_insertion_point(field_get:Im.File.FileLoginResponse.result_code)
  return result_code_;
}
inline void FileLoginResponse::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileLoginResponse.result_code)
}

// required string task_id = 2;
inline bool FileLoginResponse::has_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileLoginResponse::set_has_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileLoginResponse::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileLoginResponse::clear_task_id() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_->clear();
  }
  clear_has_task_id();
}
inline const ::std::string& FileLoginResponse::task_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FileLoginResponse.task_id)
  return *task_id_;
}
inline void FileLoginResponse::set_task_id(const ::std::string& value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set:Im.File.FileLoginResponse.task_id)
}
inline void FileLoginResponse::set_task_id(const char* value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.File.FileLoginResponse.task_id)
}
inline void FileLoginResponse::set_task_id(const char* value, size_t size) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.File.FileLoginResponse.task_id)
}
inline ::std::string* FileLoginResponse::mutable_task_id() {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.File.FileLoginResponse.task_id)
  return task_id_;
}
inline ::std::string* FileLoginResponse::release_task_id() {
  clear_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = task_id_;
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FileLoginResponse::set_allocated_task_id(::std::string* task_id) {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (task_id) {
    set_has_task_id();
    task_id_ = task_id;
  } else {
    clear_has_task_id();
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.File.FileLoginResponse.task_id)
}

// -------------------------------------------------------------------

// FileStatus

// required uint32 user_id = 1;
inline bool FileStatus::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileStatus::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileStatus::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileStatus::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 FileStatus::user_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FileStatus.user_id)
  return user_id_;
}
inline void FileStatus::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileStatus.user_id)
}

// required .Im.Base.ClientFileStatus file_status = 2;
inline bool FileStatus::has_file_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileStatus::set_has_file_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileStatus::clear_has_file_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileStatus::clear_file_status() {
  file_status_ = 1;
  clear_has_file_status();
}
inline ::Im::Base::ClientFileStatus FileStatus::file_status() const {
  // @@protoc_insertion_point(field_get:Im.File.FileStatus.file_status)
  return static_cast< ::Im::Base::ClientFileStatus >(file_status_);
}
inline void FileStatus::set_file_status(::Im::Base::ClientFileStatus value) {
  assert(::Im::Base::ClientFileStatus_IsValid(value));
  set_has_file_status();
  file_status_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileStatus.file_status)
}

// required string task_id = 3;
inline bool FileStatus::has_task_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileStatus::set_has_task_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileStatus::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileStatus::clear_task_id() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_->clear();
  }
  clear_has_task_id();
}
inline const ::std::string& FileStatus::task_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FileStatus.task_id)
  return *task_id_;
}
inline void FileStatus::set_task_id(const ::std::string& value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set:Im.File.FileStatus.task_id)
}
inline void FileStatus::set_task_id(const char* value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.File.FileStatus.task_id)
}
inline void FileStatus::set_task_id(const char* value, size_t size) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.File.FileStatus.task_id)
}
inline ::std::string* FileStatus::mutable_task_id() {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.File.FileStatus.task_id)
  return task_id_;
}
inline ::std::string* FileStatus::release_task_id() {
  clear_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = task_id_;
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FileStatus::set_allocated_task_id(::std::string* task_id) {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (task_id) {
    set_has_task_id();
    task_id_ = task_id;
  } else {
    clear_has_task_id();
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.File.FileStatus.task_id)
}

// -------------------------------------------------------------------

// FilePullDataRequest

// required uint32 user_id = 1;
inline bool FilePullDataRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FilePullDataRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FilePullDataRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FilePullDataRequest::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 FilePullDataRequest::user_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FilePullDataRequest.user_id)
  return user_id_;
}
inline void FilePullDataRequest::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FilePullDataRequest.user_id)
}

// required string task_id = 2;
inline bool FilePullDataRequest::has_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FilePullDataRequest::set_has_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FilePullDataRequest::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FilePullDataRequest::clear_task_id() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_->clear();
  }
  clear_has_task_id();
}
inline const ::std::string& FilePullDataRequest::task_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FilePullDataRequest.task_id)
  return *task_id_;
}
inline void FilePullDataRequest::set_task_id(const ::std::string& value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set:Im.File.FilePullDataRequest.task_id)
}
inline void FilePullDataRequest::set_task_id(const char* value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.File.FilePullDataRequest.task_id)
}
inline void FilePullDataRequest::set_task_id(const char* value, size_t size) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.File.FilePullDataRequest.task_id)
}
inline ::std::string* FilePullDataRequest::mutable_task_id() {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.File.FilePullDataRequest.task_id)
  return task_id_;
}
inline ::std::string* FilePullDataRequest::release_task_id() {
  clear_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = task_id_;
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FilePullDataRequest::set_allocated_task_id(::std::string* task_id) {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (task_id) {
    set_has_task_id();
    task_id_ = task_id;
  } else {
    clear_has_task_id();
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.File.FilePullDataRequest.task_id)
}

// required .Im.Base.FileType transfer_mode = 3;
inline bool FilePullDataRequest::has_transfer_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FilePullDataRequest::set_has_transfer_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FilePullDataRequest::clear_has_transfer_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FilePullDataRequest::clear_transfer_mode() {
  transfer_mode_ = 1;
  clear_has_transfer_mode();
}
inline ::Im::Base::FileType FilePullDataRequest::transfer_mode() const {
  // @@protoc_insertion_point(field_get:Im.File.FilePullDataRequest.transfer_mode)
  return static_cast< ::Im::Base::FileType >(transfer_mode_);
}
inline void FilePullDataRequest::set_transfer_mode(::Im::Base::FileType value) {
  assert(::Im::Base::FileType_IsValid(value));
  set_has_transfer_mode();
  transfer_mode_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FilePullDataRequest.transfer_mode)
}

// required uint32 offset = 4;
inline bool FilePullDataRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FilePullDataRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FilePullDataRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FilePullDataRequest::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 FilePullDataRequest::offset() const {
  // @@protoc_insertion_point(field_get:Im.File.FilePullDataRequest.offset)
  return offset_;
}
inline void FilePullDataRequest::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FilePullDataRequest.offset)
}

// required uint32 data_size = 5;
inline bool FilePullDataRequest::has_data_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FilePullDataRequest::set_has_data_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FilePullDataRequest::clear_has_data_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FilePullDataRequest::clear_data_size() {
  data_size_ = 0u;
  clear_has_data_size();
}
inline ::google::protobuf::uint32 FilePullDataRequest::data_size() const {
  // @@protoc_insertion_point(field_get:Im.File.FilePullDataRequest.data_size)
  return data_size_;
}
inline void FilePullDataRequest::set_data_size(::google::protobuf::uint32 value) {
  set_has_data_size();
  data_size_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FilePullDataRequest.data_size)
}

// -------------------------------------------------------------------

// FilePullDataResponse

// required uint32 user_id = 1;
inline bool FilePullDataResponse::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FilePullDataResponse::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FilePullDataResponse::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FilePullDataResponse::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 FilePullDataResponse::user_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FilePullDataResponse.user_id)
  return user_id_;
}
inline void FilePullDataResponse::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FilePullDataResponse.user_id)
}

// required uint32 result_code = 2;
inline bool FilePullDataResponse::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FilePullDataResponse::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FilePullDataResponse::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FilePullDataResponse::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 FilePullDataResponse::result_code() const {
  // @@protoc_insertion_point(field_get:Im.File.FilePullDataResponse.result_code)
  return result_code_;
}
inline void FilePullDataResponse::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FilePullDataResponse.result_code)
}

// required string task_id = 3;
inline bool FilePullDataResponse::has_task_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FilePullDataResponse::set_has_task_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FilePullDataResponse::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FilePullDataResponse::clear_task_id() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_->clear();
  }
  clear_has_task_id();
}
inline const ::std::string& FilePullDataResponse::task_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FilePullDataResponse.task_id)
  return *task_id_;
}
inline void FilePullDataResponse::set_task_id(const ::std::string& value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set:Im.File.FilePullDataResponse.task_id)
}
inline void FilePullDataResponse::set_task_id(const char* value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.File.FilePullDataResponse.task_id)
}
inline void FilePullDataResponse::set_task_id(const char* value, size_t size) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.File.FilePullDataResponse.task_id)
}
inline ::std::string* FilePullDataResponse::mutable_task_id() {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.File.FilePullDataResponse.task_id)
  return task_id_;
}
inline ::std::string* FilePullDataResponse::release_task_id() {
  clear_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = task_id_;
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FilePullDataResponse::set_allocated_task_id(::std::string* task_id) {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (task_id) {
    set_has_task_id();
    task_id_ = task_id;
  } else {
    clear_has_task_id();
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.File.FilePullDataResponse.task_id)
}

// required uint32 offset = 4;
inline bool FilePullDataResponse::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FilePullDataResponse::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FilePullDataResponse::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FilePullDataResponse::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 FilePullDataResponse::offset() const {
  // @@protoc_insertion_point(field_get:Im.File.FilePullDataResponse.offset)
  return offset_;
}
inline void FilePullDataResponse::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FilePullDataResponse.offset)
}

// required bytes data = 5;
inline bool FilePullDataResponse::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FilePullDataResponse::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FilePullDataResponse::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FilePullDataResponse::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& FilePullDataResponse::data() const {
  // @@protoc_insertion_point(field_get:Im.File.FilePullDataResponse.data)
  return *data_;
}
inline void FilePullDataResponse::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Im.File.FilePullDataResponse.data)
}
inline void FilePullDataResponse::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.File.FilePullDataResponse.data)
}
inline void FilePullDataResponse::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.File.FilePullDataResponse.data)
}
inline ::std::string* FilePullDataResponse::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.File.FilePullDataResponse.data)
  return data_;
}
inline ::std::string* FilePullDataResponse::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FilePullDataResponse::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.File.FilePullDataResponse.data)
}

// -------------------------------------------------------------------

// FileRequest

// required uint32 from_user_id = 1;
inline bool FileRequest::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileRequest::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileRequest::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileRequest::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 FileRequest::from_user_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FileRequest.from_user_id)
  return from_user_id_;
}
inline void FileRequest::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileRequest.from_user_id)
}

// required uint32 to_user_id = 2;
inline bool FileRequest::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileRequest::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileRequest::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileRequest::clear_to_user_id() {
  to_user_id_ = 0u;
  clear_has_to_user_id();
}
inline ::google::protobuf::uint32 FileRequest::to_user_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FileRequest.to_user_id)
  return to_user_id_;
}
inline void FileRequest::set_to_user_id(::google::protobuf::uint32 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileRequest.to_user_id)
}

// required string file_name = 3;
inline bool FileRequest::has_file_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileRequest::set_has_file_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileRequest::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileRequest::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& FileRequest::file_name() const {
  // @@protoc_insertion_point(field_get:Im.File.FileRequest.file_name)
  return *file_name_;
}
inline void FileRequest::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set:Im.File.FileRequest.file_name)
}
inline void FileRequest::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.File.FileRequest.file_name)
}
inline void FileRequest::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.File.FileRequest.file_name)
}
inline ::std::string* FileRequest::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.File.FileRequest.file_name)
  return file_name_;
}
inline ::std::string* FileRequest::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FileRequest::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.File.FileRequest.file_name)
}

// required uint32 file_size = 4;
inline bool FileRequest::has_file_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileRequest::set_has_file_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FileRequest::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FileRequest::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
inline ::google::protobuf::uint32 FileRequest::file_size() const {
  // @@protoc_insertion_point(field_get:Im.File.FileRequest.file_size)
  return file_size_;
}
inline void FileRequest::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileRequest.file_size)
}

// required .Im.Base.FileType transfer_mode = 5;
inline bool FileRequest::has_transfer_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FileRequest::set_has_transfer_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FileRequest::clear_has_transfer_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FileRequest::clear_transfer_mode() {
  transfer_mode_ = 1;
  clear_has_transfer_mode();
}
inline ::Im::Base::FileType FileRequest::transfer_mode() const {
  // @@protoc_insertion_point(field_get:Im.File.FileRequest.transfer_mode)
  return static_cast< ::Im::Base::FileType >(transfer_mode_);
}
inline void FileRequest::set_transfer_mode(::Im::Base::FileType value) {
  assert(::Im::Base::FileType_IsValid(value));
  set_has_transfer_mode();
  transfer_mode_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileRequest.transfer_mode)
}

// -------------------------------------------------------------------

// FileResponse

// required uint32 result_code = 1;
inline bool FileResponse::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileResponse::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileResponse::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileResponse::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 FileResponse::result_code() const {
  // @@protoc_insertion_point(field_get:Im.File.FileResponse.result_code)
  return result_code_;
}
inline void FileResponse::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileResponse.result_code)
}

// required uint32 from_user_id = 2;
inline bool FileResponse::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileResponse::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileResponse::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileResponse::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 FileResponse::from_user_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FileResponse.from_user_id)
  return from_user_id_;
}
inline void FileResponse::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileResponse.from_user_id)
}

// required uint32 to_user_id = 3;
inline bool FileResponse::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileResponse::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileResponse::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileResponse::clear_to_user_id() {
  to_user_id_ = 0u;
  clear_has_to_user_id();
}
inline ::google::protobuf::uint32 FileResponse::to_user_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FileResponse.to_user_id)
  return to_user_id_;
}
inline void FileResponse::set_to_user_id(::google::protobuf::uint32 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileResponse.to_user_id)
}

// required string file_name = 4;
inline bool FileResponse::has_file_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileResponse::set_has_file_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FileResponse::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FileResponse::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& FileResponse::file_name() const {
  // @@protoc_insertion_point(field_get:Im.File.FileResponse.file_name)
  return *file_name_;
}
inline void FileResponse::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set:Im.File.FileResponse.file_name)
}
inline void FileResponse::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.File.FileResponse.file_name)
}
inline void FileResponse::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.File.FileResponse.file_name)
}
inline ::std::string* FileResponse::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.File.FileResponse.file_name)
  return file_name_;
}
inline ::std::string* FileResponse::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FileResponse::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.File.FileResponse.file_name)
}

// required string task_id = 5;
inline bool FileResponse::has_task_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FileResponse::set_has_task_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FileResponse::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FileResponse::clear_task_id() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_->clear();
  }
  clear_has_task_id();
}
inline const ::std::string& FileResponse::task_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FileResponse.task_id)
  return *task_id_;
}
inline void FileResponse::set_task_id(const ::std::string& value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set:Im.File.FileResponse.task_id)
}
inline void FileResponse::set_task_id(const char* value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.File.FileResponse.task_id)
}
inline void FileResponse::set_task_id(const char* value, size_t size) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.File.FileResponse.task_id)
}
inline ::std::string* FileResponse::mutable_task_id() {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.File.FileResponse.task_id)
  return task_id_;
}
inline ::std::string* FileResponse::release_task_id() {
  clear_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = task_id_;
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FileResponse::set_allocated_task_id(::std::string* task_id) {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (task_id) {
    set_has_task_id();
    task_id_ = task_id;
  } else {
    clear_has_task_id();
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.File.FileResponse.task_id)
}

// repeated .Im.Base.IpAddr ip_addr_list = 6;
inline int FileResponse::ip_addr_list_size() const {
  return ip_addr_list_.size();
}
inline void FileResponse::clear_ip_addr_list() {
  ip_addr_list_.Clear();
}
inline const ::Im::Base::IpAddr& FileResponse::ip_addr_list(int index) const {
  // @@protoc_insertion_point(field_get:Im.File.FileResponse.ip_addr_list)
  return ip_addr_list_.Get(index);
}
inline ::Im::Base::IpAddr* FileResponse::mutable_ip_addr_list(int index) {
  // @@protoc_insertion_point(field_mutable:Im.File.FileResponse.ip_addr_list)
  return ip_addr_list_.Mutable(index);
}
inline ::Im::Base::IpAddr* FileResponse::add_ip_addr_list() {
  // @@protoc_insertion_point(field_add:Im.File.FileResponse.ip_addr_list)
  return ip_addr_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Im::Base::IpAddr >&
FileResponse::ip_addr_list() const {
  // @@protoc_insertion_point(field_list:Im.File.FileResponse.ip_addr_list)
  return ip_addr_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Im::Base::IpAddr >*
FileResponse::mutable_ip_addr_list() {
  // @@protoc_insertion_point(field_mutable_list:Im.File.FileResponse.ip_addr_list)
  return &ip_addr_list_;
}

// required .Im.Base.FileType transfer_mode = 7;
inline bool FileResponse::has_transfer_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FileResponse::set_has_transfer_mode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FileResponse::clear_has_transfer_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FileResponse::clear_transfer_mode() {
  transfer_mode_ = 1;
  clear_has_transfer_mode();
}
inline ::Im::Base::FileType FileResponse::transfer_mode() const {
  // @@protoc_insertion_point(field_get:Im.File.FileResponse.transfer_mode)
  return static_cast< ::Im::Base::FileType >(transfer_mode_);
}
inline void FileResponse::set_transfer_mode(::Im::Base::FileType value) {
  assert(::Im::Base::FileType_IsValid(value));
  set_has_transfer_mode();
  transfer_mode_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileResponse.transfer_mode)
}

// -------------------------------------------------------------------

// FileNotify

// required uint32 from_user_id = 1;
inline bool FileNotify::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileNotify::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileNotify::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileNotify::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 FileNotify::from_user_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FileNotify.from_user_id)
  return from_user_id_;
}
inline void FileNotify::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileNotify.from_user_id)
}

// required uint32 to_user_id = 2;
inline bool FileNotify::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileNotify::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileNotify::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileNotify::clear_to_user_id() {
  to_user_id_ = 0u;
  clear_has_to_user_id();
}
inline ::google::protobuf::uint32 FileNotify::to_user_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FileNotify.to_user_id)
  return to_user_id_;
}
inline void FileNotify::set_to_user_id(::google::protobuf::uint32 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileNotify.to_user_id)
}

// required string file_name = 3;
inline bool FileNotify::has_file_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileNotify::set_has_file_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileNotify::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileNotify::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& FileNotify::file_name() const {
  // @@protoc_insertion_point(field_get:Im.File.FileNotify.file_name)
  return *file_name_;
}
inline void FileNotify::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set:Im.File.FileNotify.file_name)
}
inline void FileNotify::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.File.FileNotify.file_name)
}
inline void FileNotify::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.File.FileNotify.file_name)
}
inline ::std::string* FileNotify::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.File.FileNotify.file_name)
  return file_name_;
}
inline ::std::string* FileNotify::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FileNotify::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.File.FileNotify.file_name)
}

// required uint32 file_size = 4;
inline bool FileNotify::has_file_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileNotify::set_has_file_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FileNotify::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FileNotify::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
inline ::google::protobuf::uint32 FileNotify::file_size() const {
  // @@protoc_insertion_point(field_get:Im.File.FileNotify.file_size)
  return file_size_;
}
inline void FileNotify::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileNotify.file_size)
}

// required string task_id = 5;
inline bool FileNotify::has_task_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FileNotify::set_has_task_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FileNotify::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FileNotify::clear_task_id() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_->clear();
  }
  clear_has_task_id();
}
inline const ::std::string& FileNotify::task_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FileNotify.task_id)
  return *task_id_;
}
inline void FileNotify::set_task_id(const ::std::string& value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set:Im.File.FileNotify.task_id)
}
inline void FileNotify::set_task_id(const char* value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.File.FileNotify.task_id)
}
inline void FileNotify::set_task_id(const char* value, size_t size) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.File.FileNotify.task_id)
}
inline ::std::string* FileNotify::mutable_task_id() {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.File.FileNotify.task_id)
  return task_id_;
}
inline ::std::string* FileNotify::release_task_id() {
  clear_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = task_id_;
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FileNotify::set_allocated_task_id(::std::string* task_id) {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (task_id) {
    set_has_task_id();
    task_id_ = task_id;
  } else {
    clear_has_task_id();
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.File.FileNotify.task_id)
}

// repeated .Im.Base.IpAddr ip_addr_list = 6;
inline int FileNotify::ip_addr_list_size() const {
  return ip_addr_list_.size();
}
inline void FileNotify::clear_ip_addr_list() {
  ip_addr_list_.Clear();
}
inline const ::Im::Base::IpAddr& FileNotify::ip_addr_list(int index) const {
  // @@protoc_insertion_point(field_get:Im.File.FileNotify.ip_addr_list)
  return ip_addr_list_.Get(index);
}
inline ::Im::Base::IpAddr* FileNotify::mutable_ip_addr_list(int index) {
  // @@protoc_insertion_point(field_mutable:Im.File.FileNotify.ip_addr_list)
  return ip_addr_list_.Mutable(index);
}
inline ::Im::Base::IpAddr* FileNotify::add_ip_addr_list() {
  // @@protoc_insertion_point(field_add:Im.File.FileNotify.ip_addr_list)
  return ip_addr_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Im::Base::IpAddr >&
FileNotify::ip_addr_list() const {
  // @@protoc_insertion_point(field_list:Im.File.FileNotify.ip_addr_list)
  return ip_addr_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Im::Base::IpAddr >*
FileNotify::mutable_ip_addr_list() {
  // @@protoc_insertion_point(field_mutable_list:Im.File.FileNotify.ip_addr_list)
  return &ip_addr_list_;
}

// required .Im.Base.FileType transfer_mode = 7;
inline bool FileNotify::has_transfer_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FileNotify::set_has_transfer_mode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FileNotify::clear_has_transfer_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FileNotify::clear_transfer_mode() {
  transfer_mode_ = 1;
  clear_has_transfer_mode();
}
inline ::Im::Base::FileType FileNotify::transfer_mode() const {
  // @@protoc_insertion_point(field_get:Im.File.FileNotify.transfer_mode)
  return static_cast< ::Im::Base::FileType >(transfer_mode_);
}
inline void FileNotify::set_transfer_mode(::Im::Base::FileType value) {
  assert(::Im::Base::FileType_IsValid(value));
  set_has_transfer_mode();
  transfer_mode_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileNotify.transfer_mode)
}

// required uint32 offline_ready = 8;
inline bool FileNotify::has_offline_ready() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FileNotify::set_has_offline_ready() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FileNotify::clear_has_offline_ready() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FileNotify::clear_offline_ready() {
  offline_ready_ = 0u;
  clear_has_offline_ready();
}
inline ::google::protobuf::uint32 FileNotify::offline_ready() const {
  // @@protoc_insertion_point(field_get:Im.File.FileNotify.offline_ready)
  return offline_ready_;
}
inline void FileNotify::set_offline_ready(::google::protobuf::uint32 value) {
  set_has_offline_ready();
  offline_ready_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileNotify.offline_ready)
}

// -------------------------------------------------------------------

// FileHasOfflineRequest

// required uint32 user_id = 1;
inline bool FileHasOfflineRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileHasOfflineRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileHasOfflineRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileHasOfflineRequest::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 FileHasOfflineRequest::user_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FileHasOfflineRequest.user_id)
  return user_id_;
}
inline void FileHasOfflineRequest::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileHasOfflineRequest.user_id)
}

// optional bytes attach_data = 2;
inline bool FileHasOfflineRequest::has_attach_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileHasOfflineRequest::set_has_attach_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileHasOfflineRequest::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileHasOfflineRequest::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& FileHasOfflineRequest::attach_data() const {
  // @@protoc_insertion_point(field_get:Im.File.FileHasOfflineRequest.attach_data)
  return *attach_data_;
}
inline void FileHasOfflineRequest::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:Im.File.FileHasOfflineRequest.attach_data)
}
inline void FileHasOfflineRequest::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.File.FileHasOfflineRequest.attach_data)
}
inline void FileHasOfflineRequest::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.File.FileHasOfflineRequest.attach_data)
}
inline ::std::string* FileHasOfflineRequest::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.File.FileHasOfflineRequest.attach_data)
  return attach_data_;
}
inline ::std::string* FileHasOfflineRequest::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FileHasOfflineRequest::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.File.FileHasOfflineRequest.attach_data)
}

// -------------------------------------------------------------------

// FileHasOfflineResponse

// required uint32 user_id = 1;
inline bool FileHasOfflineResponse::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileHasOfflineResponse::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileHasOfflineResponse::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileHasOfflineResponse::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 FileHasOfflineResponse::user_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FileHasOfflineResponse.user_id)
  return user_id_;
}
inline void FileHasOfflineResponse::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileHasOfflineResponse.user_id)
}

// repeated .Im.Base.OfflineFileInfo offline_file_list = 2;
inline int FileHasOfflineResponse::offline_file_list_size() const {
  return offline_file_list_.size();
}
inline void FileHasOfflineResponse::clear_offline_file_list() {
  offline_file_list_.Clear();
}
inline const ::Im::Base::OfflineFileInfo& FileHasOfflineResponse::offline_file_list(int index) const {
  // @@protoc_insertion_point(field_get:Im.File.FileHasOfflineResponse.offline_file_list)
  return offline_file_list_.Get(index);
}
inline ::Im::Base::OfflineFileInfo* FileHasOfflineResponse::mutable_offline_file_list(int index) {
  // @@protoc_insertion_point(field_mutable:Im.File.FileHasOfflineResponse.offline_file_list)
  return offline_file_list_.Mutable(index);
}
inline ::Im::Base::OfflineFileInfo* FileHasOfflineResponse::add_offline_file_list() {
  // @@protoc_insertion_point(field_add:Im.File.FileHasOfflineResponse.offline_file_list)
  return offline_file_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Im::Base::OfflineFileInfo >&
FileHasOfflineResponse::offline_file_list() const {
  // @@protoc_insertion_point(field_list:Im.File.FileHasOfflineResponse.offline_file_list)
  return offline_file_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Im::Base::OfflineFileInfo >*
FileHasOfflineResponse::mutable_offline_file_list() {
  // @@protoc_insertion_point(field_mutable_list:Im.File.FileHasOfflineResponse.offline_file_list)
  return &offline_file_list_;
}

// repeated .Im.Base.IpAddr ip_addr_list = 3;
inline int FileHasOfflineResponse::ip_addr_list_size() const {
  return ip_addr_list_.size();
}
inline void FileHasOfflineResponse::clear_ip_addr_list() {
  ip_addr_list_.Clear();
}
inline const ::Im::Base::IpAddr& FileHasOfflineResponse::ip_addr_list(int index) const {
  // @@protoc_insertion_point(field_get:Im.File.FileHasOfflineResponse.ip_addr_list)
  return ip_addr_list_.Get(index);
}
inline ::Im::Base::IpAddr* FileHasOfflineResponse::mutable_ip_addr_list(int index) {
  // @@protoc_insertion_point(field_mutable:Im.File.FileHasOfflineResponse.ip_addr_list)
  return ip_addr_list_.Mutable(index);
}
inline ::Im::Base::IpAddr* FileHasOfflineResponse::add_ip_addr_list() {
  // @@protoc_insertion_point(field_add:Im.File.FileHasOfflineResponse.ip_addr_list)
  return ip_addr_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Im::Base::IpAddr >&
FileHasOfflineResponse::ip_addr_list() const {
  // @@protoc_insertion_point(field_list:Im.File.FileHasOfflineResponse.ip_addr_list)
  return ip_addr_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Im::Base::IpAddr >*
FileHasOfflineResponse::mutable_ip_addr_list() {
  // @@protoc_insertion_point(field_mutable_list:Im.File.FileHasOfflineResponse.ip_addr_list)
  return &ip_addr_list_;
}

// optional bytes attach_data = 4;
inline bool FileHasOfflineResponse::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileHasOfflineResponse::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FileHasOfflineResponse::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FileHasOfflineResponse::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& FileHasOfflineResponse::attach_data() const {
  // @@protoc_insertion_point(field_get:Im.File.FileHasOfflineResponse.attach_data)
  return *attach_data_;
}
inline void FileHasOfflineResponse::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:Im.File.FileHasOfflineResponse.attach_data)
}
inline void FileHasOfflineResponse::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.File.FileHasOfflineResponse.attach_data)
}
inline void FileHasOfflineResponse::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.File.FileHasOfflineResponse.attach_data)
}
inline ::std::string* FileHasOfflineResponse::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.File.FileHasOfflineResponse.attach_data)
  return attach_data_;
}
inline ::std::string* FileHasOfflineResponse::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FileHasOfflineResponse::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.File.FileHasOfflineResponse.attach_data)
}

// -------------------------------------------------------------------

// FileAddOfflineRequest

// required uint32 from_user_id = 1;
inline bool FileAddOfflineRequest::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileAddOfflineRequest::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileAddOfflineRequest::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileAddOfflineRequest::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 FileAddOfflineRequest::from_user_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FileAddOfflineRequest.from_user_id)
  return from_user_id_;
}
inline void FileAddOfflineRequest::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileAddOfflineRequest.from_user_id)
}

// required uint32 to_user_id = 2;
inline bool FileAddOfflineRequest::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileAddOfflineRequest::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileAddOfflineRequest::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileAddOfflineRequest::clear_to_user_id() {
  to_user_id_ = 0u;
  clear_has_to_user_id();
}
inline ::google::protobuf::uint32 FileAddOfflineRequest::to_user_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FileAddOfflineRequest.to_user_id)
  return to_user_id_;
}
inline void FileAddOfflineRequest::set_to_user_id(::google::protobuf::uint32 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileAddOfflineRequest.to_user_id)
}

// required string task_id = 3;
inline bool FileAddOfflineRequest::has_task_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileAddOfflineRequest::set_has_task_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileAddOfflineRequest::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileAddOfflineRequest::clear_task_id() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_->clear();
  }
  clear_has_task_id();
}
inline const ::std::string& FileAddOfflineRequest::task_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FileAddOfflineRequest.task_id)
  return *task_id_;
}
inline void FileAddOfflineRequest::set_task_id(const ::std::string& value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set:Im.File.FileAddOfflineRequest.task_id)
}
inline void FileAddOfflineRequest::set_task_id(const char* value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.File.FileAddOfflineRequest.task_id)
}
inline void FileAddOfflineRequest::set_task_id(const char* value, size_t size) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.File.FileAddOfflineRequest.task_id)
}
inline ::std::string* FileAddOfflineRequest::mutable_task_id() {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.File.FileAddOfflineRequest.task_id)
  return task_id_;
}
inline ::std::string* FileAddOfflineRequest::release_task_id() {
  clear_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = task_id_;
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FileAddOfflineRequest::set_allocated_task_id(::std::string* task_id) {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (task_id) {
    set_has_task_id();
    task_id_ = task_id;
  } else {
    clear_has_task_id();
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.File.FileAddOfflineRequest.task_id)
}

// required string file_name = 4;
inline bool FileAddOfflineRequest::has_file_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileAddOfflineRequest::set_has_file_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FileAddOfflineRequest::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FileAddOfflineRequest::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& FileAddOfflineRequest::file_name() const {
  // @@protoc_insertion_point(field_get:Im.File.FileAddOfflineRequest.file_name)
  return *file_name_;
}
inline void FileAddOfflineRequest::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set:Im.File.FileAddOfflineRequest.file_name)
}
inline void FileAddOfflineRequest::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.File.FileAddOfflineRequest.file_name)
}
inline void FileAddOfflineRequest::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.File.FileAddOfflineRequest.file_name)
}
inline ::std::string* FileAddOfflineRequest::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.File.FileAddOfflineRequest.file_name)
  return file_name_;
}
inline ::std::string* FileAddOfflineRequest::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FileAddOfflineRequest::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.File.FileAddOfflineRequest.file_name)
}

// required uint32 file_size = 5;
inline bool FileAddOfflineRequest::has_file_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FileAddOfflineRequest::set_has_file_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FileAddOfflineRequest::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FileAddOfflineRequest::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
inline ::google::protobuf::uint32 FileAddOfflineRequest::file_size() const {
  // @@protoc_insertion_point(field_get:Im.File.FileAddOfflineRequest.file_size)
  return file_size_;
}
inline void FileAddOfflineRequest::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileAddOfflineRequest.file_size)
}

// -------------------------------------------------------------------

// FileDelOfflineRequest

// required uint32 from_user_id = 1;
inline bool FileDelOfflineRequest::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileDelOfflineRequest::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileDelOfflineRequest::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileDelOfflineRequest::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 FileDelOfflineRequest::from_user_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FileDelOfflineRequest.from_user_id)
  return from_user_id_;
}
inline void FileDelOfflineRequest::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileDelOfflineRequest.from_user_id)
}

// required uint32 to_user_id = 2;
inline bool FileDelOfflineRequest::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileDelOfflineRequest::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileDelOfflineRequest::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileDelOfflineRequest::clear_to_user_id() {
  to_user_id_ = 0u;
  clear_has_to_user_id();
}
inline ::google::protobuf::uint32 FileDelOfflineRequest::to_user_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FileDelOfflineRequest.to_user_id)
  return to_user_id_;
}
inline void FileDelOfflineRequest::set_to_user_id(::google::protobuf::uint32 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.File.FileDelOfflineRequest.to_user_id)
}

// required string task_id = 3;
inline bool FileDelOfflineRequest::has_task_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileDelOfflineRequest::set_has_task_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileDelOfflineRequest::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileDelOfflineRequest::clear_task_id() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_->clear();
  }
  clear_has_task_id();
}
inline const ::std::string& FileDelOfflineRequest::task_id() const {
  // @@protoc_insertion_point(field_get:Im.File.FileDelOfflineRequest.task_id)
  return *task_id_;
}
inline void FileDelOfflineRequest::set_task_id(const ::std::string& value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set:Im.File.FileDelOfflineRequest.task_id)
}
inline void FileDelOfflineRequest::set_task_id(const char* value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.File.FileDelOfflineRequest.task_id)
}
inline void FileDelOfflineRequest::set_task_id(const char* value, size_t size) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.File.FileDelOfflineRequest.task_id)
}
inline ::std::string* FileDelOfflineRequest::mutable_task_id() {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.File.FileDelOfflineRequest.task_id)
  return task_id_;
}
inline ::std::string* FileDelOfflineRequest::release_task_id() {
  clear_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = task_id_;
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FileDelOfflineRequest::set_allocated_task_id(::std::string* task_id) {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (task_id) {
    set_has_task_id();
    task_id_ = task_id;
  } else {
    clear_has_task_id();
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.File.FileDelOfflineRequest.task_id)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace File
}  // namespace Im

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Im_2eFile_2eproto__INCLUDED
