// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Im.File.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Im.File.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Im {
namespace File {

namespace {

const ::google::protobuf::Descriptor* FileLoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileLoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileLoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileLoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* FilePullDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilePullDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FilePullDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilePullDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileHasOfflineRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileHasOfflineRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileHasOfflineResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileHasOfflineResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileAddOfflineRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileAddOfflineRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileDelOfflineRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileDelOfflineRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Im_2eFile_2eproto() {
  protobuf_AddDesc_Im_2eFile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Im.File.proto");
  GOOGLE_CHECK(file != NULL);
  FileLoginRequest_descriptor_ = file->message_type(0);
  static const int FileLoginRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoginRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoginRequest, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoginRequest, file_role_),
  };
  FileLoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileLoginRequest_descriptor_,
      FileLoginRequest::default_instance_,
      FileLoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileLoginRequest));
  FileLoginResponse_descriptor_ = file->message_type(1);
  static const int FileLoginResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoginResponse, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoginResponse, task_id_),
  };
  FileLoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileLoginResponse_descriptor_,
      FileLoginResponse::default_instance_,
      FileLoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileLoginResponse));
  FileStatus_descriptor_ = file->message_type(2);
  static const int FileStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileStatus, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileStatus, file_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileStatus, task_id_),
  };
  FileStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileStatus_descriptor_,
      FileStatus::default_instance_,
      FileStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileStatus));
  FilePullDataRequest_descriptor_ = file->message_type(3);
  static const int FilePullDataRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilePullDataRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilePullDataRequest, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilePullDataRequest, transfer_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilePullDataRequest, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilePullDataRequest, data_size_),
  };
  FilePullDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FilePullDataRequest_descriptor_,
      FilePullDataRequest::default_instance_,
      FilePullDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilePullDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilePullDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FilePullDataRequest));
  FilePullDataResponse_descriptor_ = file->message_type(4);
  static const int FilePullDataResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilePullDataResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilePullDataResponse, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilePullDataResponse, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilePullDataResponse, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilePullDataResponse, data_),
  };
  FilePullDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FilePullDataResponse_descriptor_,
      FilePullDataResponse::default_instance_,
      FilePullDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilePullDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilePullDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FilePullDataResponse));
  FileRequest_descriptor_ = file->message_type(5);
  static const int FileRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileRequest, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileRequest, to_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileRequest, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileRequest, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileRequest, transfer_mode_),
  };
  FileRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileRequest_descriptor_,
      FileRequest::default_instance_,
      FileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileRequest));
  FileResponse_descriptor_ = file->message_type(6);
  static const int FileResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileResponse, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileResponse, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileResponse, to_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileResponse, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileResponse, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileResponse, ip_addr_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileResponse, transfer_mode_),
  };
  FileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileResponse_descriptor_,
      FileResponse::default_instance_,
      FileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileResponse));
  FileNotify_descriptor_ = file->message_type(7);
  static const int FileNotify_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileNotify, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileNotify, to_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileNotify, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileNotify, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileNotify, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileNotify, ip_addr_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileNotify, transfer_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileNotify, offline_ready_),
  };
  FileNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileNotify_descriptor_,
      FileNotify::default_instance_,
      FileNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileNotify));
  FileHasOfflineRequest_descriptor_ = file->message_type(8);
  static const int FileHasOfflineRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileHasOfflineRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileHasOfflineRequest, attach_data_),
  };
  FileHasOfflineRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileHasOfflineRequest_descriptor_,
      FileHasOfflineRequest::default_instance_,
      FileHasOfflineRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileHasOfflineRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileHasOfflineRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileHasOfflineRequest));
  FileHasOfflineResponse_descriptor_ = file->message_type(9);
  static const int FileHasOfflineResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileHasOfflineResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileHasOfflineResponse, offline_file_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileHasOfflineResponse, ip_addr_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileHasOfflineResponse, attach_data_),
  };
  FileHasOfflineResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileHasOfflineResponse_descriptor_,
      FileHasOfflineResponse::default_instance_,
      FileHasOfflineResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileHasOfflineResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileHasOfflineResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileHasOfflineResponse));
  FileAddOfflineRequest_descriptor_ = file->message_type(10);
  static const int FileAddOfflineRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAddOfflineRequest, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAddOfflineRequest, to_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAddOfflineRequest, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAddOfflineRequest, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAddOfflineRequest, file_size_),
  };
  FileAddOfflineRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileAddOfflineRequest_descriptor_,
      FileAddOfflineRequest::default_instance_,
      FileAddOfflineRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAddOfflineRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAddOfflineRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileAddOfflineRequest));
  FileDelOfflineRequest_descriptor_ = file->message_type(11);
  static const int FileDelOfflineRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileDelOfflineRequest, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileDelOfflineRequest, to_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileDelOfflineRequest, task_id_),
  };
  FileDelOfflineRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileDelOfflineRequest_descriptor_,
      FileDelOfflineRequest::default_instance_,
      FileDelOfflineRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileDelOfflineRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileDelOfflineRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileDelOfflineRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Im_2eFile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileLoginRequest_descriptor_, &FileLoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileLoginResponse_descriptor_, &FileLoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileStatus_descriptor_, &FileStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FilePullDataRequest_descriptor_, &FilePullDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FilePullDataResponse_descriptor_, &FilePullDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileRequest_descriptor_, &FileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileResponse_descriptor_, &FileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileNotify_descriptor_, &FileNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileHasOfflineRequest_descriptor_, &FileHasOfflineRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileHasOfflineResponse_descriptor_, &FileHasOfflineResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileAddOfflineRequest_descriptor_, &FileAddOfflineRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileDelOfflineRequest_descriptor_, &FileDelOfflineRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Im_2eFile_2eproto() {
  delete FileLoginRequest::default_instance_;
  delete FileLoginRequest_reflection_;
  delete FileLoginResponse::default_instance_;
  delete FileLoginResponse_reflection_;
  delete FileStatus::default_instance_;
  delete FileStatus_reflection_;
  delete FilePullDataRequest::default_instance_;
  delete FilePullDataRequest_reflection_;
  delete FilePullDataResponse::default_instance_;
  delete FilePullDataResponse_reflection_;
  delete FileRequest::default_instance_;
  delete FileRequest_reflection_;
  delete FileResponse::default_instance_;
  delete FileResponse_reflection_;
  delete FileNotify::default_instance_;
  delete FileNotify_reflection_;
  delete FileHasOfflineRequest::default_instance_;
  delete FileHasOfflineRequest_reflection_;
  delete FileHasOfflineResponse::default_instance_;
  delete FileHasOfflineResponse_reflection_;
  delete FileAddOfflineRequest::default_instance_;
  delete FileAddOfflineRequest_reflection_;
  delete FileDelOfflineRequest::default_instance_;
  delete FileDelOfflineRequest_reflection_;
}

void protobuf_AddDesc_Im_2eFile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Im::Base::protobuf_AddDesc_Im_2eBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rIm.File.proto\022\007Im.File\032\rIm.Base.proto\""
    "`\n\020FileLoginRequest\022\017\n\007user_id\030\001 \002(\r\022\017\n\007"
    "task_id\030\002 \002(\t\022*\n\tfile_role\030\003 \002(\0162\027.Im.Ba"
    "se.ClientFileRole\"9\n\021FileLoginResponse\022\023"
    "\n\013result_code\030\001 \002(\r\022\017\n\007task_id\030\002 \002(\t\"^\n\n"
    "FileStatus\022\017\n\007user_id\030\001 \002(\r\022.\n\013file_stat"
    "us\030\002 \002(\0162\031.Im.Base.ClientFileStatus\022\017\n\007t"
    "ask_id\030\003 \002(\t\"\204\001\n\023FilePullDataRequest\022\017\n\007"
    "user_id\030\001 \002(\r\022\017\n\007task_id\030\002 \002(\t\022(\n\rtransf"
    "er_mode\030\003 \002(\0162\021.Im.Base.FileType\022\016\n\006offs"
    "et\030\004 \002(\r\022\021\n\tdata_size\030\005 \002(\r\"k\n\024FilePullD"
    "ataResponse\022\017\n\007user_id\030\001 \002(\r\022\023\n\013result_c"
    "ode\030\002 \002(\r\022\017\n\007task_id\030\003 \002(\t\022\016\n\006offset\030\004 \002"
    "(\r\022\014\n\004data\030\005 \002(\014\"\207\001\n\013FileRequest\022\024\n\014from"
    "_user_id\030\001 \002(\r\022\022\n\nto_user_id\030\002 \002(\r\022\021\n\tfi"
    "le_name\030\003 \002(\t\022\021\n\tfile_size\030\004 \002(\r\022(\n\rtran"
    "sfer_mode\030\005 \002(\0162\021.Im.Base.FileType\"\302\001\n\014F"
    "ileResponse\022\023\n\013result_code\030\001 \002(\r\022\024\n\014from"
    "_user_id\030\002 \002(\r\022\022\n\nto_user_id\030\003 \002(\r\022\021\n\tfi"
    "le_name\030\004 \002(\t\022\017\n\007task_id\030\005 \002(\t\022%\n\014ip_add"
    "r_list\030\006 \003(\0132\017.Im.Base.IpAddr\022(\n\rtransfe"
    "r_mode\030\007 \002(\0162\021.Im.Base.FileType\"\325\001\n\nFile"
    "Notify\022\024\n\014from_user_id\030\001 \002(\r\022\022\n\nto_user_"
    "id\030\002 \002(\r\022\021\n\tfile_name\030\003 \002(\t\022\021\n\tfile_size"
    "\030\004 \002(\r\022\017\n\007task_id\030\005 \002(\t\022%\n\014ip_addr_list\030"
    "\006 \003(\0132\017.Im.Base.IpAddr\022(\n\rtransfer_mode\030"
    "\007 \002(\0162\021.Im.Base.FileType\022\025\n\roffline_read"
    "y\030\010 \002(\r\"=\n\025FileHasOfflineRequest\022\017\n\007user"
    "_id\030\001 \002(\r\022\023\n\013attach_data\030\002 \001(\014\"\232\001\n\026FileH"
    "asOfflineResponse\022\017\n\007user_id\030\001 \002(\r\0223\n\021of"
    "fline_file_list\030\002 \003(\0132\030.Im.Base.OfflineF"
    "ileInfo\022%\n\014ip_addr_list\030\003 \003(\0132\017.Im.Base."
    "IpAddr\022\023\n\013attach_data\030\004 \001(\014\"x\n\025FileAddOf"
    "flineRequest\022\024\n\014from_user_id\030\001 \002(\r\022\022\n\nto"
    "_user_id\030\002 \002(\r\022\017\n\007task_id\030\003 \002(\t\022\021\n\tfile_"
    "name\030\004 \002(\t\022\021\n\tfile_size\030\005 \002(\r\"R\n\025FileDel"
    "OfflineRequest\022\024\n\014from_user_id\030\001 \002(\r\022\022\n\n"
    "to_user_id\030\002 \002(\r\022\017\n\007task_id\030\003 \002(\tB)\n\'com"
    ".example.user.myapplication.protobuf", 1556);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Im.File.proto", &protobuf_RegisterTypes);
  FileLoginRequest::default_instance_ = new FileLoginRequest();
  FileLoginResponse::default_instance_ = new FileLoginResponse();
  FileStatus::default_instance_ = new FileStatus();
  FilePullDataRequest::default_instance_ = new FilePullDataRequest();
  FilePullDataResponse::default_instance_ = new FilePullDataResponse();
  FileRequest::default_instance_ = new FileRequest();
  FileResponse::default_instance_ = new FileResponse();
  FileNotify::default_instance_ = new FileNotify();
  FileHasOfflineRequest::default_instance_ = new FileHasOfflineRequest();
  FileHasOfflineResponse::default_instance_ = new FileHasOfflineResponse();
  FileAddOfflineRequest::default_instance_ = new FileAddOfflineRequest();
  FileDelOfflineRequest::default_instance_ = new FileDelOfflineRequest();
  FileLoginRequest::default_instance_->InitAsDefaultInstance();
  FileLoginResponse::default_instance_->InitAsDefaultInstance();
  FileStatus::default_instance_->InitAsDefaultInstance();
  FilePullDataRequest::default_instance_->InitAsDefaultInstance();
  FilePullDataResponse::default_instance_->InitAsDefaultInstance();
  FileRequest::default_instance_->InitAsDefaultInstance();
  FileResponse::default_instance_->InitAsDefaultInstance();
  FileNotify::default_instance_->InitAsDefaultInstance();
  FileHasOfflineRequest::default_instance_->InitAsDefaultInstance();
  FileHasOfflineResponse::default_instance_->InitAsDefaultInstance();
  FileAddOfflineRequest::default_instance_->InitAsDefaultInstance();
  FileDelOfflineRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Im_2eFile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Im_2eFile_2eproto {
  StaticDescriptorInitializer_Im_2eFile_2eproto() {
    protobuf_AddDesc_Im_2eFile_2eproto();
  }
} static_descriptor_initializer_Im_2eFile_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FileLoginRequest::kUserIdFieldNumber;
const int FileLoginRequest::kTaskIdFieldNumber;
const int FileLoginRequest::kFileRoleFieldNumber;
#endif  // !_MSC_VER

FileLoginRequest::FileLoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.File.FileLoginRequest)
}

void FileLoginRequest::InitAsDefaultInstance() {
}

FileLoginRequest::FileLoginRequest(const FileLoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.File.FileLoginRequest)
}

void FileLoginRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_role_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileLoginRequest::~FileLoginRequest() {
  // @@protoc_insertion_point(destructor:Im.File.FileLoginRequest)
  SharedDtor();
}

void FileLoginRequest::SharedDtor() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (this != default_instance_) {
  }
}

void FileLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileLoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileLoginRequest_descriptor_;
}

const FileLoginRequest& FileLoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eFile_2eproto();
  return *default_instance_;
}

FileLoginRequest* FileLoginRequest::default_instance_ = NULL;

FileLoginRequest* FileLoginRequest::New() const {
  return new FileLoginRequest;
}

void FileLoginRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = 0u;
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        task_id_->clear();
      }
    }
    file_role_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.File.FileLoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_task_id;
        break;
      }

      // required string task_id = 2;
      case 2: {
        if (tag == 18) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->task_id().data(), this->task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "task_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_file_role;
        break;
      }

      // required .Im.Base.ClientFileRole file_role = 3;
      case 3: {
        if (tag == 24) {
         parse_file_role:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::ClientFileRole_IsValid(value)) {
            set_file_role(static_cast< ::Im::Base::ClientFileRole >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.File.FileLoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.File.FileLoginRequest)
  return false;
#undef DO_
}

void FileLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.File.FileLoginRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required string task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->task_id(), output);
  }

  // required .Im.Base.ClientFileRole file_role = 3;
  if (has_file_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->file_role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.File.FileLoginRequest)
}

::google::protobuf::uint8* FileLoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.File.FileLoginRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required string task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->task_id(), target);
  }

  // required .Im.Base.ClientFileRole file_role = 3;
  if (has_file_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->file_role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.File.FileLoginRequest)
  return target;
}

int FileLoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_id());
    }

    // required .Im.Base.ClientFileRole file_role = 3;
    if (has_file_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileLoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileLoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileLoginRequest::MergeFrom(const FileLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_file_role()) {
      set_file_role(from.file_role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileLoginRequest::CopyFrom(const FileLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileLoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FileLoginRequest::Swap(FileLoginRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(file_role_, other->file_role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileLoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileLoginRequest_descriptor_;
  metadata.reflection = FileLoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileLoginResponse::kResultCodeFieldNumber;
const int FileLoginResponse::kTaskIdFieldNumber;
#endif  // !_MSC_VER

FileLoginResponse::FileLoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.File.FileLoginResponse)
}

void FileLoginResponse::InitAsDefaultInstance() {
}

FileLoginResponse::FileLoginResponse(const FileLoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.File.FileLoginResponse)
}

void FileLoginResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_code_ = 0u;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileLoginResponse::~FileLoginResponse() {
  // @@protoc_insertion_point(destructor:Im.File.FileLoginResponse)
  SharedDtor();
}

void FileLoginResponse::SharedDtor() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (this != default_instance_) {
  }
}

void FileLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileLoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileLoginResponse_descriptor_;
}

const FileLoginResponse& FileLoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eFile_2eproto();
  return *default_instance_;
}

FileLoginResponse* FileLoginResponse::default_instance_ = NULL;

FileLoginResponse* FileLoginResponse::New() const {
  return new FileLoginResponse;
}

void FileLoginResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_code_ = 0u;
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        task_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.File.FileLoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_task_id;
        break;
      }

      // required string task_id = 2;
      case 2: {
        if (tag == 18) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->task_id().data(), this->task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "task_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.File.FileLoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.File.FileLoginResponse)
  return false;
#undef DO_
}

void FileLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.File.FileLoginResponse)
  // required uint32 result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_code(), output);
  }

  // required string task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.File.FileLoginResponse)
}

::google::protobuf::uint8* FileLoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.File.FileLoginResponse)
  // required uint32 result_code = 1;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_code(), target);
  }

  // required string task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.File.FileLoginResponse)
  return target;
}

int FileLoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_code = 1;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // required string task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileLoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileLoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileLoginResponse::MergeFrom(const FileLoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileLoginResponse::CopyFrom(const FileLoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileLoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FileLoginResponse::Swap(FileLoginResponse* other) {
  if (other != this) {
    std::swap(result_code_, other->result_code_);
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileLoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileLoginResponse_descriptor_;
  metadata.reflection = FileLoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileStatus::kUserIdFieldNumber;
const int FileStatus::kFileStatusFieldNumber;
const int FileStatus::kTaskIdFieldNumber;
#endif  // !_MSC_VER

FileStatus::FileStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.File.FileStatus)
}

void FileStatus::InitAsDefaultInstance() {
}

FileStatus::FileStatus(const FileStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.File.FileStatus)
}

void FileStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  file_status_ = 1;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileStatus::~FileStatus() {
  // @@protoc_insertion_point(destructor:Im.File.FileStatus)
  SharedDtor();
}

void FileStatus::SharedDtor() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (this != default_instance_) {
  }
}

void FileStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileStatus_descriptor_;
}

const FileStatus& FileStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eFile_2eproto();
  return *default_instance_;
}

FileStatus* FileStatus::default_instance_ = NULL;

FileStatus* FileStatus::New() const {
  return new FileStatus;
}

void FileStatus::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = 0u;
    file_status_ = 1;
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        task_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.File.FileStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_file_status;
        break;
      }

      // required .Im.Base.ClientFileStatus file_status = 2;
      case 2: {
        if (tag == 16) {
         parse_file_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::ClientFileStatus_IsValid(value)) {
            set_file_status(static_cast< ::Im::Base::ClientFileStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_task_id;
        break;
      }

      // required string task_id = 3;
      case 3: {
        if (tag == 26) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->task_id().data(), this->task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "task_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.File.FileStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.File.FileStatus)
  return false;
#undef DO_
}

void FileStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.File.FileStatus)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .Im.Base.ClientFileStatus file_status = 2;
  if (has_file_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->file_status(), output);
  }

  // required string task_id = 3;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.File.FileStatus)
}

::google::protobuf::uint8* FileStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.File.FileStatus)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .Im.Base.ClientFileStatus file_status = 2;
  if (has_file_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->file_status(), target);
  }

  // required string task_id = 3;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.File.FileStatus)
  return target;
}

int FileStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .Im.Base.ClientFileStatus file_status = 2;
    if (has_file_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_status());
    }

    // required string task_id = 3;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileStatus::MergeFrom(const FileStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_file_status()) {
      set_file_status(from.file_status());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileStatus::CopyFrom(const FileStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FileStatus::Swap(FileStatus* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(file_status_, other->file_status_);
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileStatus_descriptor_;
  metadata.reflection = FileStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FilePullDataRequest::kUserIdFieldNumber;
const int FilePullDataRequest::kTaskIdFieldNumber;
const int FilePullDataRequest::kTransferModeFieldNumber;
const int FilePullDataRequest::kOffsetFieldNumber;
const int FilePullDataRequest::kDataSizeFieldNumber;
#endif  // !_MSC_VER

FilePullDataRequest::FilePullDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.File.FilePullDataRequest)
}

void FilePullDataRequest::InitAsDefaultInstance() {
}

FilePullDataRequest::FilePullDataRequest(const FilePullDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.File.FilePullDataRequest)
}

void FilePullDataRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transfer_mode_ = 1;
  offset_ = 0u;
  data_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilePullDataRequest::~FilePullDataRequest() {
  // @@protoc_insertion_point(destructor:Im.File.FilePullDataRequest)
  SharedDtor();
}

void FilePullDataRequest::SharedDtor() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (this != default_instance_) {
  }
}

void FilePullDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilePullDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilePullDataRequest_descriptor_;
}

const FilePullDataRequest& FilePullDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eFile_2eproto();
  return *default_instance_;
}

FilePullDataRequest* FilePullDataRequest::default_instance_ = NULL;

FilePullDataRequest* FilePullDataRequest::New() const {
  return new FilePullDataRequest;
}

void FilePullDataRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FilePullDataRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(offset_, data_size_);
    user_id_ = 0u;
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        task_id_->clear();
      }
    }
    transfer_mode_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FilePullDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.File.FilePullDataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_task_id;
        break;
      }

      // required string task_id = 2;
      case 2: {
        if (tag == 18) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->task_id().data(), this->task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "task_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_transfer_mode;
        break;
      }

      // required .Im.Base.FileType transfer_mode = 3;
      case 3: {
        if (tag == 24) {
         parse_transfer_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::FileType_IsValid(value)) {
            set_transfer_mode(static_cast< ::Im::Base::FileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }

      // required uint32 offset = 4;
      case 4: {
        if (tag == 32) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_data_size;
        break;
      }

      // required uint32 data_size = 5;
      case 5: {
        if (tag == 40) {
         parse_data_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_size_)));
          set_has_data_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.File.FilePullDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.File.FilePullDataRequest)
  return false;
#undef DO_
}

void FilePullDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.File.FilePullDataRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required string task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->task_id(), output);
  }

  // required .Im.Base.FileType transfer_mode = 3;
  if (has_transfer_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->transfer_mode(), output);
  }

  // required uint32 offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->offset(), output);
  }

  // required uint32 data_size = 5;
  if (has_data_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->data_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.File.FilePullDataRequest)
}

::google::protobuf::uint8* FilePullDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.File.FilePullDataRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required string task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->task_id(), target);
  }

  // required .Im.Base.FileType transfer_mode = 3;
  if (has_transfer_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->transfer_mode(), target);
  }

  // required uint32 offset = 4;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->offset(), target);
  }

  // required uint32 data_size = 5;
  if (has_data_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->data_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.File.FilePullDataRequest)
  return target;
}

int FilePullDataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_id());
    }

    // required .Im.Base.FileType transfer_mode = 3;
    if (has_transfer_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transfer_mode());
    }

    // required uint32 offset = 4;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // required uint32 data_size = 5;
    if (has_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilePullDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FilePullDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FilePullDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FilePullDataRequest::MergeFrom(const FilePullDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_transfer_mode()) {
      set_transfer_mode(from.transfer_mode());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_data_size()) {
      set_data_size(from.data_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FilePullDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilePullDataRequest::CopyFrom(const FilePullDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilePullDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void FilePullDataRequest::Swap(FilePullDataRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(transfer_mode_, other->transfer_mode_);
    std::swap(offset_, other->offset_);
    std::swap(data_size_, other->data_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FilePullDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilePullDataRequest_descriptor_;
  metadata.reflection = FilePullDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FilePullDataResponse::kUserIdFieldNumber;
const int FilePullDataResponse::kResultCodeFieldNumber;
const int FilePullDataResponse::kTaskIdFieldNumber;
const int FilePullDataResponse::kOffsetFieldNumber;
const int FilePullDataResponse::kDataFieldNumber;
#endif  // !_MSC_VER

FilePullDataResponse::FilePullDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.File.FilePullDataResponse)
}

void FilePullDataResponse::InitAsDefaultInstance() {
}

FilePullDataResponse::FilePullDataResponse(const FilePullDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.File.FilePullDataResponse)
}

void FilePullDataResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilePullDataResponse::~FilePullDataResponse() {
  // @@protoc_insertion_point(destructor:Im.File.FilePullDataResponse)
  SharedDtor();
}

void FilePullDataResponse::SharedDtor() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void FilePullDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilePullDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilePullDataResponse_descriptor_;
}

const FilePullDataResponse& FilePullDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eFile_2eproto();
  return *default_instance_;
}

FilePullDataResponse* FilePullDataResponse::default_instance_ = NULL;

FilePullDataResponse* FilePullDataResponse::New() const {
  return new FilePullDataResponse;
}

void FilePullDataResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FilePullDataResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(user_id_, result_code_);
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        task_id_->clear();
      }
    }
    offset_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FilePullDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.File.FilePullDataResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_task_id;
        break;
      }

      // required string task_id = 3;
      case 3: {
        if (tag == 26) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->task_id().data(), this->task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "task_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }

      // required uint32 offset = 4;
      case 4: {
        if (tag == 32) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // required bytes data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.File.FilePullDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.File.FilePullDataResponse)
  return false;
#undef DO_
}

void FilePullDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.File.FilePullDataResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // required string task_id = 3;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->task_id(), output);
  }

  // required uint32 offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->offset(), output);
  }

  // required bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.File.FilePullDataResponse)
}

::google::protobuf::uint8* FilePullDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.File.FilePullDataResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result_code(), target);
  }

  // required string task_id = 3;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->task_id(), target);
  }

  // required uint32 offset = 4;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->offset(), target);
  }

  // required bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.File.FilePullDataResponse)
  return target;
}

int FilePullDataResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // required string task_id = 3;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_id());
    }

    // required uint32 offset = 4;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // required bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilePullDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FilePullDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FilePullDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FilePullDataResponse::MergeFrom(const FilePullDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FilePullDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilePullDataResponse::CopyFrom(const FilePullDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilePullDataResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void FilePullDataResponse::Swap(FilePullDataResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(task_id_, other->task_id_);
    std::swap(offset_, other->offset_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FilePullDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilePullDataResponse_descriptor_;
  metadata.reflection = FilePullDataResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileRequest::kFromUserIdFieldNumber;
const int FileRequest::kToUserIdFieldNumber;
const int FileRequest::kFileNameFieldNumber;
const int FileRequest::kFileSizeFieldNumber;
const int FileRequest::kTransferModeFieldNumber;
#endif  // !_MSC_VER

FileRequest::FileRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.File.FileRequest)
}

void FileRequest::InitAsDefaultInstance() {
}

FileRequest::FileRequest(const FileRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.File.FileRequest)
}

void FileRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_user_id_ = 0u;
  to_user_id_ = 0u;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_size_ = 0u;
  transfer_mode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileRequest::~FileRequest() {
  // @@protoc_insertion_point(destructor:Im.File.FileRequest)
  SharedDtor();
}

void FileRequest::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void FileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileRequest_descriptor_;
}

const FileRequest& FileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eFile_2eproto();
  return *default_instance_;
}

FileRequest* FileRequest::default_instance_ = NULL;

FileRequest* FileRequest::New() const {
  return new FileRequest;
}

void FileRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FileRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(from_user_id_, to_user_id_);
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_name_->clear();
      }
    }
    file_size_ = 0u;
    transfer_mode_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.File.FileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 from_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_user_id;
        break;
      }

      // required uint32 to_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_to_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_user_id_)));
          set_has_to_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_file_name;
        break;
      }

      // required string file_name = 3;
      case 3: {
        if (tag == 26) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_file_size;
        break;
      }

      // required uint32 file_size = 4;
      case 4: {
        if (tag == 32) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_transfer_mode;
        break;
      }

      // required .Im.Base.FileType transfer_mode = 5;
      case 5: {
        if (tag == 40) {
         parse_transfer_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::FileType_IsValid(value)) {
            set_transfer_mode(static_cast< ::Im::Base::FileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.File.FileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.File.FileRequest)
  return false;
#undef DO_
}

void FileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.File.FileRequest)
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_user_id(), output);
  }

  // required uint32 to_user_id = 2;
  if (has_to_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to_user_id(), output);
  }

  // required string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_name(), output);
  }

  // required uint32 file_size = 4;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->file_size(), output);
  }

  // required .Im.Base.FileType transfer_mode = 5;
  if (has_transfer_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->transfer_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.File.FileRequest)
}

::google::protobuf::uint8* FileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.File.FileRequest)
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->from_user_id(), target);
  }

  // required uint32 to_user_id = 2;
  if (has_to_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->to_user_id(), target);
  }

  // required string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_name(), target);
  }

  // required uint32 file_size = 4;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->file_size(), target);
  }

  // required .Im.Base.FileType transfer_mode = 5;
  if (has_transfer_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->transfer_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.File.FileRequest)
  return target;
}

int FileRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 from_user_id = 1;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_user_id());
    }

    // required uint32 to_user_id = 2;
    if (has_to_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_user_id());
    }

    // required string file_name = 3;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // required uint32 file_size = 4;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // required .Im.Base.FileType transfer_mode = 5;
    if (has_transfer_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transfer_mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileRequest::MergeFrom(const FileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_to_user_id()) {
      set_to_user_id(from.to_user_id());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_transfer_mode()) {
      set_transfer_mode(from.transfer_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileRequest::CopyFrom(const FileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void FileRequest::Swap(FileRequest* other) {
  if (other != this) {
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(to_user_id_, other->to_user_id_);
    std::swap(file_name_, other->file_name_);
    std::swap(file_size_, other->file_size_);
    std::swap(transfer_mode_, other->transfer_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileRequest_descriptor_;
  metadata.reflection = FileRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileResponse::kResultCodeFieldNumber;
const int FileResponse::kFromUserIdFieldNumber;
const int FileResponse::kToUserIdFieldNumber;
const int FileResponse::kFileNameFieldNumber;
const int FileResponse::kTaskIdFieldNumber;
const int FileResponse::kIpAddrListFieldNumber;
const int FileResponse::kTransferModeFieldNumber;
#endif  // !_MSC_VER

FileResponse::FileResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.File.FileResponse)
}

void FileResponse::InitAsDefaultInstance() {
}

FileResponse::FileResponse(const FileResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.File.FileResponse)
}

void FileResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_code_ = 0u;
  from_user_id_ = 0u;
  to_user_id_ = 0u;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transfer_mode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileResponse::~FileResponse() {
  // @@protoc_insertion_point(destructor:Im.File.FileResponse)
  SharedDtor();
}

void FileResponse::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (this != default_instance_) {
  }
}

void FileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileResponse_descriptor_;
}

const FileResponse& FileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eFile_2eproto();
  return *default_instance_;
}

FileResponse* FileResponse::default_instance_ = NULL;

FileResponse* FileResponse::New() const {
  return new FileResponse;
}

void FileResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FileResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 95) {
    ZR_(result_code_, from_user_id_);
    to_user_id_ = 0u;
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_name_->clear();
      }
    }
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        task_id_->clear();
      }
    }
    transfer_mode_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ip_addr_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.File.FileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_from_user_id;
        break;
      }

      // required uint32 from_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_from_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_to_user_id;
        break;
      }

      // required uint32 to_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_to_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_user_id_)));
          set_has_to_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_file_name;
        break;
      }

      // required string file_name = 4;
      case 4: {
        if (tag == 34) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_task_id;
        break;
      }

      // required string task_id = 5;
      case 5: {
        if (tag == 42) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->task_id().data(), this->task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "task_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ip_addr_list;
        break;
      }

      // repeated .Im.Base.IpAddr ip_addr_list = 6;
      case 6: {
        if (tag == 50) {
         parse_ip_addr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ip_addr_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ip_addr_list;
        if (input->ExpectTag(56)) goto parse_transfer_mode;
        break;
      }

      // required .Im.Base.FileType transfer_mode = 7;
      case 7: {
        if (tag == 56) {
         parse_transfer_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::FileType_IsValid(value)) {
            set_transfer_mode(static_cast< ::Im::Base::FileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.File.FileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.File.FileResponse)
  return false;
#undef DO_
}

void FileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.File.FileResponse)
  // required uint32 result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_code(), output);
  }

  // required uint32 from_user_id = 2;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->from_user_id(), output);
  }

  // required uint32 to_user_id = 3;
  if (has_to_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->to_user_id(), output);
  }

  // required string file_name = 4;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->file_name(), output);
  }

  // required string task_id = 5;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->task_id(), output);
  }

  // repeated .Im.Base.IpAddr ip_addr_list = 6;
  for (int i = 0; i < this->ip_addr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ip_addr_list(i), output);
  }

  // required .Im.Base.FileType transfer_mode = 7;
  if (has_transfer_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->transfer_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.File.FileResponse)
}

::google::protobuf::uint8* FileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.File.FileResponse)
  // required uint32 result_code = 1;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_code(), target);
  }

  // required uint32 from_user_id = 2;
  if (has_from_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->from_user_id(), target);
  }

  // required uint32 to_user_id = 3;
  if (has_to_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->to_user_id(), target);
  }

  // required string file_name = 4;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file_name(), target);
  }

  // required string task_id = 5;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->task_id(), target);
  }

  // repeated .Im.Base.IpAddr ip_addr_list = 6;
  for (int i = 0; i < this->ip_addr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ip_addr_list(i), target);
  }

  // required .Im.Base.FileType transfer_mode = 7;
  if (has_transfer_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->transfer_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.File.FileResponse)
  return target;
}

int FileResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_code = 1;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // required uint32 from_user_id = 2;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_user_id());
    }

    // required uint32 to_user_id = 3;
    if (has_to_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_user_id());
    }

    // required string file_name = 4;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // required string task_id = 5;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_id());
    }

    // required .Im.Base.FileType transfer_mode = 7;
    if (has_transfer_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transfer_mode());
    }

  }
  // repeated .Im.Base.IpAddr ip_addr_list = 6;
  total_size += 1 * this->ip_addr_list_size();
  for (int i = 0; i < this->ip_addr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ip_addr_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileResponse::MergeFrom(const FileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ip_addr_list_.MergeFrom(from.ip_addr_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_to_user_id()) {
      set_to_user_id(from.to_user_id());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_transfer_mode()) {
      set_transfer_mode(from.transfer_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileResponse::CopyFrom(const FileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->ip_addr_list())) return false;
  return true;
}

void FileResponse::Swap(FileResponse* other) {
  if (other != this) {
    std::swap(result_code_, other->result_code_);
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(to_user_id_, other->to_user_id_);
    std::swap(file_name_, other->file_name_);
    std::swap(task_id_, other->task_id_);
    ip_addr_list_.Swap(&other->ip_addr_list_);
    std::swap(transfer_mode_, other->transfer_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileResponse_descriptor_;
  metadata.reflection = FileResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileNotify::kFromUserIdFieldNumber;
const int FileNotify::kToUserIdFieldNumber;
const int FileNotify::kFileNameFieldNumber;
const int FileNotify::kFileSizeFieldNumber;
const int FileNotify::kTaskIdFieldNumber;
const int FileNotify::kIpAddrListFieldNumber;
const int FileNotify::kTransferModeFieldNumber;
const int FileNotify::kOfflineReadyFieldNumber;
#endif  // !_MSC_VER

FileNotify::FileNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.File.FileNotify)
}

void FileNotify::InitAsDefaultInstance() {
}

FileNotify::FileNotify(const FileNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.File.FileNotify)
}

void FileNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_user_id_ = 0u;
  to_user_id_ = 0u;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_size_ = 0u;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transfer_mode_ = 1;
  offline_ready_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileNotify::~FileNotify() {
  // @@protoc_insertion_point(destructor:Im.File.FileNotify)
  SharedDtor();
}

void FileNotify::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (this != default_instance_) {
  }
}

void FileNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileNotify_descriptor_;
}

const FileNotify& FileNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eFile_2eproto();
  return *default_instance_;
}

FileNotify* FileNotify::default_instance_ = NULL;

FileNotify* FileNotify::New() const {
  return new FileNotify;
}

void FileNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FileNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(from_user_id_, to_user_id_);
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_name_->clear();
      }
    }
    file_size_ = 0u;
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        task_id_->clear();
      }
    }
    transfer_mode_ = 1;
    offline_ready_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ip_addr_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.File.FileNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 from_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_user_id;
        break;
      }

      // required uint32 to_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_to_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_user_id_)));
          set_has_to_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_file_name;
        break;
      }

      // required string file_name = 3;
      case 3: {
        if (tag == 26) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_file_size;
        break;
      }

      // required uint32 file_size = 4;
      case 4: {
        if (tag == 32) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_task_id;
        break;
      }

      // required string task_id = 5;
      case 5: {
        if (tag == 42) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->task_id().data(), this->task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "task_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ip_addr_list;
        break;
      }

      // repeated .Im.Base.IpAddr ip_addr_list = 6;
      case 6: {
        if (tag == 50) {
         parse_ip_addr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ip_addr_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ip_addr_list;
        if (input->ExpectTag(56)) goto parse_transfer_mode;
        break;
      }

      // required .Im.Base.FileType transfer_mode = 7;
      case 7: {
        if (tag == 56) {
         parse_transfer_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::FileType_IsValid(value)) {
            set_transfer_mode(static_cast< ::Im::Base::FileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_offline_ready;
        break;
      }

      // required uint32 offline_ready = 8;
      case 8: {
        if (tag == 64) {
         parse_offline_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offline_ready_)));
          set_has_offline_ready();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.File.FileNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.File.FileNotify)
  return false;
#undef DO_
}

void FileNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.File.FileNotify)
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_user_id(), output);
  }

  // required uint32 to_user_id = 2;
  if (has_to_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to_user_id(), output);
  }

  // required string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_name(), output);
  }

  // required uint32 file_size = 4;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->file_size(), output);
  }

  // required string task_id = 5;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->task_id(), output);
  }

  // repeated .Im.Base.IpAddr ip_addr_list = 6;
  for (int i = 0; i < this->ip_addr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ip_addr_list(i), output);
  }

  // required .Im.Base.FileType transfer_mode = 7;
  if (has_transfer_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->transfer_mode(), output);
  }

  // required uint32 offline_ready = 8;
  if (has_offline_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->offline_ready(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.File.FileNotify)
}

::google::protobuf::uint8* FileNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.File.FileNotify)
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->from_user_id(), target);
  }

  // required uint32 to_user_id = 2;
  if (has_to_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->to_user_id(), target);
  }

  // required string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_name(), target);
  }

  // required uint32 file_size = 4;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->file_size(), target);
  }

  // required string task_id = 5;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->task_id(), target);
  }

  // repeated .Im.Base.IpAddr ip_addr_list = 6;
  for (int i = 0; i < this->ip_addr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ip_addr_list(i), target);
  }

  // required .Im.Base.FileType transfer_mode = 7;
  if (has_transfer_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->transfer_mode(), target);
  }

  // required uint32 offline_ready = 8;
  if (has_offline_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->offline_ready(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.File.FileNotify)
  return target;
}

int FileNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 from_user_id = 1;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_user_id());
    }

    // required uint32 to_user_id = 2;
    if (has_to_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_user_id());
    }

    // required string file_name = 3;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // required uint32 file_size = 4;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // required string task_id = 5;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_id());
    }

    // required .Im.Base.FileType transfer_mode = 7;
    if (has_transfer_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transfer_mode());
    }

    // required uint32 offline_ready = 8;
    if (has_offline_ready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offline_ready());
    }

  }
  // repeated .Im.Base.IpAddr ip_addr_list = 6;
  total_size += 1 * this->ip_addr_list_size();
  for (int i = 0; i < this->ip_addr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ip_addr_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileNotify::MergeFrom(const FileNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  ip_addr_list_.MergeFrom(from.ip_addr_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_to_user_id()) {
      set_to_user_id(from.to_user_id());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_transfer_mode()) {
      set_transfer_mode(from.transfer_mode());
    }
    if (from.has_offline_ready()) {
      set_offline_ready(from.offline_ready());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileNotify::CopyFrom(const FileNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000df) != 0x000000df) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->ip_addr_list())) return false;
  return true;
}

void FileNotify::Swap(FileNotify* other) {
  if (other != this) {
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(to_user_id_, other->to_user_id_);
    std::swap(file_name_, other->file_name_);
    std::swap(file_size_, other->file_size_);
    std::swap(task_id_, other->task_id_);
    ip_addr_list_.Swap(&other->ip_addr_list_);
    std::swap(transfer_mode_, other->transfer_mode_);
    std::swap(offline_ready_, other->offline_ready_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileNotify_descriptor_;
  metadata.reflection = FileNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileHasOfflineRequest::kUserIdFieldNumber;
const int FileHasOfflineRequest::kAttachDataFieldNumber;
#endif  // !_MSC_VER

FileHasOfflineRequest::FileHasOfflineRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.File.FileHasOfflineRequest)
}

void FileHasOfflineRequest::InitAsDefaultInstance() {
}

FileHasOfflineRequest::FileHasOfflineRequest(const FileHasOfflineRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.File.FileHasOfflineRequest)
}

void FileHasOfflineRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileHasOfflineRequest::~FileHasOfflineRequest() {
  // @@protoc_insertion_point(destructor:Im.File.FileHasOfflineRequest)
  SharedDtor();
}

void FileHasOfflineRequest::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void FileHasOfflineRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileHasOfflineRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileHasOfflineRequest_descriptor_;
}

const FileHasOfflineRequest& FileHasOfflineRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eFile_2eproto();
  return *default_instance_;
}

FileHasOfflineRequest* FileHasOfflineRequest::default_instance_ = NULL;

FileHasOfflineRequest* FileHasOfflineRequest::New() const {
  return new FileHasOfflineRequest;
}

void FileHasOfflineRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileHasOfflineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.File.FileHasOfflineRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 2;
      case 2: {
        if (tag == 18) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.File.FileHasOfflineRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.File.FileHasOfflineRequest)
  return false;
#undef DO_
}

void FileHasOfflineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.File.FileHasOfflineRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // optional bytes attach_data = 2;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.File.FileHasOfflineRequest)
}

::google::protobuf::uint8* FileHasOfflineRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.File.FileHasOfflineRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // optional bytes attach_data = 2;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.File.FileHasOfflineRequest)
  return target;
}

int FileHasOfflineRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 2;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileHasOfflineRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileHasOfflineRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileHasOfflineRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileHasOfflineRequest::MergeFrom(const FileHasOfflineRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileHasOfflineRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileHasOfflineRequest::CopyFrom(const FileHasOfflineRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileHasOfflineRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FileHasOfflineRequest::Swap(FileHasOfflineRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileHasOfflineRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileHasOfflineRequest_descriptor_;
  metadata.reflection = FileHasOfflineRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileHasOfflineResponse::kUserIdFieldNumber;
const int FileHasOfflineResponse::kOfflineFileListFieldNumber;
const int FileHasOfflineResponse::kIpAddrListFieldNumber;
const int FileHasOfflineResponse::kAttachDataFieldNumber;
#endif  // !_MSC_VER

FileHasOfflineResponse::FileHasOfflineResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.File.FileHasOfflineResponse)
}

void FileHasOfflineResponse::InitAsDefaultInstance() {
}

FileHasOfflineResponse::FileHasOfflineResponse(const FileHasOfflineResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.File.FileHasOfflineResponse)
}

void FileHasOfflineResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileHasOfflineResponse::~FileHasOfflineResponse() {
  // @@protoc_insertion_point(destructor:Im.File.FileHasOfflineResponse)
  SharedDtor();
}

void FileHasOfflineResponse::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void FileHasOfflineResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileHasOfflineResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileHasOfflineResponse_descriptor_;
}

const FileHasOfflineResponse& FileHasOfflineResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eFile_2eproto();
  return *default_instance_;
}

FileHasOfflineResponse* FileHasOfflineResponse::default_instance_ = NULL;

FileHasOfflineResponse* FileHasOfflineResponse::New() const {
  return new FileHasOfflineResponse;
}

void FileHasOfflineResponse::Clear() {
  if (_has_bits_[0 / 32] & 9) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  offline_file_list_.Clear();
  ip_addr_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileHasOfflineResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.File.FileHasOfflineResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_offline_file_list;
        break;
      }

      // repeated .Im.Base.OfflineFileInfo offline_file_list = 2;
      case 2: {
        if (tag == 18) {
         parse_offline_file_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_offline_file_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_offline_file_list;
        if (input->ExpectTag(26)) goto parse_ip_addr_list;
        break;
      }

      // repeated .Im.Base.IpAddr ip_addr_list = 3;
      case 3: {
        if (tag == 26) {
         parse_ip_addr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ip_addr_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip_addr_list;
        if (input->ExpectTag(34)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 4;
      case 4: {
        if (tag == 34) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.File.FileHasOfflineResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.File.FileHasOfflineResponse)
  return false;
#undef DO_
}

void FileHasOfflineResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.File.FileHasOfflineResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .Im.Base.OfflineFileInfo offline_file_list = 2;
  for (int i = 0; i < this->offline_file_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->offline_file_list(i), output);
  }

  // repeated .Im.Base.IpAddr ip_addr_list = 3;
  for (int i = 0; i < this->ip_addr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ip_addr_list(i), output);
  }

  // optional bytes attach_data = 4;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.File.FileHasOfflineResponse)
}

::google::protobuf::uint8* FileHasOfflineResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.File.FileHasOfflineResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // repeated .Im.Base.OfflineFileInfo offline_file_list = 2;
  for (int i = 0; i < this->offline_file_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->offline_file_list(i), target);
  }

  // repeated .Im.Base.IpAddr ip_addr_list = 3;
  for (int i = 0; i < this->ip_addr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ip_addr_list(i), target);
  }

  // optional bytes attach_data = 4;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.File.FileHasOfflineResponse)
  return target;
}

int FileHasOfflineResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 4;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .Im.Base.OfflineFileInfo offline_file_list = 2;
  total_size += 1 * this->offline_file_list_size();
  for (int i = 0; i < this->offline_file_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offline_file_list(i));
  }

  // repeated .Im.Base.IpAddr ip_addr_list = 3;
  total_size += 1 * this->ip_addr_list_size();
  for (int i = 0; i < this->ip_addr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ip_addr_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileHasOfflineResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileHasOfflineResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileHasOfflineResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileHasOfflineResponse::MergeFrom(const FileHasOfflineResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  offline_file_list_.MergeFrom(from.offline_file_list_);
  ip_addr_list_.MergeFrom(from.ip_addr_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileHasOfflineResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileHasOfflineResponse::CopyFrom(const FileHasOfflineResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileHasOfflineResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->offline_file_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ip_addr_list())) return false;
  return true;
}

void FileHasOfflineResponse::Swap(FileHasOfflineResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    offline_file_list_.Swap(&other->offline_file_list_);
    ip_addr_list_.Swap(&other->ip_addr_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileHasOfflineResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileHasOfflineResponse_descriptor_;
  metadata.reflection = FileHasOfflineResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileAddOfflineRequest::kFromUserIdFieldNumber;
const int FileAddOfflineRequest::kToUserIdFieldNumber;
const int FileAddOfflineRequest::kTaskIdFieldNumber;
const int FileAddOfflineRequest::kFileNameFieldNumber;
const int FileAddOfflineRequest::kFileSizeFieldNumber;
#endif  // !_MSC_VER

FileAddOfflineRequest::FileAddOfflineRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.File.FileAddOfflineRequest)
}

void FileAddOfflineRequest::InitAsDefaultInstance() {
}

FileAddOfflineRequest::FileAddOfflineRequest(const FileAddOfflineRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.File.FileAddOfflineRequest)
}

void FileAddOfflineRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_user_id_ = 0u;
  to_user_id_ = 0u;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileAddOfflineRequest::~FileAddOfflineRequest() {
  // @@protoc_insertion_point(destructor:Im.File.FileAddOfflineRequest)
  SharedDtor();
}

void FileAddOfflineRequest::SharedDtor() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void FileAddOfflineRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileAddOfflineRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileAddOfflineRequest_descriptor_;
}

const FileAddOfflineRequest& FileAddOfflineRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eFile_2eproto();
  return *default_instance_;
}

FileAddOfflineRequest* FileAddOfflineRequest::default_instance_ = NULL;

FileAddOfflineRequest* FileAddOfflineRequest::New() const {
  return new FileAddOfflineRequest;
}

void FileAddOfflineRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FileAddOfflineRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(from_user_id_, to_user_id_);
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        task_id_->clear();
      }
    }
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_name_->clear();
      }
    }
    file_size_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileAddOfflineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.File.FileAddOfflineRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 from_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_user_id;
        break;
      }

      // required uint32 to_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_to_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_user_id_)));
          set_has_to_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_task_id;
        break;
      }

      // required string task_id = 3;
      case 3: {
        if (tag == 26) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->task_id().data(), this->task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "task_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_file_name;
        break;
      }

      // required string file_name = 4;
      case 4: {
        if (tag == 34) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_file_size;
        break;
      }

      // required uint32 file_size = 5;
      case 5: {
        if (tag == 40) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.File.FileAddOfflineRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.File.FileAddOfflineRequest)
  return false;
#undef DO_
}

void FileAddOfflineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.File.FileAddOfflineRequest)
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_user_id(), output);
  }

  // required uint32 to_user_id = 2;
  if (has_to_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to_user_id(), output);
  }

  // required string task_id = 3;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->task_id(), output);
  }

  // required string file_name = 4;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->file_name(), output);
  }

  // required uint32 file_size = 5;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->file_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.File.FileAddOfflineRequest)
}

::google::protobuf::uint8* FileAddOfflineRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.File.FileAddOfflineRequest)
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->from_user_id(), target);
  }

  // required uint32 to_user_id = 2;
  if (has_to_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->to_user_id(), target);
  }

  // required string task_id = 3;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->task_id(), target);
  }

  // required string file_name = 4;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file_name(), target);
  }

  // required uint32 file_size = 5;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->file_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.File.FileAddOfflineRequest)
  return target;
}

int FileAddOfflineRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 from_user_id = 1;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_user_id());
    }

    // required uint32 to_user_id = 2;
    if (has_to_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_user_id());
    }

    // required string task_id = 3;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_id());
    }

    // required string file_name = 4;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // required uint32 file_size = 5;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileAddOfflineRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileAddOfflineRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileAddOfflineRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileAddOfflineRequest::MergeFrom(const FileAddOfflineRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_to_user_id()) {
      set_to_user_id(from.to_user_id());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileAddOfflineRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileAddOfflineRequest::CopyFrom(const FileAddOfflineRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileAddOfflineRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void FileAddOfflineRequest::Swap(FileAddOfflineRequest* other) {
  if (other != this) {
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(to_user_id_, other->to_user_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(file_name_, other->file_name_);
    std::swap(file_size_, other->file_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileAddOfflineRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileAddOfflineRequest_descriptor_;
  metadata.reflection = FileAddOfflineRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileDelOfflineRequest::kFromUserIdFieldNumber;
const int FileDelOfflineRequest::kToUserIdFieldNumber;
const int FileDelOfflineRequest::kTaskIdFieldNumber;
#endif  // !_MSC_VER

FileDelOfflineRequest::FileDelOfflineRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.File.FileDelOfflineRequest)
}

void FileDelOfflineRequest::InitAsDefaultInstance() {
}

FileDelOfflineRequest::FileDelOfflineRequest(const FileDelOfflineRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.File.FileDelOfflineRequest)
}

void FileDelOfflineRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_user_id_ = 0u;
  to_user_id_ = 0u;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileDelOfflineRequest::~FileDelOfflineRequest() {
  // @@protoc_insertion_point(destructor:Im.File.FileDelOfflineRequest)
  SharedDtor();
}

void FileDelOfflineRequest::SharedDtor() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (this != default_instance_) {
  }
}

void FileDelOfflineRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileDelOfflineRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileDelOfflineRequest_descriptor_;
}

const FileDelOfflineRequest& FileDelOfflineRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eFile_2eproto();
  return *default_instance_;
}

FileDelOfflineRequest* FileDelOfflineRequest::default_instance_ = NULL;

FileDelOfflineRequest* FileDelOfflineRequest::New() const {
  return new FileDelOfflineRequest;
}

void FileDelOfflineRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FileDelOfflineRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(from_user_id_, to_user_id_);
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        task_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileDelOfflineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.File.FileDelOfflineRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 from_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_user_id;
        break;
      }

      // required uint32 to_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_to_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_user_id_)));
          set_has_to_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_task_id;
        break;
      }

      // required string task_id = 3;
      case 3: {
        if (tag == 26) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->task_id().data(), this->task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "task_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.File.FileDelOfflineRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.File.FileDelOfflineRequest)
  return false;
#undef DO_
}

void FileDelOfflineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.File.FileDelOfflineRequest)
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_user_id(), output);
  }

  // required uint32 to_user_id = 2;
  if (has_to_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to_user_id(), output);
  }

  // required string task_id = 3;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.File.FileDelOfflineRequest)
}

::google::protobuf::uint8* FileDelOfflineRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.File.FileDelOfflineRequest)
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->from_user_id(), target);
  }

  // required uint32 to_user_id = 2;
  if (has_to_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->to_user_id(), target);
  }

  // required string task_id = 3;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.File.FileDelOfflineRequest)
  return target;
}

int FileDelOfflineRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 from_user_id = 1;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_user_id());
    }

    // required uint32 to_user_id = 2;
    if (has_to_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_user_id());
    }

    // required string task_id = 3;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileDelOfflineRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileDelOfflineRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileDelOfflineRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileDelOfflineRequest::MergeFrom(const FileDelOfflineRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_to_user_id()) {
      set_to_user_id(from.to_user_id());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileDelOfflineRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileDelOfflineRequest::CopyFrom(const FileDelOfflineRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileDelOfflineRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FileDelOfflineRequest::Swap(FileDelOfflineRequest* other) {
  if (other != this) {
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(to_user_id_, other->to_user_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileDelOfflineRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileDelOfflineRequest_descriptor_;
  metadata.reflection = FileDelOfflineRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace File
}  // namespace Im

// @@protoc_insertion_point(global_scope)
