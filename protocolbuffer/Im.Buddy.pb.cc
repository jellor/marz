// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Im.Buddy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Im.Buddy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Im {
namespace Buddy {

namespace {

const ::google::protobuf::Descriptor* RecentContactSessionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecentContactSessionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecentContactSessionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecentContactSessionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserStatusNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserStatusNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveSessionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveSessionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveSessionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveSessionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllUserRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllUserRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllUserResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllUserResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UsersStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UsersStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UsersStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UsersStatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* changeAvatarRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  changeAvatarRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* changeAvatarResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  changeAvatarResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PcLoginStatusNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PcLoginStatusNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveSessionNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveSessionNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Im_2eBuddy_2eproto() {
  protobuf_AddDesc_Im_2eBuddy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Im.Buddy.proto");
  GOOGLE_CHECK(file != NULL);
  RecentContactSessionRequest_descriptor_ = file->message_type(0);
  static const int RecentContactSessionRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentContactSessionRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentContactSessionRequest, latest_update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentContactSessionRequest, attach_data_),
  };
  RecentContactSessionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecentContactSessionRequest_descriptor_,
      RecentContactSessionRequest::default_instance_,
      RecentContactSessionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentContactSessionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentContactSessionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecentContactSessionRequest));
  RecentContactSessionResponse_descriptor_ = file->message_type(1);
  static const int RecentContactSessionResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentContactSessionResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentContactSessionResponse, contact_session_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentContactSessionResponse, attach_data_),
  };
  RecentContactSessionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecentContactSessionResponse_descriptor_,
      RecentContactSessionResponse::default_instance_,
      RecentContactSessionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentContactSessionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentContactSessionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecentContactSessionResponse));
  UserStatusNotify_descriptor_ = file->message_type(2);
  static const int UserStatusNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatusNotify, user_status_),
  };
  UserStatusNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserStatusNotify_descriptor_,
      UserStatusNotify::default_instance_,
      UserStatusNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatusNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatusNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserStatusNotify));
  UserInfoRequest_descriptor_ = file->message_type(3);
  static const int UserInfoRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoRequest, user_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoRequest, attach_data_),
  };
  UserInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfoRequest_descriptor_,
      UserInfoRequest::default_instance_,
      UserInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfoRequest));
  UserInfoResponse_descriptor_ = file->message_type(4);
  static const int UserInfoResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResponse, user_info_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResponse, attach_data_),
  };
  UserInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfoResponse_descriptor_,
      UserInfoResponse::default_instance_,
      UserInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfoResponse));
  RemoveSessionRequest_descriptor_ = file->message_type(5);
  static const int RemoveSessionRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionRequest, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionRequest, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionRequest, attach_data_),
  };
  RemoveSessionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveSessionRequest_descriptor_,
      RemoveSessionRequest::default_instance_,
      RemoveSessionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveSessionRequest));
  RemoveSessionResponse_descriptor_ = file->message_type(6);
  static const int RemoveSessionResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionResponse, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionResponse, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionResponse, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionResponse, attach_data_),
  };
  RemoveSessionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveSessionResponse_descriptor_,
      RemoveSessionResponse::default_instance_,
      RemoveSessionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveSessionResponse));
  AllUserRequest_descriptor_ = file->message_type(7);
  static const int AllUserRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllUserRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllUserRequest, latest_update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllUserRequest, attach_data_),
  };
  AllUserRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllUserRequest_descriptor_,
      AllUserRequest::default_instance_,
      AllUserRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllUserRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllUserRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllUserRequest));
  AllUserResponse_descriptor_ = file->message_type(8);
  static const int AllUserResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllUserResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllUserResponse, latest_update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllUserResponse, user_info_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllUserResponse, attach_data_),
  };
  AllUserResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllUserResponse_descriptor_,
      AllUserResponse::default_instance_,
      AllUserResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllUserResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllUserResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllUserResponse));
  UsersStatusRequest_descriptor_ = file->message_type(9);
  static const int UsersStatusRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsersStatusRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsersStatusRequest, user_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsersStatusRequest, attach_data_),
  };
  UsersStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UsersStatusRequest_descriptor_,
      UsersStatusRequest::default_instance_,
      UsersStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsersStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsersStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UsersStatusRequest));
  UsersStatusResponse_descriptor_ = file->message_type(10);
  static const int UsersStatusResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsersStatusResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsersStatusResponse, user_status_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsersStatusResponse, attach_data_),
  };
  UsersStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UsersStatusResponse_descriptor_,
      UsersStatusResponse::default_instance_,
      UsersStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsersStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsersStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UsersStatusResponse));
  changeAvatarRequest_descriptor_ = file->message_type(11);
  static const int changeAvatarRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(changeAvatarRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(changeAvatarRequest, avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(changeAvatarRequest, attach_data_),
  };
  changeAvatarRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      changeAvatarRequest_descriptor_,
      changeAvatarRequest::default_instance_,
      changeAvatarRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(changeAvatarRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(changeAvatarRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(changeAvatarRequest));
  changeAvatarResponse_descriptor_ = file->message_type(12);
  static const int changeAvatarResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(changeAvatarResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(changeAvatarResponse, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(changeAvatarResponse, attach_data_),
  };
  changeAvatarResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      changeAvatarResponse_descriptor_,
      changeAvatarResponse::default_instance_,
      changeAvatarResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(changeAvatarResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(changeAvatarResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(changeAvatarResponse));
  PcLoginStatusNotify_descriptor_ = file->message_type(13);
  static const int PcLoginStatusNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PcLoginStatusNotify, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PcLoginStatusNotify, login_status_),
  };
  PcLoginStatusNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PcLoginStatusNotify_descriptor_,
      PcLoginStatusNotify::default_instance_,
      PcLoginStatusNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PcLoginStatusNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PcLoginStatusNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PcLoginStatusNotify));
  RemoveSessionNotify_descriptor_ = file->message_type(14);
  static const int RemoveSessionNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionNotify, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionNotify, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionNotify, session_id_),
  };
  RemoveSessionNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveSessionNotify_descriptor_,
      RemoveSessionNotify::default_instance_,
      RemoveSessionNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveSessionNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Im_2eBuddy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecentContactSessionRequest_descriptor_, &RecentContactSessionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecentContactSessionResponse_descriptor_, &RecentContactSessionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserStatusNotify_descriptor_, &UserStatusNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfoRequest_descriptor_, &UserInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfoResponse_descriptor_, &UserInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveSessionRequest_descriptor_, &RemoveSessionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveSessionResponse_descriptor_, &RemoveSessionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllUserRequest_descriptor_, &AllUserRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllUserResponse_descriptor_, &AllUserResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UsersStatusRequest_descriptor_, &UsersStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UsersStatusResponse_descriptor_, &UsersStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    changeAvatarRequest_descriptor_, &changeAvatarRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    changeAvatarResponse_descriptor_, &changeAvatarResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PcLoginStatusNotify_descriptor_, &PcLoginStatusNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveSessionNotify_descriptor_, &RemoveSessionNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Im_2eBuddy_2eproto() {
  delete RecentContactSessionRequest::default_instance_;
  delete RecentContactSessionRequest_reflection_;
  delete RecentContactSessionResponse::default_instance_;
  delete RecentContactSessionResponse_reflection_;
  delete UserStatusNotify::default_instance_;
  delete UserStatusNotify_reflection_;
  delete UserInfoRequest::default_instance_;
  delete UserInfoRequest_reflection_;
  delete UserInfoResponse::default_instance_;
  delete UserInfoResponse_reflection_;
  delete RemoveSessionRequest::default_instance_;
  delete RemoveSessionRequest_reflection_;
  delete RemoveSessionResponse::default_instance_;
  delete RemoveSessionResponse_reflection_;
  delete AllUserRequest::default_instance_;
  delete AllUserRequest_reflection_;
  delete AllUserResponse::default_instance_;
  delete AllUserResponse_reflection_;
  delete UsersStatusRequest::default_instance_;
  delete UsersStatusRequest_reflection_;
  delete UsersStatusResponse::default_instance_;
  delete UsersStatusResponse_reflection_;
  delete changeAvatarRequest::default_instance_;
  delete changeAvatarRequest_reflection_;
  delete changeAvatarResponse::default_instance_;
  delete changeAvatarResponse_reflection_;
  delete PcLoginStatusNotify::default_instance_;
  delete PcLoginStatusNotify_reflection_;
  delete RemoveSessionNotify::default_instance_;
  delete RemoveSessionNotify_reflection_;
}

void protobuf_AddDesc_Im_2eBuddy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Im::Base::protobuf_AddDesc_Im_2eBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Im.Buddy.proto\022\010Im.Buddy\032\rIm.Base.prot"
    "o\"_\n\033RecentContactSessionRequest\022\017\n\007user"
    "_id\030\001 \002(\r\022\032\n\022latest_update_time\030\002 \002(\r\022\023\n"
    "\013attach_data\030\003 \001(\014\"\177\n\034RecentContactSessi"
    "onResponse\022\017\n\007user_id\030\001 \002(\r\0229\n\024contact_s"
    "ession_list\030\002 \003(\0132\033.Im.Base.ContactSessi"
    "onInfo\022\023\n\013attach_data\030\003 \001(\014\"<\n\020UserStatu"
    "sNotify\022(\n\013user_status\030\001 \002(\0132\023.Im.Base.U"
    "serStatus\"M\n\017UserInfoRequest\022\017\n\007user_id\030"
    "\001 \002(\r\022\024\n\014user_id_list\030\002 \003(\r\022\023\n\013attach_da"
    "ta\030\003 \001(\014\"c\n\020UserInfoResponse\022\017\n\007user_id\030"
    "\001 \002(\r\022)\n\016user_info_list\030\002 \003(\0132\021.Im.Base."
    "UserInfo\022\023\n\013attach_data\030\003 \001(\014\"|\n\024RemoveS"
    "essionRequest\022\017\n\007user_id\030\001 \002(\r\022*\n\014sessio"
    "n_type\030\002 \002(\0162\024.Im.Base.SessionType\022\022\n\nse"
    "ssion_id\030\003 \002(\r\022\023\n\013attach_data\030\004 \001(\014\"\222\001\n\025"
    "RemoveSessionResponse\022\017\n\007user_id\030\001 \002(\r\022\023"
    "\n\013result_code\030\002 \002(\r\022*\n\014session_type\030\003 \002("
    "\0162\024.Im.Base.SessionType\022\022\n\nsession_id\030\004 "
    "\002(\r\022\023\n\013attach_data\030\005 \001(\014\"R\n\016AllUserReque"
    "st\022\017\n\007user_id\030\001 \002(\r\022\032\n\022latest_update_tim"
    "e\030\002 \002(\r\022\023\n\013attach_data\030\003 \001(\014\"~\n\017AllUserR"
    "esponse\022\017\n\007user_id\030\001 \002(\r\022\032\n\022latest_updat"
    "e_time\030\002 \002(\r\022)\n\016user_info_list\030\003 \003(\0132\021.I"
    "m.Base.UserInfo\022\023\n\013attach_data\030\004 \001(\014\"P\n\022"
    "UsersStatusRequest\022\017\n\007user_id\030\001 \002(\r\022\024\n\014u"
    "ser_id_list\030\002 \003(\r\022\023\n\013attach_data\030\003 \001(\014\"j"
    "\n\023UsersStatusResponse\022\017\n\007user_id\030\001 \002(\r\022-"
    "\n\020user_status_list\030\002 \003(\0132\023.Im.Base.UserS"
    "tatus\022\023\n\013attach_data\030\003 \001(\014\"O\n\023changeAvat"
    "arRequest\022\017\n\007user_id\030\001 \002(\r\022\022\n\navatar_url"
    "\030\002 \002(\t\022\023\n\013attach_data\030\003 \001(\014\"Q\n\024changeAva"
    "tarResponse\022\017\n\007user_id\030\001 \002(\r\022\023\n\013result_c"
    "ode\030\002 \002(\r\022\023\n\013attach_data\030\003 \001(\014\"U\n\023PcLogi"
    "nStatusNotify\022\017\n\007user_id\030\001 \002(\r\022-\n\014login_"
    "status\030\002 \002(\0162\027.Im.Base.UserStatusType\"f\n"
    "\023RemoveSessionNotify\022\017\n\007user_id\030\001 \002(\r\022*\n"
    "\014session_type\030\002 \002(\0162\024.Im.Base.SessionTyp"
    "e\022\022\n\nsession_id\030\003 \002(\rB)\n\'com.example.use"
    "r.myapplication.protobuf", 1584);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Im.Buddy.proto", &protobuf_RegisterTypes);
  RecentContactSessionRequest::default_instance_ = new RecentContactSessionRequest();
  RecentContactSessionResponse::default_instance_ = new RecentContactSessionResponse();
  UserStatusNotify::default_instance_ = new UserStatusNotify();
  UserInfoRequest::default_instance_ = new UserInfoRequest();
  UserInfoResponse::default_instance_ = new UserInfoResponse();
  RemoveSessionRequest::default_instance_ = new RemoveSessionRequest();
  RemoveSessionResponse::default_instance_ = new RemoveSessionResponse();
  AllUserRequest::default_instance_ = new AllUserRequest();
  AllUserResponse::default_instance_ = new AllUserResponse();
  UsersStatusRequest::default_instance_ = new UsersStatusRequest();
  UsersStatusResponse::default_instance_ = new UsersStatusResponse();
  changeAvatarRequest::default_instance_ = new changeAvatarRequest();
  changeAvatarResponse::default_instance_ = new changeAvatarResponse();
  PcLoginStatusNotify::default_instance_ = new PcLoginStatusNotify();
  RemoveSessionNotify::default_instance_ = new RemoveSessionNotify();
  RecentContactSessionRequest::default_instance_->InitAsDefaultInstance();
  RecentContactSessionResponse::default_instance_->InitAsDefaultInstance();
  UserStatusNotify::default_instance_->InitAsDefaultInstance();
  UserInfoRequest::default_instance_->InitAsDefaultInstance();
  UserInfoResponse::default_instance_->InitAsDefaultInstance();
  RemoveSessionRequest::default_instance_->InitAsDefaultInstance();
  RemoveSessionResponse::default_instance_->InitAsDefaultInstance();
  AllUserRequest::default_instance_->InitAsDefaultInstance();
  AllUserResponse::default_instance_->InitAsDefaultInstance();
  UsersStatusRequest::default_instance_->InitAsDefaultInstance();
  UsersStatusResponse::default_instance_->InitAsDefaultInstance();
  changeAvatarRequest::default_instance_->InitAsDefaultInstance();
  changeAvatarResponse::default_instance_->InitAsDefaultInstance();
  PcLoginStatusNotify::default_instance_->InitAsDefaultInstance();
  RemoveSessionNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Im_2eBuddy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Im_2eBuddy_2eproto {
  StaticDescriptorInitializer_Im_2eBuddy_2eproto() {
    protobuf_AddDesc_Im_2eBuddy_2eproto();
  }
} static_descriptor_initializer_Im_2eBuddy_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RecentContactSessionRequest::kUserIdFieldNumber;
const int RecentContactSessionRequest::kLatestUpdateTimeFieldNumber;
const int RecentContactSessionRequest::kAttachDataFieldNumber;
#endif  // !_MSC_VER

RecentContactSessionRequest::RecentContactSessionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Buddy.RecentContactSessionRequest)
}

void RecentContactSessionRequest::InitAsDefaultInstance() {
}

RecentContactSessionRequest::RecentContactSessionRequest(const RecentContactSessionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Buddy.RecentContactSessionRequest)
}

void RecentContactSessionRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  latest_update_time_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecentContactSessionRequest::~RecentContactSessionRequest() {
  // @@protoc_insertion_point(destructor:Im.Buddy.RecentContactSessionRequest)
  SharedDtor();
}

void RecentContactSessionRequest::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void RecentContactSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecentContactSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecentContactSessionRequest_descriptor_;
}

const RecentContactSessionRequest& RecentContactSessionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBuddy_2eproto();
  return *default_instance_;
}

RecentContactSessionRequest* RecentContactSessionRequest::default_instance_ = NULL;

RecentContactSessionRequest* RecentContactSessionRequest::New() const {
  return new RecentContactSessionRequest;
}

void RecentContactSessionRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RecentContactSessionRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, latest_update_time_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecentContactSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Buddy.RecentContactSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_latest_update_time;
        break;
      }

      // required uint32 latest_update_time = 2;
      case 2: {
        if (tag == 16) {
         parse_latest_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_update_time_)));
          set_has_latest_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 3;
      case 3: {
        if (tag == 26) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Buddy.RecentContactSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Buddy.RecentContactSessionRequest)
  return false;
#undef DO_
}

void RecentContactSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Buddy.RecentContactSessionRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 latest_update_time = 2;
  if (has_latest_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->latest_update_time(), output);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Buddy.RecentContactSessionRequest)
}

::google::protobuf::uint8* RecentContactSessionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Buddy.RecentContactSessionRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 latest_update_time = 2;
  if (has_latest_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->latest_update_time(), target);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Buddy.RecentContactSessionRequest)
  return target;
}

int RecentContactSessionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 latest_update_time = 2;
    if (has_latest_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latest_update_time());
    }

    // optional bytes attach_data = 3;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecentContactSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecentContactSessionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecentContactSessionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecentContactSessionRequest::MergeFrom(const RecentContactSessionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_latest_update_time()) {
      set_latest_update_time(from.latest_update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecentContactSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecentContactSessionRequest::CopyFrom(const RecentContactSessionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecentContactSessionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RecentContactSessionRequest::Swap(RecentContactSessionRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(latest_update_time_, other->latest_update_time_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecentContactSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecentContactSessionRequest_descriptor_;
  metadata.reflection = RecentContactSessionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecentContactSessionResponse::kUserIdFieldNumber;
const int RecentContactSessionResponse::kContactSessionListFieldNumber;
const int RecentContactSessionResponse::kAttachDataFieldNumber;
#endif  // !_MSC_VER

RecentContactSessionResponse::RecentContactSessionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Buddy.RecentContactSessionResponse)
}

void RecentContactSessionResponse::InitAsDefaultInstance() {
}

RecentContactSessionResponse::RecentContactSessionResponse(const RecentContactSessionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Buddy.RecentContactSessionResponse)
}

void RecentContactSessionResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecentContactSessionResponse::~RecentContactSessionResponse() {
  // @@protoc_insertion_point(destructor:Im.Buddy.RecentContactSessionResponse)
  SharedDtor();
}

void RecentContactSessionResponse::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void RecentContactSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecentContactSessionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecentContactSessionResponse_descriptor_;
}

const RecentContactSessionResponse& RecentContactSessionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBuddy_2eproto();
  return *default_instance_;
}

RecentContactSessionResponse* RecentContactSessionResponse::default_instance_ = NULL;

RecentContactSessionResponse* RecentContactSessionResponse::New() const {
  return new RecentContactSessionResponse;
}

void RecentContactSessionResponse::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  contact_session_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecentContactSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Buddy.RecentContactSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contact_session_list;
        break;
      }

      // repeated .Im.Base.ContactSessionInfo contact_session_list = 2;
      case 2: {
        if (tag == 18) {
         parse_contact_session_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contact_session_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contact_session_list;
        if (input->ExpectTag(26)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 3;
      case 3: {
        if (tag == 26) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Buddy.RecentContactSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Buddy.RecentContactSessionResponse)
  return false;
#undef DO_
}

void RecentContactSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Buddy.RecentContactSessionResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .Im.Base.ContactSessionInfo contact_session_list = 2;
  for (int i = 0; i < this->contact_session_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contact_session_list(i), output);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Buddy.RecentContactSessionResponse)
}

::google::protobuf::uint8* RecentContactSessionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Buddy.RecentContactSessionResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // repeated .Im.Base.ContactSessionInfo contact_session_list = 2;
  for (int i = 0; i < this->contact_session_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->contact_session_list(i), target);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Buddy.RecentContactSessionResponse)
  return target;
}

int RecentContactSessionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 3;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .Im.Base.ContactSessionInfo contact_session_list = 2;
  total_size += 1 * this->contact_session_list_size();
  for (int i = 0; i < this->contact_session_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contact_session_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecentContactSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecentContactSessionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecentContactSessionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecentContactSessionResponse::MergeFrom(const RecentContactSessionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  contact_session_list_.MergeFrom(from.contact_session_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecentContactSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecentContactSessionResponse::CopyFrom(const RecentContactSessionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecentContactSessionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->contact_session_list())) return false;
  return true;
}

void RecentContactSessionResponse::Swap(RecentContactSessionResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    contact_session_list_.Swap(&other->contact_session_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecentContactSessionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecentContactSessionResponse_descriptor_;
  metadata.reflection = RecentContactSessionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserStatusNotify::kUserStatusFieldNumber;
#endif  // !_MSC_VER

UserStatusNotify::UserStatusNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Buddy.UserStatusNotify)
}

void UserStatusNotify::InitAsDefaultInstance() {
  user_status_ = const_cast< ::Im::Base::UserStatus*>(&::Im::Base::UserStatus::default_instance());
}

UserStatusNotify::UserStatusNotify(const UserStatusNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Buddy.UserStatusNotify)
}

void UserStatusNotify::SharedCtor() {
  _cached_size_ = 0;
  user_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserStatusNotify::~UserStatusNotify() {
  // @@protoc_insertion_point(destructor:Im.Buddy.UserStatusNotify)
  SharedDtor();
}

void UserStatusNotify::SharedDtor() {
  if (this != default_instance_) {
    delete user_status_;
  }
}

void UserStatusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserStatusNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserStatusNotify_descriptor_;
}

const UserStatusNotify& UserStatusNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBuddy_2eproto();
  return *default_instance_;
}

UserStatusNotify* UserStatusNotify::default_instance_ = NULL;

UserStatusNotify* UserStatusNotify::New() const {
  return new UserStatusNotify;
}

void UserStatusNotify::Clear() {
  if (has_user_status()) {
    if (user_status_ != NULL) user_status_->::Im::Base::UserStatus::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Buddy.UserStatusNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Im.Base.UserStatus user_status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Buddy.UserStatusNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Buddy.UserStatusNotify)
  return false;
#undef DO_
}

void UserStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Buddy.UserStatusNotify)
  // required .Im.Base.UserStatus user_status = 1;
  if (has_user_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Buddy.UserStatusNotify)
}

::google::protobuf::uint8* UserStatusNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Buddy.UserStatusNotify)
  // required .Im.Base.UserStatus user_status = 1;
  if (has_user_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Buddy.UserStatusNotify)
  return target;
}

int UserStatusNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Im.Base.UserStatus user_status = 1;
    if (has_user_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserStatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserStatusNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserStatusNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserStatusNotify::MergeFrom(const UserStatusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_status()) {
      mutable_user_status()->::Im::Base::UserStatus::MergeFrom(from.user_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserStatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStatusNotify::CopyFrom(const UserStatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStatusNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_status()) {
    if (!this->user_status().IsInitialized()) return false;
  }
  return true;
}

void UserStatusNotify::Swap(UserStatusNotify* other) {
  if (other != this) {
    std::swap(user_status_, other->user_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserStatusNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserStatusNotify_descriptor_;
  metadata.reflection = UserStatusNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfoRequest::kUserIdFieldNumber;
const int UserInfoRequest::kUserIdListFieldNumber;
const int UserInfoRequest::kAttachDataFieldNumber;
#endif  // !_MSC_VER

UserInfoRequest::UserInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Buddy.UserInfoRequest)
}

void UserInfoRequest::InitAsDefaultInstance() {
}

UserInfoRequest::UserInfoRequest(const UserInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Buddy.UserInfoRequest)
}

void UserInfoRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfoRequest::~UserInfoRequest() {
  // @@protoc_insertion_point(destructor:Im.Buddy.UserInfoRequest)
  SharedDtor();
}

void UserInfoRequest::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void UserInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoRequest_descriptor_;
}

const UserInfoRequest& UserInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBuddy_2eproto();
  return *default_instance_;
}

UserInfoRequest* UserInfoRequest::default_instance_ = NULL;

UserInfoRequest* UserInfoRequest::New() const {
  return new UserInfoRequest;
}

void UserInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  user_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Buddy.UserInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id_list;
        break;
      }

      // repeated uint32 user_id_list = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_user_id_list())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id_list;
        if (input->ExpectTag(26)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 3;
      case 3: {
        if (tag == 26) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Buddy.UserInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Buddy.UserInfoRequest)
  return false;
#undef DO_
}

void UserInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Buddy.UserInfoRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated uint32 user_id_list = 2;
  for (int i = 0; i < this->user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->user_id_list(i), output);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Buddy.UserInfoRequest)
}

::google::protobuf::uint8* UserInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Buddy.UserInfoRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // repeated uint32 user_id_list = 2;
  for (int i = 0; i < this->user_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->user_id_list(i), target);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Buddy.UserInfoRequest)
  return target;
}

int UserInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 3;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 user_id_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->user_id_list(i));
    }
    total_size += 1 * this->user_id_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfoRequest::MergeFrom(const UserInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_list_.MergeFrom(from.user_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoRequest::CopyFrom(const UserInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserInfoRequest::Swap(UserInfoRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    user_id_list_.Swap(&other->user_id_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfoRequest_descriptor_;
  metadata.reflection = UserInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfoResponse::kUserIdFieldNumber;
const int UserInfoResponse::kUserInfoListFieldNumber;
const int UserInfoResponse::kAttachDataFieldNumber;
#endif  // !_MSC_VER

UserInfoResponse::UserInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Buddy.UserInfoResponse)
}

void UserInfoResponse::InitAsDefaultInstance() {
}

UserInfoResponse::UserInfoResponse(const UserInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Buddy.UserInfoResponse)
}

void UserInfoResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfoResponse::~UserInfoResponse() {
  // @@protoc_insertion_point(destructor:Im.Buddy.UserInfoResponse)
  SharedDtor();
}

void UserInfoResponse::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void UserInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoResponse_descriptor_;
}

const UserInfoResponse& UserInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBuddy_2eproto();
  return *default_instance_;
}

UserInfoResponse* UserInfoResponse::default_instance_ = NULL;

UserInfoResponse* UserInfoResponse::New() const {
  return new UserInfoResponse;
}

void UserInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  user_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Buddy.UserInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_info_list;
        break;
      }

      // repeated .Im.Base.UserInfo user_info_list = 2;
      case 2: {
        if (tag == 18) {
         parse_user_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_info_list;
        if (input->ExpectTag(26)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 3;
      case 3: {
        if (tag == 26) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Buddy.UserInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Buddy.UserInfoResponse)
  return false;
#undef DO_
}

void UserInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Buddy.UserInfoResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .Im.Base.UserInfo user_info_list = 2;
  for (int i = 0; i < this->user_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_info_list(i), output);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Buddy.UserInfoResponse)
}

::google::protobuf::uint8* UserInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Buddy.UserInfoResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // repeated .Im.Base.UserInfo user_info_list = 2;
  for (int i = 0; i < this->user_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_info_list(i), target);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Buddy.UserInfoResponse)
  return target;
}

int UserInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 3;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .Im.Base.UserInfo user_info_list = 2;
  total_size += 1 * this->user_info_list_size();
  for (int i = 0; i < this->user_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfoResponse::MergeFrom(const UserInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_info_list_.MergeFrom(from.user_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoResponse::CopyFrom(const UserInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->user_info_list())) return false;
  return true;
}

void UserInfoResponse::Swap(UserInfoResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    user_info_list_.Swap(&other->user_info_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfoResponse_descriptor_;
  metadata.reflection = UserInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveSessionRequest::kUserIdFieldNumber;
const int RemoveSessionRequest::kSessionTypeFieldNumber;
const int RemoveSessionRequest::kSessionIdFieldNumber;
const int RemoveSessionRequest::kAttachDataFieldNumber;
#endif  // !_MSC_VER

RemoveSessionRequest::RemoveSessionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Buddy.RemoveSessionRequest)
}

void RemoveSessionRequest::InitAsDefaultInstance() {
}

RemoveSessionRequest::RemoveSessionRequest(const RemoveSessionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Buddy.RemoveSessionRequest)
}

void RemoveSessionRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveSessionRequest::~RemoveSessionRequest() {
  // @@protoc_insertion_point(destructor:Im.Buddy.RemoveSessionRequest)
  SharedDtor();
}

void RemoveSessionRequest::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void RemoveSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveSessionRequest_descriptor_;
}

const RemoveSessionRequest& RemoveSessionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBuddy_2eproto();
  return *default_instance_;
}

RemoveSessionRequest* RemoveSessionRequest::default_instance_ = NULL;

RemoveSessionRequest* RemoveSessionRequest::New() const {
  return new RemoveSessionRequest;
}

void RemoveSessionRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    user_id_ = 0u;
    session_type_ = 1;
    session_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Buddy.RemoveSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .Im.Base.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::Im::Base::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 4;
      case 4: {
        if (tag == 34) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Buddy.RemoveSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Buddy.RemoveSessionRequest)
  return false;
#undef DO_
}

void RemoveSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Buddy.RemoveSessionRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .Im.Base.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // optional bytes attach_data = 4;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Buddy.RemoveSessionRequest)
}

::google::protobuf::uint8* RemoveSessionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Buddy.RemoveSessionRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .Im.Base.SessionType session_type = 2;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->session_type(), target);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->session_id(), target);
  }

  // optional bytes attach_data = 4;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Buddy.RemoveSessionRequest)
  return target;
}

int RemoveSessionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .Im.Base.SessionType session_type = 2;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // optional bytes attach_data = 4;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveSessionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveSessionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveSessionRequest::MergeFrom(const RemoveSessionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveSessionRequest::CopyFrom(const RemoveSessionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveSessionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RemoveSessionRequest::Swap(RemoveSessionRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_id_, other->session_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveSessionRequest_descriptor_;
  metadata.reflection = RemoveSessionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveSessionResponse::kUserIdFieldNumber;
const int RemoveSessionResponse::kResultCodeFieldNumber;
const int RemoveSessionResponse::kSessionTypeFieldNumber;
const int RemoveSessionResponse::kSessionIdFieldNumber;
const int RemoveSessionResponse::kAttachDataFieldNumber;
#endif  // !_MSC_VER

RemoveSessionResponse::RemoveSessionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Buddy.RemoveSessionResponse)
}

void RemoveSessionResponse::InitAsDefaultInstance() {
}

RemoveSessionResponse::RemoveSessionResponse(const RemoveSessionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Buddy.RemoveSessionResponse)
}

void RemoveSessionResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveSessionResponse::~RemoveSessionResponse() {
  // @@protoc_insertion_point(destructor:Im.Buddy.RemoveSessionResponse)
  SharedDtor();
}

void RemoveSessionResponse::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void RemoveSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveSessionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveSessionResponse_descriptor_;
}

const RemoveSessionResponse& RemoveSessionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBuddy_2eproto();
  return *default_instance_;
}

RemoveSessionResponse* RemoveSessionResponse::default_instance_ = NULL;

RemoveSessionResponse* RemoveSessionResponse::New() const {
  return new RemoveSessionResponse;
}

void RemoveSessionResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RemoveSessionResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(user_id_, result_code_);
    session_type_ = 1;
    session_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Buddy.RemoveSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_type;
        break;
      }

      // required .Im.Base.SessionType session_type = 3;
      case 3: {
        if (tag == 24) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::Im::Base::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 4;
      case 4: {
        if (tag == 32) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 5;
      case 5: {
        if (tag == 42) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Buddy.RemoveSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Buddy.RemoveSessionResponse)
  return false;
#undef DO_
}

void RemoveSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Buddy.RemoveSessionResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // required .Im.Base.SessionType session_type = 3;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->session_type(), output);
  }

  // required uint32 session_id = 4;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->session_id(), output);
  }

  // optional bytes attach_data = 5;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Buddy.RemoveSessionResponse)
}

::google::protobuf::uint8* RemoveSessionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Buddy.RemoveSessionResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result_code(), target);
  }

  // required .Im.Base.SessionType session_type = 3;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->session_type(), target);
  }

  // required uint32 session_id = 4;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->session_id(), target);
  }

  // optional bytes attach_data = 5;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Buddy.RemoveSessionResponse)
  return target;
}

int RemoveSessionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // required .Im.Base.SessionType session_type = 3;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 session_id = 4;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // optional bytes attach_data = 5;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveSessionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveSessionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveSessionResponse::MergeFrom(const RemoveSessionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveSessionResponse::CopyFrom(const RemoveSessionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveSessionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RemoveSessionResponse::Swap(RemoveSessionResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_id_, other->session_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveSessionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveSessionResponse_descriptor_;
  metadata.reflection = RemoveSessionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllUserRequest::kUserIdFieldNumber;
const int AllUserRequest::kLatestUpdateTimeFieldNumber;
const int AllUserRequest::kAttachDataFieldNumber;
#endif  // !_MSC_VER

AllUserRequest::AllUserRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Buddy.AllUserRequest)
}

void AllUserRequest::InitAsDefaultInstance() {
}

AllUserRequest::AllUserRequest(const AllUserRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Buddy.AllUserRequest)
}

void AllUserRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  latest_update_time_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllUserRequest::~AllUserRequest() {
  // @@protoc_insertion_point(destructor:Im.Buddy.AllUserRequest)
  SharedDtor();
}

void AllUserRequest::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void AllUserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllUserRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllUserRequest_descriptor_;
}

const AllUserRequest& AllUserRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBuddy_2eproto();
  return *default_instance_;
}

AllUserRequest* AllUserRequest::default_instance_ = NULL;

AllUserRequest* AllUserRequest::New() const {
  return new AllUserRequest;
}

void AllUserRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AllUserRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, latest_update_time_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllUserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Buddy.AllUserRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_latest_update_time;
        break;
      }

      // required uint32 latest_update_time = 2;
      case 2: {
        if (tag == 16) {
         parse_latest_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_update_time_)));
          set_has_latest_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 3;
      case 3: {
        if (tag == 26) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Buddy.AllUserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Buddy.AllUserRequest)
  return false;
#undef DO_
}

void AllUserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Buddy.AllUserRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 latest_update_time = 2;
  if (has_latest_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->latest_update_time(), output);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Buddy.AllUserRequest)
}

::google::protobuf::uint8* AllUserRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Buddy.AllUserRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 latest_update_time = 2;
  if (has_latest_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->latest_update_time(), target);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Buddy.AllUserRequest)
  return target;
}

int AllUserRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 latest_update_time = 2;
    if (has_latest_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latest_update_time());
    }

    // optional bytes attach_data = 3;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllUserRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllUserRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllUserRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllUserRequest::MergeFrom(const AllUserRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_latest_update_time()) {
      set_latest_update_time(from.latest_update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllUserRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllUserRequest::CopyFrom(const AllUserRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllUserRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AllUserRequest::Swap(AllUserRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(latest_update_time_, other->latest_update_time_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllUserRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllUserRequest_descriptor_;
  metadata.reflection = AllUserRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllUserResponse::kUserIdFieldNumber;
const int AllUserResponse::kLatestUpdateTimeFieldNumber;
const int AllUserResponse::kUserInfoListFieldNumber;
const int AllUserResponse::kAttachDataFieldNumber;
#endif  // !_MSC_VER

AllUserResponse::AllUserResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Buddy.AllUserResponse)
}

void AllUserResponse::InitAsDefaultInstance() {
}

AllUserResponse::AllUserResponse(const AllUserResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Buddy.AllUserResponse)
}

void AllUserResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  latest_update_time_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllUserResponse::~AllUserResponse() {
  // @@protoc_insertion_point(destructor:Im.Buddy.AllUserResponse)
  SharedDtor();
}

void AllUserResponse::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void AllUserResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllUserResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllUserResponse_descriptor_;
}

const AllUserResponse& AllUserResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBuddy_2eproto();
  return *default_instance_;
}

AllUserResponse* AllUserResponse::default_instance_ = NULL;

AllUserResponse* AllUserResponse::New() const {
  return new AllUserResponse;
}

void AllUserResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AllUserResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(user_id_, latest_update_time_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  user_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllUserResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Buddy.AllUserResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_latest_update_time;
        break;
      }

      // required uint32 latest_update_time = 2;
      case 2: {
        if (tag == 16) {
         parse_latest_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_update_time_)));
          set_has_latest_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_info_list;
        break;
      }

      // repeated .Im.Base.UserInfo user_info_list = 3;
      case 3: {
        if (tag == 26) {
         parse_user_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_info_list;
        if (input->ExpectTag(34)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 4;
      case 4: {
        if (tag == 34) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Buddy.AllUserResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Buddy.AllUserResponse)
  return false;
#undef DO_
}

void AllUserResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Buddy.AllUserResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 latest_update_time = 2;
  if (has_latest_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->latest_update_time(), output);
  }

  // repeated .Im.Base.UserInfo user_info_list = 3;
  for (int i = 0; i < this->user_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user_info_list(i), output);
  }

  // optional bytes attach_data = 4;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Buddy.AllUserResponse)
}

::google::protobuf::uint8* AllUserResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Buddy.AllUserResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 latest_update_time = 2;
  if (has_latest_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->latest_update_time(), target);
  }

  // repeated .Im.Base.UserInfo user_info_list = 3;
  for (int i = 0; i < this->user_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user_info_list(i), target);
  }

  // optional bytes attach_data = 4;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Buddy.AllUserResponse)
  return target;
}

int AllUserResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 latest_update_time = 2;
    if (has_latest_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latest_update_time());
    }

    // optional bytes attach_data = 4;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .Im.Base.UserInfo user_info_list = 3;
  total_size += 1 * this->user_info_list_size();
  for (int i = 0; i < this->user_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllUserResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllUserResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllUserResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllUserResponse::MergeFrom(const AllUserResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_info_list_.MergeFrom(from.user_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_latest_update_time()) {
      set_latest_update_time(from.latest_update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllUserResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllUserResponse::CopyFrom(const AllUserResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllUserResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->user_info_list())) return false;
  return true;
}

void AllUserResponse::Swap(AllUserResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(latest_update_time_, other->latest_update_time_);
    user_info_list_.Swap(&other->user_info_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllUserResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllUserResponse_descriptor_;
  metadata.reflection = AllUserResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UsersStatusRequest::kUserIdFieldNumber;
const int UsersStatusRequest::kUserIdListFieldNumber;
const int UsersStatusRequest::kAttachDataFieldNumber;
#endif  // !_MSC_VER

UsersStatusRequest::UsersStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Buddy.UsersStatusRequest)
}

void UsersStatusRequest::InitAsDefaultInstance() {
}

UsersStatusRequest::UsersStatusRequest(const UsersStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Buddy.UsersStatusRequest)
}

void UsersStatusRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UsersStatusRequest::~UsersStatusRequest() {
  // @@protoc_insertion_point(destructor:Im.Buddy.UsersStatusRequest)
  SharedDtor();
}

void UsersStatusRequest::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void UsersStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UsersStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UsersStatusRequest_descriptor_;
}

const UsersStatusRequest& UsersStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBuddy_2eproto();
  return *default_instance_;
}

UsersStatusRequest* UsersStatusRequest::default_instance_ = NULL;

UsersStatusRequest* UsersStatusRequest::New() const {
  return new UsersStatusRequest;
}

void UsersStatusRequest::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  user_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UsersStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Buddy.UsersStatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id_list;
        break;
      }

      // repeated uint32 user_id_list = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_user_id_list())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id_list;
        if (input->ExpectTag(26)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 3;
      case 3: {
        if (tag == 26) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Buddy.UsersStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Buddy.UsersStatusRequest)
  return false;
#undef DO_
}

void UsersStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Buddy.UsersStatusRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated uint32 user_id_list = 2;
  for (int i = 0; i < this->user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->user_id_list(i), output);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Buddy.UsersStatusRequest)
}

::google::protobuf::uint8* UsersStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Buddy.UsersStatusRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // repeated uint32 user_id_list = 2;
  for (int i = 0; i < this->user_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->user_id_list(i), target);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Buddy.UsersStatusRequest)
  return target;
}

int UsersStatusRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 3;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 user_id_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->user_id_list(i));
    }
    total_size += 1 * this->user_id_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UsersStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UsersStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UsersStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UsersStatusRequest::MergeFrom(const UsersStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_list_.MergeFrom(from.user_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UsersStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsersStatusRequest::CopyFrom(const UsersStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsersStatusRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UsersStatusRequest::Swap(UsersStatusRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    user_id_list_.Swap(&other->user_id_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UsersStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UsersStatusRequest_descriptor_;
  metadata.reflection = UsersStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UsersStatusResponse::kUserIdFieldNumber;
const int UsersStatusResponse::kUserStatusListFieldNumber;
const int UsersStatusResponse::kAttachDataFieldNumber;
#endif  // !_MSC_VER

UsersStatusResponse::UsersStatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Buddy.UsersStatusResponse)
}

void UsersStatusResponse::InitAsDefaultInstance() {
}

UsersStatusResponse::UsersStatusResponse(const UsersStatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Buddy.UsersStatusResponse)
}

void UsersStatusResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UsersStatusResponse::~UsersStatusResponse() {
  // @@protoc_insertion_point(destructor:Im.Buddy.UsersStatusResponse)
  SharedDtor();
}

void UsersStatusResponse::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void UsersStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UsersStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UsersStatusResponse_descriptor_;
}

const UsersStatusResponse& UsersStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBuddy_2eproto();
  return *default_instance_;
}

UsersStatusResponse* UsersStatusResponse::default_instance_ = NULL;

UsersStatusResponse* UsersStatusResponse::New() const {
  return new UsersStatusResponse;
}

void UsersStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  user_status_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UsersStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Buddy.UsersStatusResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_status_list;
        break;
      }

      // repeated .Im.Base.UserStatus user_status_list = 2;
      case 2: {
        if (tag == 18) {
         parse_user_status_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_status_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_status_list;
        if (input->ExpectTag(26)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 3;
      case 3: {
        if (tag == 26) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Buddy.UsersStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Buddy.UsersStatusResponse)
  return false;
#undef DO_
}

void UsersStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Buddy.UsersStatusResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .Im.Base.UserStatus user_status_list = 2;
  for (int i = 0; i < this->user_status_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_status_list(i), output);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Buddy.UsersStatusResponse)
}

::google::protobuf::uint8* UsersStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Buddy.UsersStatusResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // repeated .Im.Base.UserStatus user_status_list = 2;
  for (int i = 0; i < this->user_status_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_status_list(i), target);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Buddy.UsersStatusResponse)
  return target;
}

int UsersStatusResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 3;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .Im.Base.UserStatus user_status_list = 2;
  total_size += 1 * this->user_status_list_size();
  for (int i = 0; i < this->user_status_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_status_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UsersStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UsersStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UsersStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UsersStatusResponse::MergeFrom(const UsersStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_status_list_.MergeFrom(from.user_status_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UsersStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsersStatusResponse::CopyFrom(const UsersStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsersStatusResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->user_status_list())) return false;
  return true;
}

void UsersStatusResponse::Swap(UsersStatusResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    user_status_list_.Swap(&other->user_status_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UsersStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UsersStatusResponse_descriptor_;
  metadata.reflection = UsersStatusResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int changeAvatarRequest::kUserIdFieldNumber;
const int changeAvatarRequest::kAvatarUrlFieldNumber;
const int changeAvatarRequest::kAttachDataFieldNumber;
#endif  // !_MSC_VER

changeAvatarRequest::changeAvatarRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Buddy.changeAvatarRequest)
}

void changeAvatarRequest::InitAsDefaultInstance() {
}

changeAvatarRequest::changeAvatarRequest(const changeAvatarRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Buddy.changeAvatarRequest)
}

void changeAvatarRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

changeAvatarRequest::~changeAvatarRequest() {
  // @@protoc_insertion_point(destructor:Im.Buddy.changeAvatarRequest)
  SharedDtor();
}

void changeAvatarRequest::SharedDtor() {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void changeAvatarRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* changeAvatarRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return changeAvatarRequest_descriptor_;
}

const changeAvatarRequest& changeAvatarRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBuddy_2eproto();
  return *default_instance_;
}

changeAvatarRequest* changeAvatarRequest::default_instance_ = NULL;

changeAvatarRequest* changeAvatarRequest::New() const {
  return new changeAvatarRequest;
}

void changeAvatarRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = 0u;
    if (has_avatar_url()) {
      if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_url_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool changeAvatarRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Buddy.changeAvatarRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_avatar_url;
        break;
      }

      // required string avatar_url = 2;
      case 2: {
        if (tag == 18) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar_url().data(), this->avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 3;
      case 3: {
        if (tag == 26) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Buddy.changeAvatarRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Buddy.changeAvatarRequest)
  return false;
#undef DO_
}

void changeAvatarRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Buddy.changeAvatarRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required string avatar_url = 2;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->avatar_url(), output);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Buddy.changeAvatarRequest)
}

::google::protobuf::uint8* changeAvatarRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Buddy.changeAvatarRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required string avatar_url = 2;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->avatar_url(), target);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Buddy.changeAvatarRequest)
  return target;
}

int changeAvatarRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string avatar_url = 2;
    if (has_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar_url());
    }

    // optional bytes attach_data = 3;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void changeAvatarRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const changeAvatarRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const changeAvatarRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void changeAvatarRequest::MergeFrom(const changeAvatarRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_avatar_url()) {
      set_avatar_url(from.avatar_url());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void changeAvatarRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void changeAvatarRequest::CopyFrom(const changeAvatarRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool changeAvatarRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void changeAvatarRequest::Swap(changeAvatarRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(avatar_url_, other->avatar_url_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata changeAvatarRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = changeAvatarRequest_descriptor_;
  metadata.reflection = changeAvatarRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int changeAvatarResponse::kUserIdFieldNumber;
const int changeAvatarResponse::kResultCodeFieldNumber;
const int changeAvatarResponse::kAttachDataFieldNumber;
#endif  // !_MSC_VER

changeAvatarResponse::changeAvatarResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Buddy.changeAvatarResponse)
}

void changeAvatarResponse::InitAsDefaultInstance() {
}

changeAvatarResponse::changeAvatarResponse(const changeAvatarResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Buddy.changeAvatarResponse)
}

void changeAvatarResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

changeAvatarResponse::~changeAvatarResponse() {
  // @@protoc_insertion_point(destructor:Im.Buddy.changeAvatarResponse)
  SharedDtor();
}

void changeAvatarResponse::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void changeAvatarResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* changeAvatarResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return changeAvatarResponse_descriptor_;
}

const changeAvatarResponse& changeAvatarResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBuddy_2eproto();
  return *default_instance_;
}

changeAvatarResponse* changeAvatarResponse::default_instance_ = NULL;

changeAvatarResponse* changeAvatarResponse::New() const {
  return new changeAvatarResponse;
}

void changeAvatarResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<changeAvatarResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, result_code_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool changeAvatarResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Buddy.changeAvatarResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 3;
      case 3: {
        if (tag == 26) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Buddy.changeAvatarResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Buddy.changeAvatarResponse)
  return false;
#undef DO_
}

void changeAvatarResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Buddy.changeAvatarResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Buddy.changeAvatarResponse)
}

::google::protobuf::uint8* changeAvatarResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Buddy.changeAvatarResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result_code(), target);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Buddy.changeAvatarResponse)
  return target;
}

int changeAvatarResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional bytes attach_data = 3;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void changeAvatarResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const changeAvatarResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const changeAvatarResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void changeAvatarResponse::MergeFrom(const changeAvatarResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void changeAvatarResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void changeAvatarResponse::CopyFrom(const changeAvatarResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool changeAvatarResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void changeAvatarResponse::Swap(changeAvatarResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata changeAvatarResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = changeAvatarResponse_descriptor_;
  metadata.reflection = changeAvatarResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PcLoginStatusNotify::kUserIdFieldNumber;
const int PcLoginStatusNotify::kLoginStatusFieldNumber;
#endif  // !_MSC_VER

PcLoginStatusNotify::PcLoginStatusNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Buddy.PcLoginStatusNotify)
}

void PcLoginStatusNotify::InitAsDefaultInstance() {
}

PcLoginStatusNotify::PcLoginStatusNotify(const PcLoginStatusNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Buddy.PcLoginStatusNotify)
}

void PcLoginStatusNotify::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  login_status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PcLoginStatusNotify::~PcLoginStatusNotify() {
  // @@protoc_insertion_point(destructor:Im.Buddy.PcLoginStatusNotify)
  SharedDtor();
}

void PcLoginStatusNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PcLoginStatusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PcLoginStatusNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PcLoginStatusNotify_descriptor_;
}

const PcLoginStatusNotify& PcLoginStatusNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBuddy_2eproto();
  return *default_instance_;
}

PcLoginStatusNotify* PcLoginStatusNotify::default_instance_ = NULL;

PcLoginStatusNotify* PcLoginStatusNotify::New() const {
  return new PcLoginStatusNotify;
}

void PcLoginStatusNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_id_ = 0u;
    login_status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PcLoginStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Buddy.PcLoginStatusNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_login_status;
        break;
      }

      // required .Im.Base.UserStatusType login_status = 2;
      case 2: {
        if (tag == 16) {
         parse_login_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::UserStatusType_IsValid(value)) {
            set_login_status(static_cast< ::Im::Base::UserStatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Buddy.PcLoginStatusNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Buddy.PcLoginStatusNotify)
  return false;
#undef DO_
}

void PcLoginStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Buddy.PcLoginStatusNotify)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .Im.Base.UserStatusType login_status = 2;
  if (has_login_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->login_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Buddy.PcLoginStatusNotify)
}

::google::protobuf::uint8* PcLoginStatusNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Buddy.PcLoginStatusNotify)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .Im.Base.UserStatusType login_status = 2;
  if (has_login_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->login_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Buddy.PcLoginStatusNotify)
  return target;
}

int PcLoginStatusNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .Im.Base.UserStatusType login_status = 2;
    if (has_login_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->login_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PcLoginStatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PcLoginStatusNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PcLoginStatusNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PcLoginStatusNotify::MergeFrom(const PcLoginStatusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_login_status()) {
      set_login_status(from.login_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PcLoginStatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PcLoginStatusNotify::CopyFrom(const PcLoginStatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PcLoginStatusNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PcLoginStatusNotify::Swap(PcLoginStatusNotify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(login_status_, other->login_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PcLoginStatusNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PcLoginStatusNotify_descriptor_;
  metadata.reflection = PcLoginStatusNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveSessionNotify::kUserIdFieldNumber;
const int RemoveSessionNotify::kSessionTypeFieldNumber;
const int RemoveSessionNotify::kSessionIdFieldNumber;
#endif  // !_MSC_VER

RemoveSessionNotify::RemoveSessionNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Buddy.RemoveSessionNotify)
}

void RemoveSessionNotify::InitAsDefaultInstance() {
}

RemoveSessionNotify::RemoveSessionNotify(const RemoveSessionNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Buddy.RemoveSessionNotify)
}

void RemoveSessionNotify::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveSessionNotify::~RemoveSessionNotify() {
  // @@protoc_insertion_point(destructor:Im.Buddy.RemoveSessionNotify)
  SharedDtor();
}

void RemoveSessionNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveSessionNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveSessionNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveSessionNotify_descriptor_;
}

const RemoveSessionNotify& RemoveSessionNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBuddy_2eproto();
  return *default_instance_;
}

RemoveSessionNotify* RemoveSessionNotify::default_instance_ = NULL;

RemoveSessionNotify* RemoveSessionNotify::New() const {
  return new RemoveSessionNotify;
}

void RemoveSessionNotify::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = 0u;
    session_type_ = 1;
    session_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveSessionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Buddy.RemoveSessionNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .Im.Base.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::Im::Base::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Buddy.RemoveSessionNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Buddy.RemoveSessionNotify)
  return false;
#undef DO_
}

void RemoveSessionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Buddy.RemoveSessionNotify)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .Im.Base.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Buddy.RemoveSessionNotify)
}

::google::protobuf::uint8* RemoveSessionNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Buddy.RemoveSessionNotify)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .Im.Base.SessionType session_type = 2;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->session_type(), target);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Buddy.RemoveSessionNotify)
  return target;
}

int RemoveSessionNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .Im.Base.SessionType session_type = 2;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveSessionNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveSessionNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveSessionNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveSessionNotify::MergeFrom(const RemoveSessionNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveSessionNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveSessionNotify::CopyFrom(const RemoveSessionNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveSessionNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RemoveSessionNotify::Swap(RemoveSessionNotify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveSessionNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveSessionNotify_descriptor_;
  metadata.reflection = RemoveSessionNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Buddy
}  // namespace Im

// @@protoc_insertion_point(global_scope)
