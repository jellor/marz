// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Im.Login.proto

#ifndef PROTOBUF_Im_2eLogin_2eproto__INCLUDED
#define PROTOBUF_Im_2eLogin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Im.Base.pb.h"
// @@protoc_insertion_point(includes)

namespace Im {
namespace Login {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Im_2eLogin_2eproto();
void protobuf_AssignDesc_Im_2eLogin_2eproto();
void protobuf_ShutdownFile_Im_2eLogin_2eproto();

class MsgServerRequest;
class ServerRequest;
class MsgServerResponse;
class ServerResponse;
class LoginRequest;
class LoginResponse;
class ValidateRequest;
class ValidateResponse;
class LogoutRequest;
class LogoutResponse;
class KickUser;
class DeviceTokenRequest;
class DeviceTokenResponse;
class KickPCClientRequest;
class KickPCCLientResponse;

// ===================================================================

class MsgServerRequest : public ::google::protobuf::Message {
 public:
  MsgServerRequest();
  virtual ~MsgServerRequest();

  MsgServerRequest(const MsgServerRequest& from);

  inline MsgServerRequest& operator=(const MsgServerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgServerRequest& default_instance();

  void Swap(MsgServerRequest* other);

  // implements Message ----------------------------------------------

  MsgServerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgServerRequest& from);
  void MergeFrom(const MsgServerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Im.Login.MsgServerRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Im_2eLogin_2eproto();
  friend void protobuf_AssignDesc_Im_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_Im_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static MsgServerRequest* default_instance_;
};
// -------------------------------------------------------------------

class ServerRequest : public ::google::protobuf::Message {
 public:
  ServerRequest();
  virtual ~ServerRequest();

  ServerRequest(const ServerRequest& from);

  inline ServerRequest& operator=(const ServerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerRequest& default_instance();

  void Swap(ServerRequest* other);

  // implements Message ----------------------------------------------

  ServerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerRequest& from);
  void MergeFrom(const ServerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Im.Login.ServerRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Im_2eLogin_2eproto();
  friend void protobuf_AssignDesc_Im_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_Im_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static ServerRequest* default_instance_;
};
// -------------------------------------------------------------------

class MsgServerResponse : public ::google::protobuf::Message {
 public:
  MsgServerResponse();
  virtual ~MsgServerResponse();

  MsgServerResponse(const MsgServerResponse& from);

  inline MsgServerResponse& operator=(const MsgServerResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgServerResponse& default_instance();

  void Swap(MsgServerResponse* other);

  // implements Message ----------------------------------------------

  MsgServerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgServerResponse& from);
  void MergeFrom(const MsgServerResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Im.Base.ResultType result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::Im::Base::ResultType result_code() const;
  inline void set_result_code(::Im::Base::ResultType value);

  // optional string prior_id = 2;
  inline bool has_prior_id() const;
  inline void clear_prior_id();
  static const int kPriorIdFieldNumber = 2;
  inline const ::std::string& prior_id() const;
  inline void set_prior_id(const ::std::string& value);
  inline void set_prior_id(const char* value);
  inline void set_prior_id(const char* value, size_t size);
  inline ::std::string* mutable_prior_id();
  inline ::std::string* release_prior_id();
  inline void set_allocated_prior_id(::std::string* prior_id);

  // optional string backup_id = 3;
  inline bool has_backup_id() const;
  inline void clear_backup_id();
  static const int kBackupIdFieldNumber = 3;
  inline const ::std::string& backup_id() const;
  inline void set_backup_id(const ::std::string& value);
  inline void set_backup_id(const char* value);
  inline void set_backup_id(const char* value, size_t size);
  inline ::std::string* mutable_backup_id();
  inline ::std::string* release_backup_id();
  inline void set_allocated_backup_id(::std::string* backup_id);

  // optional uint32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Im.Login.MsgServerResponse)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_prior_id();
  inline void clear_has_prior_id();
  inline void set_has_backup_id();
  inline void clear_has_backup_id();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* prior_id_;
  int result_code_;
  ::google::protobuf::uint32 port_;
  ::std::string* backup_id_;
  friend void  protobuf_AddDesc_Im_2eLogin_2eproto();
  friend void protobuf_AssignDesc_Im_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_Im_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static MsgServerResponse* default_instance_;
};
// -------------------------------------------------------------------

class ServerResponse : public ::google::protobuf::Message {
 public:
  ServerResponse();
  virtual ~ServerResponse();

  ServerResponse(const ServerResponse& from);

  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerResponse& default_instance();

  void Swap(ServerResponse* other);

  // implements Message ----------------------------------------------

  ServerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerResponse& from);
  void MergeFrom(const ServerResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Im.Base.ResultType result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::Im::Base::ResultType result_code() const;
  inline void set_result_code(::Im::Base::ResultType value);

  // optional string prior_id = 2;
  inline bool has_prior_id() const;
  inline void clear_prior_id();
  static const int kPriorIdFieldNumber = 2;
  inline const ::std::string& prior_id() const;
  inline void set_prior_id(const ::std::string& value);
  inline void set_prior_id(const char* value);
  inline void set_prior_id(const char* value, size_t size);
  inline ::std::string* mutable_prior_id();
  inline ::std::string* release_prior_id();
  inline void set_allocated_prior_id(::std::string* prior_id);

  // optional string backup_id = 3;
  inline bool has_backup_id() const;
  inline void clear_backup_id();
  static const int kBackupIdFieldNumber = 3;
  inline const ::std::string& backup_id() const;
  inline void set_backup_id(const ::std::string& value);
  inline void set_backup_id(const char* value);
  inline void set_backup_id(const char* value, size_t size);
  inline ::std::string* mutable_backup_id();
  inline ::std::string* release_backup_id();
  inline void set_allocated_backup_id(::std::string* backup_id);

  // optional uint32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Im.Login.ServerResponse)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_prior_id();
  inline void clear_has_prior_id();
  inline void set_has_backup_id();
  inline void clear_has_backup_id();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* prior_id_;
  int result_code_;
  ::google::protobuf::uint32 port_;
  ::std::string* backup_id_;
  friend void  protobuf_AddDesc_Im_2eLogin_2eproto();
  friend void protobuf_AssignDesc_Im_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_Im_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static ServerResponse* default_instance_;
};
// -------------------------------------------------------------------

class LoginRequest : public ::google::protobuf::Message {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  void Swap(LoginRequest* other);

  // implements Message ----------------------------------------------

  LoginRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required string user_password = 2;
  inline bool has_user_password() const;
  inline void clear_user_password();
  static const int kUserPasswordFieldNumber = 2;
  inline const ::std::string& user_password() const;
  inline void set_user_password(const ::std::string& value);
  inline void set_user_password(const char* value);
  inline void set_user_password(const char* value, size_t size);
  inline ::std::string* mutable_user_password();
  inline ::std::string* release_user_password();
  inline void set_allocated_user_password(::std::string* user_password);

  // required .Im.Base.UserStatusType online_status = 3;
  inline bool has_online_status() const;
  inline void clear_online_status();
  static const int kOnlineStatusFieldNumber = 3;
  inline ::Im::Base::UserStatusType online_status() const;
  inline void set_online_status(::Im::Base::UserStatusType value);

  // required .Im.Base.ClientType client_type = 4;
  inline bool has_client_type() const;
  inline void clear_client_type();
  static const int kClientTypeFieldNumber = 4;
  inline ::Im::Base::ClientType client_type() const;
  inline void set_client_type(::Im::Base::ClientType value);

  // optional string client_version = 5;
  inline bool has_client_version() const;
  inline void clear_client_version();
  static const int kClientVersionFieldNumber = 5;
  inline const ::std::string& client_version() const;
  inline void set_client_version(const ::std::string& value);
  inline void set_client_version(const char* value);
  inline void set_client_version(const char* value, size_t size);
  inline ::std::string* mutable_client_version();
  inline ::std::string* release_client_version();
  inline void set_allocated_client_version(::std::string* client_version);

  // @@protoc_insertion_point(class_scope:Im.Login.LoginRequest)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_user_password();
  inline void clear_has_user_password();
  inline void set_has_online_status();
  inline void clear_has_online_status();
  inline void set_has_client_type();
  inline void clear_has_client_type();
  inline void set_has_client_version();
  inline void clear_has_client_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_name_;
  ::std::string* user_password_;
  int online_status_;
  int client_type_;
  ::std::string* client_version_;
  friend void  protobuf_AddDesc_Im_2eLogin_2eproto();
  friend void protobuf_AssignDesc_Im_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_Im_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static LoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResponse& default_instance();

  void Swap(LoginResponse* other);

  // implements Message ----------------------------------------------

  LoginResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 server_time = 1;
  inline bool has_server_time() const;
  inline void clear_server_time();
  static const int kServerTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 server_time() const;
  inline void set_server_time(::google::protobuf::uint32 value);

  // required .Im.Base.ResultType result_code = 2;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  inline ::Im::Base::ResultType result_code() const;
  inline void set_result_code(::Im::Base::ResultType value);

  // optional string result_string = 3;
  inline bool has_result_string() const;
  inline void clear_result_string();
  static const int kResultStringFieldNumber = 3;
  inline const ::std::string& result_string() const;
  inline void set_result_string(const ::std::string& value);
  inline void set_result_string(const char* value);
  inline void set_result_string(const char* value, size_t size);
  inline ::std::string* mutable_result_string();
  inline ::std::string* release_result_string();
  inline void set_allocated_result_string(::std::string* result_string);

  // optional .Im.Base.UserStatusType online_status = 4;
  inline bool has_online_status() const;
  inline void clear_online_status();
  static const int kOnlineStatusFieldNumber = 4;
  inline ::Im::Base::UserStatusType online_status() const;
  inline void set_online_status(::Im::Base::UserStatusType value);

  // optional .Im.Base.UserInfo user_info = 5;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 5;
  inline const ::Im::Base::UserInfo& user_info() const;
  inline ::Im::Base::UserInfo* mutable_user_info();
  inline ::Im::Base::UserInfo* release_user_info();
  inline void set_allocated_user_info(::Im::Base::UserInfo* user_info);

  // @@protoc_insertion_point(class_scope:Im.Login.LoginResponse)
 private:
  inline void set_has_server_time();
  inline void clear_has_server_time();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_result_string();
  inline void clear_has_result_string();
  inline void set_has_online_status();
  inline void clear_has_online_status();
  inline void set_has_user_info();
  inline void clear_has_user_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 server_time_;
  int result_code_;
  ::std::string* result_string_;
  ::Im::Base::UserInfo* user_info_;
  int online_status_;
  friend void  protobuf_AddDesc_Im_2eLogin_2eproto();
  friend void protobuf_AssignDesc_Im_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_Im_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static LoginResponse* default_instance_;
};
// -------------------------------------------------------------------

class ValidateRequest : public ::google::protobuf::Message {
 public:
  ValidateRequest();
  virtual ~ValidateRequest();

  ValidateRequest(const ValidateRequest& from);

  inline ValidateRequest& operator=(const ValidateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ValidateRequest& default_instance();

  void Swap(ValidateRequest* other);

  // implements Message ----------------------------------------------

  ValidateRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ValidateRequest& from);
  void MergeFrom(const ValidateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required string user_password = 2;
  inline bool has_user_password() const;
  inline void clear_user_password();
  static const int kUserPasswordFieldNumber = 2;
  inline const ::std::string& user_password() const;
  inline void set_user_password(const ::std::string& value);
  inline void set_user_password(const char* value);
  inline void set_user_password(const char* value, size_t size);
  inline ::std::string* mutable_user_password();
  inline ::std::string* release_user_password();
  inline void set_allocated_user_password(::std::string* user_password);

  // optional bytes attach_data = 3;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 3;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:Im.Login.ValidateRequest)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_user_password();
  inline void clear_has_user_password();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_name_;
  ::std::string* user_password_;
  ::std::string* attach_data_;
  friend void  protobuf_AddDesc_Im_2eLogin_2eproto();
  friend void protobuf_AssignDesc_Im_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_Im_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static ValidateRequest* default_instance_;
};
// -------------------------------------------------------------------

class ValidateResponse : public ::google::protobuf::Message {
 public:
  ValidateResponse();
  virtual ~ValidateResponse();

  ValidateResponse(const ValidateResponse& from);

  inline ValidateResponse& operator=(const ValidateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ValidateResponse& default_instance();

  void Swap(ValidateResponse* other);

  // implements Message ----------------------------------------------

  ValidateResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ValidateResponse& from);
  void MergeFrom(const ValidateResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required uint32 result_code = 2;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional string result_string = 3;
  inline bool has_result_string() const;
  inline void clear_result_string();
  static const int kResultStringFieldNumber = 3;
  inline const ::std::string& result_string() const;
  inline void set_result_string(const ::std::string& value);
  inline void set_result_string(const char* value);
  inline void set_result_string(const char* value, size_t size);
  inline ::std::string* mutable_result_string();
  inline ::std::string* release_result_string();
  inline void set_allocated_result_string(::std::string* result_string);

  // optional .Im.Base.UserInfo user_info = 4;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 4;
  inline const ::Im::Base::UserInfo& user_info() const;
  inline ::Im::Base::UserInfo* mutable_user_info();
  inline ::Im::Base::UserInfo* release_user_info();
  inline void set_allocated_user_info(::Im::Base::UserInfo* user_info);

  // optional bytes attach_data = 5;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 5;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:Im.Login.ValidateResponse)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_result_string();
  inline void clear_has_result_string();
  inline void set_has_user_info();
  inline void clear_has_user_info();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_name_;
  ::std::string* result_string_;
  ::Im::Base::UserInfo* user_info_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 result_code_;
  friend void  protobuf_AddDesc_Im_2eLogin_2eproto();
  friend void protobuf_AssignDesc_Im_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_Im_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static ValidateResponse* default_instance_;
};
// -------------------------------------------------------------------

class LogoutRequest : public ::google::protobuf::Message {
 public:
  LogoutRequest();
  virtual ~LogoutRequest();

  LogoutRequest(const LogoutRequest& from);

  inline LogoutRequest& operator=(const LogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutRequest& default_instance();

  void Swap(LogoutRequest* other);

  // implements Message ----------------------------------------------

  LogoutRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogoutRequest& from);
  void MergeFrom(const LogoutRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Im.Login.LogoutRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Im_2eLogin_2eproto();
  friend void protobuf_AssignDesc_Im_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_Im_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static LogoutRequest* default_instance_;
};
// -------------------------------------------------------------------

class LogoutResponse : public ::google::protobuf::Message {
 public:
  LogoutResponse();
  virtual ~LogoutResponse();

  LogoutResponse(const LogoutResponse& from);

  inline LogoutResponse& operator=(const LogoutResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutResponse& default_instance();

  void Swap(LogoutResponse* other);

  // implements Message ----------------------------------------------

  LogoutResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogoutResponse& from);
  void MergeFrom(const LogoutResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Im.Login.LogoutResponse)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 result_code_;
  friend void  protobuf_AddDesc_Im_2eLogin_2eproto();
  friend void protobuf_AssignDesc_Im_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_Im_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static LogoutResponse* default_instance_;
};
// -------------------------------------------------------------------

class KickUser : public ::google::protobuf::Message {
 public:
  KickUser();
  virtual ~KickUser();

  KickUser(const KickUser& from);

  inline KickUser& operator=(const KickUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KickUser& default_instance();

  void Swap(KickUser* other);

  // implements Message ----------------------------------------------

  KickUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KickUser& from);
  void MergeFrom(const KickUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .Im.Base.KickReasonType kick_reasion = 2;
  inline bool has_kick_reasion() const;
  inline void clear_kick_reasion();
  static const int kKickReasionFieldNumber = 2;
  inline ::Im::Base::KickReasonType kick_reasion() const;
  inline void set_kick_reasion(::Im::Base::KickReasonType value);

  // @@protoc_insertion_point(class_scope:Im.Login.KickUser)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_kick_reasion();
  inline void clear_has_kick_reasion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  int kick_reasion_;
  friend void  protobuf_AddDesc_Im_2eLogin_2eproto();
  friend void protobuf_AssignDesc_Im_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_Im_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static KickUser* default_instance_;
};
// -------------------------------------------------------------------

class DeviceTokenRequest : public ::google::protobuf::Message {
 public:
  DeviceTokenRequest();
  virtual ~DeviceTokenRequest();

  DeviceTokenRequest(const DeviceTokenRequest& from);

  inline DeviceTokenRequest& operator=(const DeviceTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceTokenRequest& default_instance();

  void Swap(DeviceTokenRequest* other);

  // implements Message ----------------------------------------------

  DeviceTokenRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceTokenRequest& from);
  void MergeFrom(const DeviceTokenRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string device_token = 2;
  inline bool has_device_token() const;
  inline void clear_device_token();
  static const int kDeviceTokenFieldNumber = 2;
  inline const ::std::string& device_token() const;
  inline void set_device_token(const ::std::string& value);
  inline void set_device_token(const char* value);
  inline void set_device_token(const char* value, size_t size);
  inline ::std::string* mutable_device_token();
  inline ::std::string* release_device_token();
  inline void set_allocated_device_token(::std::string* device_token);

  // optional .Im.Base.ClientType client_type = 3;
  inline bool has_client_type() const;
  inline void clear_client_type();
  static const int kClientTypeFieldNumber = 3;
  inline ::Im::Base::ClientType client_type() const;
  inline void set_client_type(::Im::Base::ClientType value);

  // optional bytes attach_data = 4;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 4;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:Im.Login.DeviceTokenRequest)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_device_token();
  inline void clear_has_device_token();
  inline void set_has_client_type();
  inline void clear_has_client_type();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* device_token_;
  ::google::protobuf::uint32 user_id_;
  int client_type_;
  ::std::string* attach_data_;
  friend void  protobuf_AddDesc_Im_2eLogin_2eproto();
  friend void protobuf_AssignDesc_Im_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_Im_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static DeviceTokenRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeviceTokenResponse : public ::google::protobuf::Message {
 public:
  DeviceTokenResponse();
  virtual ~DeviceTokenResponse();

  DeviceTokenResponse(const DeviceTokenResponse& from);

  inline DeviceTokenResponse& operator=(const DeviceTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceTokenResponse& default_instance();

  void Swap(DeviceTokenResponse* other);

  // implements Message ----------------------------------------------

  DeviceTokenResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceTokenResponse& from);
  void MergeFrom(const DeviceTokenResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required bytes attach_data = 2;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 2;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:Im.Login.DeviceTokenResponse)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  friend void  protobuf_AddDesc_Im_2eLogin_2eproto();
  friend void protobuf_AssignDesc_Im_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_Im_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static DeviceTokenResponse* default_instance_;
};
// -------------------------------------------------------------------

class KickPCClientRequest : public ::google::protobuf::Message {
 public:
  KickPCClientRequest();
  virtual ~KickPCClientRequest();

  KickPCClientRequest(const KickPCClientRequest& from);

  inline KickPCClientRequest& operator=(const KickPCClientRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KickPCClientRequest& default_instance();

  void Swap(KickPCClientRequest* other);

  // implements Message ----------------------------------------------

  KickPCClientRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KickPCClientRequest& from);
  void MergeFrom(const KickPCClientRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Im.Login.KickPCClientRequest)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  friend void  protobuf_AddDesc_Im_2eLogin_2eproto();
  friend void protobuf_AssignDesc_Im_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_Im_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static KickPCClientRequest* default_instance_;
};
// -------------------------------------------------------------------

class KickPCCLientResponse : public ::google::protobuf::Message {
 public:
  KickPCCLientResponse();
  virtual ~KickPCCLientResponse();

  KickPCCLientResponse(const KickPCCLientResponse& from);

  inline KickPCCLientResponse& operator=(const KickPCCLientResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KickPCCLientResponse& default_instance();

  void Swap(KickPCCLientResponse* other);

  // implements Message ----------------------------------------------

  KickPCCLientResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KickPCCLientResponse& from);
  void MergeFrom(const KickPCCLientResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 result_code = 2;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Im.Login.KickPCCLientResponse)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 result_code_;
  friend void  protobuf_AddDesc_Im_2eLogin_2eproto();
  friend void protobuf_AssignDesc_Im_2eLogin_2eproto();
  friend void protobuf_ShutdownFile_Im_2eLogin_2eproto();

  void InitAsDefaultInstance();
  static KickPCCLientResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgServerRequest

// -------------------------------------------------------------------

// ServerRequest

// -------------------------------------------------------------------

// MsgServerResponse

// required .Im.Base.ResultType result_code = 1;
inline bool MsgServerResponse::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgServerResponse::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgServerResponse::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgServerResponse::clear_result_code() {
  result_code_ = 1;
  clear_has_result_code();
}
inline ::Im::Base::ResultType MsgServerResponse::result_code() const {
  // @@protoc_insertion_point(field_get:Im.Login.MsgServerResponse.result_code)
  return static_cast< ::Im::Base::ResultType >(result_code_);
}
inline void MsgServerResponse::set_result_code(::Im::Base::ResultType value) {
  assert(::Im::Base::ResultType_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:Im.Login.MsgServerResponse.result_code)
}

// optional string prior_id = 2;
inline bool MsgServerResponse::has_prior_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgServerResponse::set_has_prior_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgServerResponse::clear_has_prior_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgServerResponse::clear_prior_id() {
  if (prior_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prior_id_->clear();
  }
  clear_has_prior_id();
}
inline const ::std::string& MsgServerResponse::prior_id() const {
  // @@protoc_insertion_point(field_get:Im.Login.MsgServerResponse.prior_id)
  return *prior_id_;
}
inline void MsgServerResponse::set_prior_id(const ::std::string& value) {
  set_has_prior_id();
  if (prior_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prior_id_ = new ::std::string;
  }
  prior_id_->assign(value);
  // @@protoc_insertion_point(field_set:Im.Login.MsgServerResponse.prior_id)
}
inline void MsgServerResponse::set_prior_id(const char* value) {
  set_has_prior_id();
  if (prior_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prior_id_ = new ::std::string;
  }
  prior_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.Login.MsgServerResponse.prior_id)
}
inline void MsgServerResponse::set_prior_id(const char* value, size_t size) {
  set_has_prior_id();
  if (prior_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prior_id_ = new ::std::string;
  }
  prior_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.Login.MsgServerResponse.prior_id)
}
inline ::std::string* MsgServerResponse::mutable_prior_id() {
  set_has_prior_id();
  if (prior_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prior_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.Login.MsgServerResponse.prior_id)
  return prior_id_;
}
inline ::std::string* MsgServerResponse::release_prior_id() {
  clear_has_prior_id();
  if (prior_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = prior_id_;
    prior_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgServerResponse::set_allocated_prior_id(::std::string* prior_id) {
  if (prior_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete prior_id_;
  }
  if (prior_id) {
    set_has_prior_id();
    prior_id_ = prior_id;
  } else {
    clear_has_prior_id();
    prior_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.Login.MsgServerResponse.prior_id)
}

// optional string backup_id = 3;
inline bool MsgServerResponse::has_backup_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgServerResponse::set_has_backup_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgServerResponse::clear_has_backup_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgServerResponse::clear_backup_id() {
  if (backup_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backup_id_->clear();
  }
  clear_has_backup_id();
}
inline const ::std::string& MsgServerResponse::backup_id() const {
  // @@protoc_insertion_point(field_get:Im.Login.MsgServerResponse.backup_id)
  return *backup_id_;
}
inline void MsgServerResponse::set_backup_id(const ::std::string& value) {
  set_has_backup_id();
  if (backup_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backup_id_ = new ::std::string;
  }
  backup_id_->assign(value);
  // @@protoc_insertion_point(field_set:Im.Login.MsgServerResponse.backup_id)
}
inline void MsgServerResponse::set_backup_id(const char* value) {
  set_has_backup_id();
  if (backup_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backup_id_ = new ::std::string;
  }
  backup_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.Login.MsgServerResponse.backup_id)
}
inline void MsgServerResponse::set_backup_id(const char* value, size_t size) {
  set_has_backup_id();
  if (backup_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backup_id_ = new ::std::string;
  }
  backup_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.Login.MsgServerResponse.backup_id)
}
inline ::std::string* MsgServerResponse::mutable_backup_id() {
  set_has_backup_id();
  if (backup_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backup_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.Login.MsgServerResponse.backup_id)
  return backup_id_;
}
inline ::std::string* MsgServerResponse::release_backup_id() {
  clear_has_backup_id();
  if (backup_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = backup_id_;
    backup_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgServerResponse::set_allocated_backup_id(::std::string* backup_id) {
  if (backup_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backup_id_;
  }
  if (backup_id) {
    set_has_backup_id();
    backup_id_ = backup_id;
  } else {
    clear_has_backup_id();
    backup_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.Login.MsgServerResponse.backup_id)
}

// optional uint32 port = 4;
inline bool MsgServerResponse::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgServerResponse::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgServerResponse::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgServerResponse::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 MsgServerResponse::port() const {
  // @@protoc_insertion_point(field_get:Im.Login.MsgServerResponse.port)
  return port_;
}
inline void MsgServerResponse::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:Im.Login.MsgServerResponse.port)
}

// -------------------------------------------------------------------

// ServerResponse

// required .Im.Base.ResultType result_code = 1;
inline bool ServerResponse::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerResponse::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerResponse::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerResponse::clear_result_code() {
  result_code_ = 1;
  clear_has_result_code();
}
inline ::Im::Base::ResultType ServerResponse::result_code() const {
  // @@protoc_insertion_point(field_get:Im.Login.ServerResponse.result_code)
  return static_cast< ::Im::Base::ResultType >(result_code_);
}
inline void ServerResponse::set_result_code(::Im::Base::ResultType value) {
  assert(::Im::Base::ResultType_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:Im.Login.ServerResponse.result_code)
}

// optional string prior_id = 2;
inline bool ServerResponse::has_prior_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerResponse::set_has_prior_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerResponse::clear_has_prior_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerResponse::clear_prior_id() {
  if (prior_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prior_id_->clear();
  }
  clear_has_prior_id();
}
inline const ::std::string& ServerResponse::prior_id() const {
  // @@protoc_insertion_point(field_get:Im.Login.ServerResponse.prior_id)
  return *prior_id_;
}
inline void ServerResponse::set_prior_id(const ::std::string& value) {
  set_has_prior_id();
  if (prior_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prior_id_ = new ::std::string;
  }
  prior_id_->assign(value);
  // @@protoc_insertion_point(field_set:Im.Login.ServerResponse.prior_id)
}
inline void ServerResponse::set_prior_id(const char* value) {
  set_has_prior_id();
  if (prior_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prior_id_ = new ::std::string;
  }
  prior_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.Login.ServerResponse.prior_id)
}
inline void ServerResponse::set_prior_id(const char* value, size_t size) {
  set_has_prior_id();
  if (prior_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prior_id_ = new ::std::string;
  }
  prior_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.Login.ServerResponse.prior_id)
}
inline ::std::string* ServerResponse::mutable_prior_id() {
  set_has_prior_id();
  if (prior_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prior_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.Login.ServerResponse.prior_id)
  return prior_id_;
}
inline ::std::string* ServerResponse::release_prior_id() {
  clear_has_prior_id();
  if (prior_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = prior_id_;
    prior_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerResponse::set_allocated_prior_id(::std::string* prior_id) {
  if (prior_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete prior_id_;
  }
  if (prior_id) {
    set_has_prior_id();
    prior_id_ = prior_id;
  } else {
    clear_has_prior_id();
    prior_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.Login.ServerResponse.prior_id)
}

// optional string backup_id = 3;
inline bool ServerResponse::has_backup_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerResponse::set_has_backup_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerResponse::clear_has_backup_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerResponse::clear_backup_id() {
  if (backup_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backup_id_->clear();
  }
  clear_has_backup_id();
}
inline const ::std::string& ServerResponse::backup_id() const {
  // @@protoc_insertion_point(field_get:Im.Login.ServerResponse.backup_id)
  return *backup_id_;
}
inline void ServerResponse::set_backup_id(const ::std::string& value) {
  set_has_backup_id();
  if (backup_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backup_id_ = new ::std::string;
  }
  backup_id_->assign(value);
  // @@protoc_insertion_point(field_set:Im.Login.ServerResponse.backup_id)
}
inline void ServerResponse::set_backup_id(const char* value) {
  set_has_backup_id();
  if (backup_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backup_id_ = new ::std::string;
  }
  backup_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.Login.ServerResponse.backup_id)
}
inline void ServerResponse::set_backup_id(const char* value, size_t size) {
  set_has_backup_id();
  if (backup_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backup_id_ = new ::std::string;
  }
  backup_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.Login.ServerResponse.backup_id)
}
inline ::std::string* ServerResponse::mutable_backup_id() {
  set_has_backup_id();
  if (backup_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backup_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.Login.ServerResponse.backup_id)
  return backup_id_;
}
inline ::std::string* ServerResponse::release_backup_id() {
  clear_has_backup_id();
  if (backup_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = backup_id_;
    backup_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerResponse::set_allocated_backup_id(::std::string* backup_id) {
  if (backup_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backup_id_;
  }
  if (backup_id) {
    set_has_backup_id();
    backup_id_ = backup_id;
  } else {
    clear_has_backup_id();
    backup_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.Login.ServerResponse.backup_id)
}

// optional uint32 port = 4;
inline bool ServerResponse::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerResponse::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerResponse::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerResponse::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 ServerResponse::port() const {
  // @@protoc_insertion_point(field_get:Im.Login.ServerResponse.port)
  return port_;
}
inline void ServerResponse::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:Im.Login.ServerResponse.port)
}

// -------------------------------------------------------------------

// LoginRequest

// required string user_name = 1;
inline bool LoginRequest::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRequest::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRequest::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRequest::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& LoginRequest::user_name() const {
  // @@protoc_insertion_point(field_get:Im.Login.LoginRequest.user_name)
  return *user_name_;
}
inline void LoginRequest::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set:Im.Login.LoginRequest.user_name)
}
inline void LoginRequest::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.Login.LoginRequest.user_name)
}
inline void LoginRequest::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.Login.LoginRequest.user_name)
}
inline ::std::string* LoginRequest::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.Login.LoginRequest.user_name)
  return user_name_;
}
inline ::std::string* LoginRequest::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginRequest::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.Login.LoginRequest.user_name)
}

// required string user_password = 2;
inline bool LoginRequest::has_user_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRequest::set_has_user_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRequest::clear_has_user_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRequest::clear_user_password() {
  if (user_password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_password_->clear();
  }
  clear_has_user_password();
}
inline const ::std::string& LoginRequest::user_password() const {
  // @@protoc_insertion_point(field_get:Im.Login.LoginRequest.user_password)
  return *user_password_;
}
inline void LoginRequest::set_user_password(const ::std::string& value) {
  set_has_user_password();
  if (user_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_password_ = new ::std::string;
  }
  user_password_->assign(value);
  // @@protoc_insertion_point(field_set:Im.Login.LoginRequest.user_password)
}
inline void LoginRequest::set_user_password(const char* value) {
  set_has_user_password();
  if (user_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_password_ = new ::std::string;
  }
  user_password_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.Login.LoginRequest.user_password)
}
inline void LoginRequest::set_user_password(const char* value, size_t size) {
  set_has_user_password();
  if (user_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_password_ = new ::std::string;
  }
  user_password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.Login.LoginRequest.user_password)
}
inline ::std::string* LoginRequest::mutable_user_password() {
  set_has_user_password();
  if (user_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.Login.LoginRequest.user_password)
  return user_password_;
}
inline ::std::string* LoginRequest::release_user_password() {
  clear_has_user_password();
  if (user_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_password_;
    user_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginRequest::set_allocated_user_password(::std::string* user_password) {
  if (user_password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_password_;
  }
  if (user_password) {
    set_has_user_password();
    user_password_ = user_password;
  } else {
    clear_has_user_password();
    user_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.Login.LoginRequest.user_password)
}

// required .Im.Base.UserStatusType online_status = 3;
inline bool LoginRequest::has_online_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginRequest::set_has_online_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginRequest::clear_has_online_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginRequest::clear_online_status() {
  online_status_ = 1;
  clear_has_online_status();
}
inline ::Im::Base::UserStatusType LoginRequest::online_status() const {
  // @@protoc_insertion_point(field_get:Im.Login.LoginRequest.online_status)
  return static_cast< ::Im::Base::UserStatusType >(online_status_);
}
inline void LoginRequest::set_online_status(::Im::Base::UserStatusType value) {
  assert(::Im::Base::UserStatusType_IsValid(value));
  set_has_online_status();
  online_status_ = value;
  // @@protoc_insertion_point(field_set:Im.Login.LoginRequest.online_status)
}

// required .Im.Base.ClientType client_type = 4;
inline bool LoginRequest::has_client_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginRequest::set_has_client_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginRequest::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginRequest::clear_client_type() {
  client_type_ = 1;
  clear_has_client_type();
}
inline ::Im::Base::ClientType LoginRequest::client_type() const {
  // @@protoc_insertion_point(field_get:Im.Login.LoginRequest.client_type)
  return static_cast< ::Im::Base::ClientType >(client_type_);
}
inline void LoginRequest::set_client_type(::Im::Base::ClientType value) {
  assert(::Im::Base::ClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:Im.Login.LoginRequest.client_type)
}

// optional string client_version = 5;
inline bool LoginRequest::has_client_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginRequest::set_has_client_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginRequest::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginRequest::clear_client_version() {
  if (client_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_version_->clear();
  }
  clear_has_client_version();
}
inline const ::std::string& LoginRequest::client_version() const {
  // @@protoc_insertion_point(field_get:Im.Login.LoginRequest.client_version)
  return *client_version_;
}
inline void LoginRequest::set_client_version(const ::std::string& value) {
  set_has_client_version();
  if (client_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_version_ = new ::std::string;
  }
  client_version_->assign(value);
  // @@protoc_insertion_point(field_set:Im.Login.LoginRequest.client_version)
}
inline void LoginRequest::set_client_version(const char* value) {
  set_has_client_version();
  if (client_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_version_ = new ::std::string;
  }
  client_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.Login.LoginRequest.client_version)
}
inline void LoginRequest::set_client_version(const char* value, size_t size) {
  set_has_client_version();
  if (client_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_version_ = new ::std::string;
  }
  client_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.Login.LoginRequest.client_version)
}
inline ::std::string* LoginRequest::mutable_client_version() {
  set_has_client_version();
  if (client_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.Login.LoginRequest.client_version)
  return client_version_;
}
inline ::std::string* LoginRequest::release_client_version() {
  clear_has_client_version();
  if (client_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_version_;
    client_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginRequest::set_allocated_client_version(::std::string* client_version) {
  if (client_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_version_;
  }
  if (client_version) {
    set_has_client_version();
    client_version_ = client_version;
  } else {
    clear_has_client_version();
    client_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.Login.LoginRequest.client_version)
}

// -------------------------------------------------------------------

// LoginResponse

// required uint32 server_time = 1;
inline bool LoginResponse::has_server_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResponse::set_has_server_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResponse::clear_has_server_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResponse::clear_server_time() {
  server_time_ = 0u;
  clear_has_server_time();
}
inline ::google::protobuf::uint32 LoginResponse::server_time() const {
  // @@protoc_insertion_point(field_get:Im.Login.LoginResponse.server_time)
  return server_time_;
}
inline void LoginResponse::set_server_time(::google::protobuf::uint32 value) {
  set_has_server_time();
  server_time_ = value;
  // @@protoc_insertion_point(field_set:Im.Login.LoginResponse.server_time)
}

// required .Im.Base.ResultType result_code = 2;
inline bool LoginResponse::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResponse::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResponse::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResponse::clear_result_code() {
  result_code_ = 1;
  clear_has_result_code();
}
inline ::Im::Base::ResultType LoginResponse::result_code() const {
  // @@protoc_insertion_point(field_get:Im.Login.LoginResponse.result_code)
  return static_cast< ::Im::Base::ResultType >(result_code_);
}
inline void LoginResponse::set_result_code(::Im::Base::ResultType value) {
  assert(::Im::Base::ResultType_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:Im.Login.LoginResponse.result_code)
}

// optional string result_string = 3;
inline bool LoginResponse::has_result_string() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginResponse::set_has_result_string() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginResponse::clear_has_result_string() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginResponse::clear_result_string() {
  if (result_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_->clear();
  }
  clear_has_result_string();
}
inline const ::std::string& LoginResponse::result_string() const {
  // @@protoc_insertion_point(field_get:Im.Login.LoginResponse.result_string)
  return *result_string_;
}
inline void LoginResponse::set_result_string(const ::std::string& value) {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  result_string_->assign(value);
  // @@protoc_insertion_point(field_set:Im.Login.LoginResponse.result_string)
}
inline void LoginResponse::set_result_string(const char* value) {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  result_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.Login.LoginResponse.result_string)
}
inline void LoginResponse::set_result_string(const char* value, size_t size) {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  result_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.Login.LoginResponse.result_string)
}
inline ::std::string* LoginResponse::mutable_result_string() {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.Login.LoginResponse.result_string)
  return result_string_;
}
inline ::std::string* LoginResponse::release_result_string() {
  clear_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_string_;
    result_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginResponse::set_allocated_result_string(::std::string* result_string) {
  if (result_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_string_;
  }
  if (result_string) {
    set_has_result_string();
    result_string_ = result_string;
  } else {
    clear_has_result_string();
    result_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.Login.LoginResponse.result_string)
}

// optional .Im.Base.UserStatusType online_status = 4;
inline bool LoginResponse::has_online_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginResponse::set_has_online_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginResponse::clear_has_online_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginResponse::clear_online_status() {
  online_status_ = 1;
  clear_has_online_status();
}
inline ::Im::Base::UserStatusType LoginResponse::online_status() const {
  // @@protoc_insertion_point(field_get:Im.Login.LoginResponse.online_status)
  return static_cast< ::Im::Base::UserStatusType >(online_status_);
}
inline void LoginResponse::set_online_status(::Im::Base::UserStatusType value) {
  assert(::Im::Base::UserStatusType_IsValid(value));
  set_has_online_status();
  online_status_ = value;
  // @@protoc_insertion_point(field_set:Im.Login.LoginResponse.online_status)
}

// optional .Im.Base.UserInfo user_info = 5;
inline bool LoginResponse::has_user_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginResponse::set_has_user_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginResponse::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginResponse::clear_user_info() {
  if (user_info_ != NULL) user_info_->::Im::Base::UserInfo::Clear();
  clear_has_user_info();
}
inline const ::Im::Base::UserInfo& LoginResponse::user_info() const {
  // @@protoc_insertion_point(field_get:Im.Login.LoginResponse.user_info)
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
}
inline ::Im::Base::UserInfo* LoginResponse::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) user_info_ = new ::Im::Base::UserInfo;
  // @@protoc_insertion_point(field_mutable:Im.Login.LoginResponse.user_info)
  return user_info_;
}
inline ::Im::Base::UserInfo* LoginResponse::release_user_info() {
  clear_has_user_info();
  ::Im::Base::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void LoginResponse::set_allocated_user_info(::Im::Base::UserInfo* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Im.Login.LoginResponse.user_info)
}

// -------------------------------------------------------------------

// ValidateRequest

// required string user_name = 1;
inline bool ValidateRequest::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ValidateRequest::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ValidateRequest::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ValidateRequest::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& ValidateRequest::user_name() const {
  // @@protoc_insertion_point(field_get:Im.Login.ValidateRequest.user_name)
  return *user_name_;
}
inline void ValidateRequest::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set:Im.Login.ValidateRequest.user_name)
}
inline void ValidateRequest::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.Login.ValidateRequest.user_name)
}
inline void ValidateRequest::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.Login.ValidateRequest.user_name)
}
inline ::std::string* ValidateRequest::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.Login.ValidateRequest.user_name)
  return user_name_;
}
inline ::std::string* ValidateRequest::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ValidateRequest::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.Login.ValidateRequest.user_name)
}

// required string user_password = 2;
inline bool ValidateRequest::has_user_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ValidateRequest::set_has_user_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ValidateRequest::clear_has_user_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ValidateRequest::clear_user_password() {
  if (user_password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_password_->clear();
  }
  clear_has_user_password();
}
inline const ::std::string& ValidateRequest::user_password() const {
  // @@protoc_insertion_point(field_get:Im.Login.ValidateRequest.user_password)
  return *user_password_;
}
inline void ValidateRequest::set_user_password(const ::std::string& value) {
  set_has_user_password();
  if (user_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_password_ = new ::std::string;
  }
  user_password_->assign(value);
  // @@protoc_insertion_point(field_set:Im.Login.ValidateRequest.user_password)
}
inline void ValidateRequest::set_user_password(const char* value) {
  set_has_user_password();
  if (user_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_password_ = new ::std::string;
  }
  user_password_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.Login.ValidateRequest.user_password)
}
inline void ValidateRequest::set_user_password(const char* value, size_t size) {
  set_has_user_password();
  if (user_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_password_ = new ::std::string;
  }
  user_password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.Login.ValidateRequest.user_password)
}
inline ::std::string* ValidateRequest::mutable_user_password() {
  set_has_user_password();
  if (user_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.Login.ValidateRequest.user_password)
  return user_password_;
}
inline ::std::string* ValidateRequest::release_user_password() {
  clear_has_user_password();
  if (user_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_password_;
    user_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ValidateRequest::set_allocated_user_password(::std::string* user_password) {
  if (user_password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_password_;
  }
  if (user_password) {
    set_has_user_password();
    user_password_ = user_password;
  } else {
    clear_has_user_password();
    user_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.Login.ValidateRequest.user_password)
}

// optional bytes attach_data = 3;
inline bool ValidateRequest::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ValidateRequest::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ValidateRequest::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ValidateRequest::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& ValidateRequest::attach_data() const {
  // @@protoc_insertion_point(field_get:Im.Login.ValidateRequest.attach_data)
  return *attach_data_;
}
inline void ValidateRequest::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:Im.Login.ValidateRequest.attach_data)
}
inline void ValidateRequest::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.Login.ValidateRequest.attach_data)
}
inline void ValidateRequest::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.Login.ValidateRequest.attach_data)
}
inline ::std::string* ValidateRequest::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.Login.ValidateRequest.attach_data)
  return attach_data_;
}
inline ::std::string* ValidateRequest::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ValidateRequest::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.Login.ValidateRequest.attach_data)
}

// -------------------------------------------------------------------

// ValidateResponse

// required string user_name = 1;
inline bool ValidateResponse::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ValidateResponse::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ValidateResponse::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ValidateResponse::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& ValidateResponse::user_name() const {
  // @@protoc_insertion_point(field_get:Im.Login.ValidateResponse.user_name)
  return *user_name_;
}
inline void ValidateResponse::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set:Im.Login.ValidateResponse.user_name)
}
inline void ValidateResponse::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.Login.ValidateResponse.user_name)
}
inline void ValidateResponse::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.Login.ValidateResponse.user_name)
}
inline ::std::string* ValidateResponse::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.Login.ValidateResponse.user_name)
  return user_name_;
}
inline ::std::string* ValidateResponse::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ValidateResponse::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.Login.ValidateResponse.user_name)
}

// required uint32 result_code = 2;
inline bool ValidateResponse::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ValidateResponse::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ValidateResponse::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ValidateResponse::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 ValidateResponse::result_code() const {
  // @@protoc_insertion_point(field_get:Im.Login.ValidateResponse.result_code)
  return result_code_;
}
inline void ValidateResponse::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:Im.Login.ValidateResponse.result_code)
}

// optional string result_string = 3;
inline bool ValidateResponse::has_result_string() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ValidateResponse::set_has_result_string() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ValidateResponse::clear_has_result_string() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ValidateResponse::clear_result_string() {
  if (result_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_->clear();
  }
  clear_has_result_string();
}
inline const ::std::string& ValidateResponse::result_string() const {
  // @@protoc_insertion_point(field_get:Im.Login.ValidateResponse.result_string)
  return *result_string_;
}
inline void ValidateResponse::set_result_string(const ::std::string& value) {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  result_string_->assign(value);
  // @@protoc_insertion_point(field_set:Im.Login.ValidateResponse.result_string)
}
inline void ValidateResponse::set_result_string(const char* value) {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  result_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.Login.ValidateResponse.result_string)
}
inline void ValidateResponse::set_result_string(const char* value, size_t size) {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  result_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.Login.ValidateResponse.result_string)
}
inline ::std::string* ValidateResponse::mutable_result_string() {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.Login.ValidateResponse.result_string)
  return result_string_;
}
inline ::std::string* ValidateResponse::release_result_string() {
  clear_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_string_;
    result_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ValidateResponse::set_allocated_result_string(::std::string* result_string) {
  if (result_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_string_;
  }
  if (result_string) {
    set_has_result_string();
    result_string_ = result_string;
  } else {
    clear_has_result_string();
    result_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.Login.ValidateResponse.result_string)
}

// optional .Im.Base.UserInfo user_info = 4;
inline bool ValidateResponse::has_user_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ValidateResponse::set_has_user_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ValidateResponse::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ValidateResponse::clear_user_info() {
  if (user_info_ != NULL) user_info_->::Im::Base::UserInfo::Clear();
  clear_has_user_info();
}
inline const ::Im::Base::UserInfo& ValidateResponse::user_info() const {
  // @@protoc_insertion_point(field_get:Im.Login.ValidateResponse.user_info)
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
}
inline ::Im::Base::UserInfo* ValidateResponse::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) user_info_ = new ::Im::Base::UserInfo;
  // @@protoc_insertion_point(field_mutable:Im.Login.ValidateResponse.user_info)
  return user_info_;
}
inline ::Im::Base::UserInfo* ValidateResponse::release_user_info() {
  clear_has_user_info();
  ::Im::Base::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void ValidateResponse::set_allocated_user_info(::Im::Base::UserInfo* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Im.Login.ValidateResponse.user_info)
}

// optional bytes attach_data = 5;
inline bool ValidateResponse::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ValidateResponse::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ValidateResponse::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ValidateResponse::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& ValidateResponse::attach_data() const {
  // @@protoc_insertion_point(field_get:Im.Login.ValidateResponse.attach_data)
  return *attach_data_;
}
inline void ValidateResponse::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:Im.Login.ValidateResponse.attach_data)
}
inline void ValidateResponse::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.Login.ValidateResponse.attach_data)
}
inline void ValidateResponse::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.Login.ValidateResponse.attach_data)
}
inline ::std::string* ValidateResponse::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.Login.ValidateResponse.attach_data)
  return attach_data_;
}
inline ::std::string* ValidateResponse::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ValidateResponse::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.Login.ValidateResponse.attach_data)
}

// -------------------------------------------------------------------

// LogoutRequest

// -------------------------------------------------------------------

// LogoutResponse

// required uint32 result_code = 1;
inline bool LogoutResponse::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogoutResponse::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogoutResponse::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogoutResponse::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 LogoutResponse::result_code() const {
  // @@protoc_insertion_point(field_get:Im.Login.LogoutResponse.result_code)
  return result_code_;
}
inline void LogoutResponse::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:Im.Login.LogoutResponse.result_code)
}

// -------------------------------------------------------------------

// KickUser

// required uint32 user_id = 1;
inline bool KickUser::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KickUser::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KickUser::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KickUser::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 KickUser::user_id() const {
  // @@protoc_insertion_point(field_get:Im.Login.KickUser.user_id)
  return user_id_;
}
inline void KickUser::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.Login.KickUser.user_id)
}

// required .Im.Base.KickReasonType kick_reasion = 2;
inline bool KickUser::has_kick_reasion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KickUser::set_has_kick_reasion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KickUser::clear_has_kick_reasion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KickUser::clear_kick_reasion() {
  kick_reasion_ = 1;
  clear_has_kick_reasion();
}
inline ::Im::Base::KickReasonType KickUser::kick_reasion() const {
  // @@protoc_insertion_point(field_get:Im.Login.KickUser.kick_reasion)
  return static_cast< ::Im::Base::KickReasonType >(kick_reasion_);
}
inline void KickUser::set_kick_reasion(::Im::Base::KickReasonType value) {
  assert(::Im::Base::KickReasonType_IsValid(value));
  set_has_kick_reasion();
  kick_reasion_ = value;
  // @@protoc_insertion_point(field_set:Im.Login.KickUser.kick_reasion)
}

// -------------------------------------------------------------------

// DeviceTokenRequest

// required uint32 user_id = 1;
inline bool DeviceTokenRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceTokenRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceTokenRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceTokenRequest::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 DeviceTokenRequest::user_id() const {
  // @@protoc_insertion_point(field_get:Im.Login.DeviceTokenRequest.user_id)
  return user_id_;
}
inline void DeviceTokenRequest::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.Login.DeviceTokenRequest.user_id)
}

// required string device_token = 2;
inline bool DeviceTokenRequest::has_device_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceTokenRequest::set_has_device_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceTokenRequest::clear_has_device_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceTokenRequest::clear_device_token() {
  if (device_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_token_->clear();
  }
  clear_has_device_token();
}
inline const ::std::string& DeviceTokenRequest::device_token() const {
  // @@protoc_insertion_point(field_get:Im.Login.DeviceTokenRequest.device_token)
  return *device_token_;
}
inline void DeviceTokenRequest::set_device_token(const ::std::string& value) {
  set_has_device_token();
  if (device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_token_ = new ::std::string;
  }
  device_token_->assign(value);
  // @@protoc_insertion_point(field_set:Im.Login.DeviceTokenRequest.device_token)
}
inline void DeviceTokenRequest::set_device_token(const char* value) {
  set_has_device_token();
  if (device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_token_ = new ::std::string;
  }
  device_token_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.Login.DeviceTokenRequest.device_token)
}
inline void DeviceTokenRequest::set_device_token(const char* value, size_t size) {
  set_has_device_token();
  if (device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_token_ = new ::std::string;
  }
  device_token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.Login.DeviceTokenRequest.device_token)
}
inline ::std::string* DeviceTokenRequest::mutable_device_token() {
  set_has_device_token();
  if (device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.Login.DeviceTokenRequest.device_token)
  return device_token_;
}
inline ::std::string* DeviceTokenRequest::release_device_token() {
  clear_has_device_token();
  if (device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_token_;
    device_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceTokenRequest::set_allocated_device_token(::std::string* device_token) {
  if (device_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_token_;
  }
  if (device_token) {
    set_has_device_token();
    device_token_ = device_token;
  } else {
    clear_has_device_token();
    device_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.Login.DeviceTokenRequest.device_token)
}

// optional .Im.Base.ClientType client_type = 3;
inline bool DeviceTokenRequest::has_client_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceTokenRequest::set_has_client_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceTokenRequest::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceTokenRequest::clear_client_type() {
  client_type_ = 1;
  clear_has_client_type();
}
inline ::Im::Base::ClientType DeviceTokenRequest::client_type() const {
  // @@protoc_insertion_point(field_get:Im.Login.DeviceTokenRequest.client_type)
  return static_cast< ::Im::Base::ClientType >(client_type_);
}
inline void DeviceTokenRequest::set_client_type(::Im::Base::ClientType value) {
  assert(::Im::Base::ClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:Im.Login.DeviceTokenRequest.client_type)
}

// optional bytes attach_data = 4;
inline bool DeviceTokenRequest::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceTokenRequest::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeviceTokenRequest::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeviceTokenRequest::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& DeviceTokenRequest::attach_data() const {
  // @@protoc_insertion_point(field_get:Im.Login.DeviceTokenRequest.attach_data)
  return *attach_data_;
}
inline void DeviceTokenRequest::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:Im.Login.DeviceTokenRequest.attach_data)
}
inline void DeviceTokenRequest::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.Login.DeviceTokenRequest.attach_data)
}
inline void DeviceTokenRequest::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.Login.DeviceTokenRequest.attach_data)
}
inline ::std::string* DeviceTokenRequest::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.Login.DeviceTokenRequest.attach_data)
  return attach_data_;
}
inline ::std::string* DeviceTokenRequest::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceTokenRequest::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.Login.DeviceTokenRequest.attach_data)
}

// -------------------------------------------------------------------

// DeviceTokenResponse

// required uint32 user_id = 1;
inline bool DeviceTokenResponse::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceTokenResponse::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceTokenResponse::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceTokenResponse::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 DeviceTokenResponse::user_id() const {
  // @@protoc_insertion_point(field_get:Im.Login.DeviceTokenResponse.user_id)
  return user_id_;
}
inline void DeviceTokenResponse::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.Login.DeviceTokenResponse.user_id)
}

// required bytes attach_data = 2;
inline bool DeviceTokenResponse::has_attach_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceTokenResponse::set_has_attach_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceTokenResponse::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceTokenResponse::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& DeviceTokenResponse::attach_data() const {
  // @@protoc_insertion_point(field_get:Im.Login.DeviceTokenResponse.attach_data)
  return *attach_data_;
}
inline void DeviceTokenResponse::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:Im.Login.DeviceTokenResponse.attach_data)
}
inline void DeviceTokenResponse::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.Login.DeviceTokenResponse.attach_data)
}
inline void DeviceTokenResponse::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.Login.DeviceTokenResponse.attach_data)
}
inline ::std::string* DeviceTokenResponse::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.Login.DeviceTokenResponse.attach_data)
  return attach_data_;
}
inline ::std::string* DeviceTokenResponse::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceTokenResponse::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.Login.DeviceTokenResponse.attach_data)
}

// -------------------------------------------------------------------

// KickPCClientRequest

// required uint32 user_id = 1;
inline bool KickPCClientRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KickPCClientRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KickPCClientRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KickPCClientRequest::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 KickPCClientRequest::user_id() const {
  // @@protoc_insertion_point(field_get:Im.Login.KickPCClientRequest.user_id)
  return user_id_;
}
inline void KickPCClientRequest::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.Login.KickPCClientRequest.user_id)
}

// -------------------------------------------------------------------

// KickPCCLientResponse

// required uint32 user_id = 1;
inline bool KickPCCLientResponse::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KickPCCLientResponse::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KickPCCLientResponse::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KickPCCLientResponse::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 KickPCCLientResponse::user_id() const {
  // @@protoc_insertion_point(field_get:Im.Login.KickPCCLientResponse.user_id)
  return user_id_;
}
inline void KickPCCLientResponse::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.Login.KickPCCLientResponse.user_id)
}

// required uint32 result_code = 2;
inline bool KickPCCLientResponse::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KickPCCLientResponse::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KickPCCLientResponse::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KickPCCLientResponse::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 KickPCCLientResponse::result_code() const {
  // @@protoc_insertion_point(field_get:Im.Login.KickPCCLientResponse.result_code)
  return result_code_;
}
inline void KickPCCLientResponse::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:Im.Login.KickPCCLientResponse.result_code)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Login
}  // namespace Im

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Im_2eLogin_2eproto__INCLUDED
