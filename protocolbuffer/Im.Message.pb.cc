// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Im.Message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Im.Message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Im {
namespace Message {

namespace {

const ::google::protobuf::Descriptor* MessageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageDataAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageDataAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageDataReadAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageDataReadAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageDataReadNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageDataReadNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientTimeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientTimeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientTimeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientTimeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnreadMsgCntRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnreadMsgCntRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnreadMsgCntResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnreadMsgCntResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMsgListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMsgListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMsgListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMsgListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLatestMsgIdResquest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLatestMsgIdResquest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLatestMsgIdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLatestMsgIdResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMsgByIdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMsgByIdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMsgByIdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMsgByIdResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Im_2eMessage_2eproto() {
  protobuf_AddDesc_Im_2eMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Im.Message.proto");
  GOOGLE_CHECK(file != NULL);
  MessageData_descriptor_ = file->message_type(0);
  static const int MessageData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, to_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, msg_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, attach_data_),
  };
  MessageData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageData_descriptor_,
      MessageData::default_instance_,
      MessageData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageData));
  MessageDataAck_descriptor_ = file->message_type(1);
  static const int MessageDataAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDataAck, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDataAck, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDataAck, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDataAck, session_type_),
  };
  MessageDataAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageDataAck_descriptor_,
      MessageDataAck::default_instance_,
      MessageDataAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDataAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDataAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageDataAck));
  MessageDataReadAck_descriptor_ = file->message_type(2);
  static const int MessageDataReadAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDataReadAck, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDataReadAck, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDataReadAck, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDataReadAck, session_type_),
  };
  MessageDataReadAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageDataReadAck_descriptor_,
      MessageDataReadAck::default_instance_,
      MessageDataReadAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDataReadAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDataReadAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageDataReadAck));
  MessageDataReadNotify_descriptor_ = file->message_type(3);
  static const int MessageDataReadNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDataReadNotify, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDataReadNotify, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDataReadNotify, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDataReadNotify, session_type_),
  };
  MessageDataReadNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageDataReadNotify_descriptor_,
      MessageDataReadNotify::default_instance_,
      MessageDataReadNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDataReadNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDataReadNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageDataReadNotify));
  ClientTimeRequest_descriptor_ = file->message_type(4);
  static const int ClientTimeRequest_offsets_[1] = {
  };
  ClientTimeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientTimeRequest_descriptor_,
      ClientTimeRequest::default_instance_,
      ClientTimeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientTimeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientTimeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientTimeRequest));
  ClientTimeResponse_descriptor_ = file->message_type(5);
  static const int ClientTimeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientTimeResponse, server_time_),
  };
  ClientTimeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientTimeResponse_descriptor_,
      ClientTimeResponse::default_instance_,
      ClientTimeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientTimeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientTimeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientTimeResponse));
  UnreadMsgCntRequest_descriptor_ = file->message_type(6);
  static const int UnreadMsgCntRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadMsgCntRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadMsgCntRequest, attach_data_),
  };
  UnreadMsgCntRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnreadMsgCntRequest_descriptor_,
      UnreadMsgCntRequest::default_instance_,
      UnreadMsgCntRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadMsgCntRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadMsgCntRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnreadMsgCntRequest));
  UnreadMsgCntResponse_descriptor_ = file->message_type(7);
  static const int UnreadMsgCntResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadMsgCntResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadMsgCntResponse, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadMsgCntResponse, unread_info_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadMsgCntResponse, attach_data_),
  };
  UnreadMsgCntResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnreadMsgCntResponse_descriptor_,
      UnreadMsgCntResponse::default_instance_,
      UnreadMsgCntResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadMsgCntResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadMsgCntResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnreadMsgCntResponse));
  GetMsgListRequest_descriptor_ = file->message_type(8);
  static const int GetMsgListRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgListRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgListRequest, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgListRequest, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgListRequest, msg_id_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgListRequest, msg_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgListRequest, attach_data_),
  };
  GetMsgListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMsgListRequest_descriptor_,
      GetMsgListRequest::default_instance_,
      GetMsgListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMsgListRequest));
  GetMsgListResponse_descriptor_ = file->message_type(9);
  static const int GetMsgListResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgListResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgListResponse, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgListResponse, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgListResponse, msg_id_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgListResponse, msg_info_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgListResponse, attach_data_),
  };
  GetMsgListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMsgListResponse_descriptor_,
      GetMsgListResponse::default_instance_,
      GetMsgListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMsgListResponse));
  GetLatestMsgIdResquest_descriptor_ = file->message_type(10);
  static const int GetLatestMsgIdResquest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestMsgIdResquest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestMsgIdResquest, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestMsgIdResquest, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestMsgIdResquest, msg_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestMsgIdResquest, attach_data_),
  };
  GetLatestMsgIdResquest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLatestMsgIdResquest_descriptor_,
      GetLatestMsgIdResquest::default_instance_,
      GetLatestMsgIdResquest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestMsgIdResquest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestMsgIdResquest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLatestMsgIdResquest));
  GetLatestMsgIdResponse_descriptor_ = file->message_type(11);
  static const int GetLatestMsgIdResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestMsgIdResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestMsgIdResponse, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestMsgIdResponse, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestMsgIdResponse, latest_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestMsgIdResponse, attach_data_),
  };
  GetLatestMsgIdResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLatestMsgIdResponse_descriptor_,
      GetLatestMsgIdResponse::default_instance_,
      GetLatestMsgIdResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestMsgIdResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestMsgIdResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLatestMsgIdResponse));
  GetMsgByIdRequest_descriptor_ = file->message_type(12);
  static const int GetMsgByIdRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgByIdRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgByIdRequest, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgByIdRequest, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgByIdRequest, msg_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgByIdRequest, attach_data_),
  };
  GetMsgByIdRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMsgByIdRequest_descriptor_,
      GetMsgByIdRequest::default_instance_,
      GetMsgByIdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgByIdRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgByIdRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMsgByIdRequest));
  GetMsgByIdResponse_descriptor_ = file->message_type(13);
  static const int GetMsgByIdResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgByIdResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgByIdResponse, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgByIdResponse, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgByIdResponse, msg_info_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgByIdResponse, attach_data_),
  };
  GetMsgByIdResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMsgByIdResponse_descriptor_,
      GetMsgByIdResponse::default_instance_,
      GetMsgByIdResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgByIdResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMsgByIdResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMsgByIdResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Im_2eMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageData_descriptor_, &MessageData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageDataAck_descriptor_, &MessageDataAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageDataReadAck_descriptor_, &MessageDataReadAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageDataReadNotify_descriptor_, &MessageDataReadNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientTimeRequest_descriptor_, &ClientTimeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientTimeResponse_descriptor_, &ClientTimeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnreadMsgCntRequest_descriptor_, &UnreadMsgCntRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnreadMsgCntResponse_descriptor_, &UnreadMsgCntResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMsgListRequest_descriptor_, &GetMsgListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMsgListResponse_descriptor_, &GetMsgListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLatestMsgIdResquest_descriptor_, &GetLatestMsgIdResquest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLatestMsgIdResponse_descriptor_, &GetLatestMsgIdResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMsgByIdRequest_descriptor_, &GetMsgByIdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMsgByIdResponse_descriptor_, &GetMsgByIdResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Im_2eMessage_2eproto() {
  delete MessageData::default_instance_;
  delete MessageData_reflection_;
  delete MessageDataAck::default_instance_;
  delete MessageDataAck_reflection_;
  delete MessageDataReadAck::default_instance_;
  delete MessageDataReadAck_reflection_;
  delete MessageDataReadNotify::default_instance_;
  delete MessageDataReadNotify_reflection_;
  delete ClientTimeRequest::default_instance_;
  delete ClientTimeRequest_reflection_;
  delete ClientTimeResponse::default_instance_;
  delete ClientTimeResponse_reflection_;
  delete UnreadMsgCntRequest::default_instance_;
  delete UnreadMsgCntRequest_reflection_;
  delete UnreadMsgCntResponse::default_instance_;
  delete UnreadMsgCntResponse_reflection_;
  delete GetMsgListRequest::default_instance_;
  delete GetMsgListRequest_reflection_;
  delete GetMsgListResponse::default_instance_;
  delete GetMsgListResponse_reflection_;
  delete GetLatestMsgIdResquest::default_instance_;
  delete GetLatestMsgIdResquest_reflection_;
  delete GetLatestMsgIdResponse::default_instance_;
  delete GetLatestMsgIdResponse_reflection_;
  delete GetMsgByIdRequest::default_instance_;
  delete GetMsgByIdRequest_reflection_;
  delete GetMsgByIdResponse::default_instance_;
  delete GetMsgByIdResponse_reflection_;
}

void protobuf_AddDesc_Im_2eMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Im::Base::protobuf_AddDesc_Im_2eBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020Im.Message.proto\022\nIm.Message\032\rIm.Base."
    "proto\"\252\001\n\013MessageData\022\016\n\006msg_id\030\001 \002(\r\022\024\n"
    "\014from_user_id\030\002 \002(\r\022\025\n\rto_session_id\030\003 \002"
    "(\r\022\023\n\013create_time\030\004 \002(\r\022\"\n\010msg_type\030\005 \002("
    "\0162\020.Im.Base.MsgType\022\020\n\010msg_data\030\006 \002(\014\022\023\n"
    "\013attach_data\030\007 \001(\014\"q\n\016MessageDataAck\022\017\n\007"
    "user_id\030\001 \002(\r\022\022\n\nsession_id\030\002 \002(\r\022\016\n\006msg"
    "_id\030\003 \002(\r\022*\n\014session_type\030\004 \002(\0162\024.Im.Bas"
    "e.SessionType\"u\n\022MessageDataReadAck\022\017\n\007u"
    "ser_id\030\001 \002(\r\022\022\n\nsession_id\030\002 \002(\r\022\016\n\006msg_"
    "id\030\003 \002(\r\022*\n\014session_type\030\004 \002(\0162\024.Im.Base"
    ".SessionType\"x\n\025MessageDataReadNotify\022\017\n"
    "\007user_id\030\001 \002(\r\022\022\n\nsession_id\030\002 \002(\r\022\016\n\006ms"
    "g_id\030\003 \002(\r\022*\n\014session_type\030\004 \002(\0162\024.Im.Ba"
    "se.SessionType\"\023\n\021ClientTimeRequest\")\n\022C"
    "lientTimeResponse\022\023\n\013server_time\030\001 \002(\r\";"
    "\n\023UnreadMsgCntRequest\022\017\n\007user_id\030\001 \002(\r\022\023"
    "\n\013attach_data\030\002 \001(\014\"\200\001\n\024UnreadMsgCntResp"
    "onse\022\017\n\007user_id\030\001 \002(\r\022\023\n\013total_count\030\002 \002"
    "(\r\022-\n\020unread_info_list\030\003 \003(\0132\023.Im.Base.U"
    "nreadInfo\022\023\n\013attach_data\030\004 \001(\014\"\242\001\n\021GetMs"
    "gListRequest\022\017\n\007user_id\030\001 \002(\r\022*\n\014session"
    "_type\030\002 \002(\0162\024.Im.Base.SessionType\022\022\n\nses"
    "sion_id\030\003 \002(\r\022\024\n\014msg_id_begin\030\004 \002(\r\022\021\n\tm"
    "sg_count\030\005 \002(\r\022\023\n\013attach_data\030\006 \001(\014\"\271\001\n\022"
    "GetMsgListResponse\022\017\n\007user_id\030\001 \002(\r\022*\n\014s"
    "ession_type\030\002 \002(\0162\024.Im.Base.SessionType\022"
    "\022\n\nsession_id\030\003 \002(\r\022\024\n\014msg_id_begin\030\004 \002("
    "\r\022\'\n\rmsg_info_list\030\005 \003(\0132\020.Im.Base.MsgIn"
    "fo\022\023\n\013attach_data\030\006 \001(\014\"\223\001\n\026GetLatestMsg"
    "IdResquest\022\017\n\007user_id\030\001 \002(\r\022*\n\014session_t"
    "ype\030\002 \002(\0162\024.Im.Base.SessionType\022\022\n\nsessi"
    "on_id\030\003 \002(\r\022\023\n\013msg_id_list\030\004 \003(\r\022\023\n\013atta"
    "ch_data\030\005 \001(\014\"\225\001\n\026GetLatestMsgIdResponse"
    "\022\017\n\007user_id\030\001 \002(\r\022*\n\014session_type\030\002 \002(\0162"
    "\024.Im.Base.SessionType\022\022\n\nsession_id\030\003 \002("
    "\r\022\025\n\rlatest_msg_id\030\004 \002(\r\022\023\n\013attach_data\030"
    "\005 \001(\014\"\216\001\n\021GetMsgByIdRequest\022\017\n\007user_id\030\001"
    " \002(\r\022*\n\014session_type\030\002 \002(\0162\024.Im.Base.Ses"
    "sionType\022\022\n\nsession_id\030\003 \002(\r\022\023\n\013msg_id_l"
    "ist\030\004 \003(\r\022\023\n\013attach_data\030\005 \001(\014\"\243\001\n\022GetMs"
    "gByIdResponse\022\017\n\007user_id\030\001 \002(\r\022*\n\014sessio"
    "n_type\030\002 \002(\0162\024.Im.Base.SessionType\022\022\n\nse"
    "ssion_id\030\003 \002(\r\022\'\n\rmsg_info_list\030\004 \003(\0132\020."
    "Im.Base.MsgInfo\022\023\n\013attach_data\030\005 \001(\014B)\n\'"
    "com.example.user.myapplication.protobuf", 1839);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Im.Message.proto", &protobuf_RegisterTypes);
  MessageData::default_instance_ = new MessageData();
  MessageDataAck::default_instance_ = new MessageDataAck();
  MessageDataReadAck::default_instance_ = new MessageDataReadAck();
  MessageDataReadNotify::default_instance_ = new MessageDataReadNotify();
  ClientTimeRequest::default_instance_ = new ClientTimeRequest();
  ClientTimeResponse::default_instance_ = new ClientTimeResponse();
  UnreadMsgCntRequest::default_instance_ = new UnreadMsgCntRequest();
  UnreadMsgCntResponse::default_instance_ = new UnreadMsgCntResponse();
  GetMsgListRequest::default_instance_ = new GetMsgListRequest();
  GetMsgListResponse::default_instance_ = new GetMsgListResponse();
  GetLatestMsgIdResquest::default_instance_ = new GetLatestMsgIdResquest();
  GetLatestMsgIdResponse::default_instance_ = new GetLatestMsgIdResponse();
  GetMsgByIdRequest::default_instance_ = new GetMsgByIdRequest();
  GetMsgByIdResponse::default_instance_ = new GetMsgByIdResponse();
  MessageData::default_instance_->InitAsDefaultInstance();
  MessageDataAck::default_instance_->InitAsDefaultInstance();
  MessageDataReadAck::default_instance_->InitAsDefaultInstance();
  MessageDataReadNotify::default_instance_->InitAsDefaultInstance();
  ClientTimeRequest::default_instance_->InitAsDefaultInstance();
  ClientTimeResponse::default_instance_->InitAsDefaultInstance();
  UnreadMsgCntRequest::default_instance_->InitAsDefaultInstance();
  UnreadMsgCntResponse::default_instance_->InitAsDefaultInstance();
  GetMsgListRequest::default_instance_->InitAsDefaultInstance();
  GetMsgListResponse::default_instance_->InitAsDefaultInstance();
  GetLatestMsgIdResquest::default_instance_->InitAsDefaultInstance();
  GetLatestMsgIdResponse::default_instance_->InitAsDefaultInstance();
  GetMsgByIdRequest::default_instance_->InitAsDefaultInstance();
  GetMsgByIdResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Im_2eMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Im_2eMessage_2eproto {
  StaticDescriptorInitializer_Im_2eMessage_2eproto() {
    protobuf_AddDesc_Im_2eMessage_2eproto();
  }
} static_descriptor_initializer_Im_2eMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MessageData::kMsgIdFieldNumber;
const int MessageData::kFromUserIdFieldNumber;
const int MessageData::kToSessionIdFieldNumber;
const int MessageData::kCreateTimeFieldNumber;
const int MessageData::kMsgTypeFieldNumber;
const int MessageData::kMsgDataFieldNumber;
const int MessageData::kAttachDataFieldNumber;
#endif  // !_MSC_VER

MessageData::MessageData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Message.MessageData)
}

void MessageData::InitAsDefaultInstance() {
}

MessageData::MessageData(const MessageData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Message.MessageData)
}

void MessageData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_id_ = 0u;
  from_user_id_ = 0u;
  to_session_id_ = 0u;
  create_time_ = 0u;
  msg_type_ = 1;
  msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageData::~MessageData() {
  // @@protoc_insertion_point(destructor:Im.Message.MessageData)
  SharedDtor();
}

void MessageData::SharedDtor() {
  if (msg_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_data_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void MessageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageData_descriptor_;
}

const MessageData& MessageData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eMessage_2eproto();
  return *default_instance_;
}

MessageData* MessageData::default_instance_ = NULL;

MessageData* MessageData::New() const {
  return new MessageData;
}

void MessageData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MessageData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(msg_id_, create_time_);
    msg_type_ = 1;
    if (has_msg_data()) {
      if (msg_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_data_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Message.MessageData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 msg_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_from_user_id;
        break;
      }

      // required uint32 from_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_from_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_to_session_id;
        break;
      }

      // required uint32 to_session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_to_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_session_id_)));
          set_has_to_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 4;
      case 4: {
        if (tag == 32) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_msg_type;
        break;
      }

      // required .Im.Base.MsgType msg_type = 5;
      case 5: {
        if (tag == 40) {
         parse_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::MsgType_IsValid(value)) {
            set_msg_type(static_cast< ::Im::Base::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_msg_data;
        break;
      }

      // required bytes msg_data = 6;
      case 6: {
        if (tag == 50) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 7;
      case 7: {
        if (tag == 58) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Message.MessageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Message.MessageData)
  return false;
#undef DO_
}

void MessageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Message.MessageData)
  // required uint32 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_id(), output);
  }

  // required uint32 from_user_id = 2;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->from_user_id(), output);
  }

  // required uint32 to_session_id = 3;
  if (has_to_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->to_session_id(), output);
  }

  // required uint32 create_time = 4;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->create_time(), output);
  }

  // required .Im.Base.MsgType msg_type = 5;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->msg_type(), output);
  }

  // required bytes msg_data = 6;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->msg_data(), output);
  }

  // optional bytes attach_data = 7;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Message.MessageData)
}

::google::protobuf::uint8* MessageData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Message.MessageData)
  // required uint32 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_id(), target);
  }

  // required uint32 from_user_id = 2;
  if (has_from_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->from_user_id(), target);
  }

  // required uint32 to_session_id = 3;
  if (has_to_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->to_session_id(), target);
  }

  // required uint32 create_time = 4;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->create_time(), target);
  }

  // required .Im.Base.MsgType msg_type = 5;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->msg_type(), target);
  }

  // required bytes msg_data = 6;
  if (has_msg_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->msg_data(), target);
  }

  // optional bytes attach_data = 7;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Message.MessageData)
  return target;
}

int MessageData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 msg_id = 1;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

    // required uint32 from_user_id = 2;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_user_id());
    }

    // required uint32 to_session_id = 3;
    if (has_to_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_session_id());
    }

    // required uint32 create_time = 4;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // required .Im.Base.MsgType msg_type = 5;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // required bytes msg_data = 6;
    if (has_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_data());
    }

    // optional bytes attach_data = 7;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageData::MergeFrom(const MessageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_to_session_id()) {
      set_to_session_id(from.to_session_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_msg_data()) {
      set_msg_data(from.msg_data());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageData::CopyFrom(const MessageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void MessageData::Swap(MessageData* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(to_session_id_, other->to_session_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(msg_data_, other->msg_data_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageData_descriptor_;
  metadata.reflection = MessageData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageDataAck::kUserIdFieldNumber;
const int MessageDataAck::kSessionIdFieldNumber;
const int MessageDataAck::kMsgIdFieldNumber;
const int MessageDataAck::kSessionTypeFieldNumber;
#endif  // !_MSC_VER

MessageDataAck::MessageDataAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Message.MessageDataAck)
}

void MessageDataAck::InitAsDefaultInstance() {
}

MessageDataAck::MessageDataAck(const MessageDataAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Message.MessageDataAck)
}

void MessageDataAck::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  session_id_ = 0u;
  msg_id_ = 0u;
  session_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageDataAck::~MessageDataAck() {
  // @@protoc_insertion_point(destructor:Im.Message.MessageDataAck)
  SharedDtor();
}

void MessageDataAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageDataAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageDataAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageDataAck_descriptor_;
}

const MessageDataAck& MessageDataAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eMessage_2eproto();
  return *default_instance_;
}

MessageDataAck* MessageDataAck::default_instance_ = NULL;

MessageDataAck* MessageDataAck::New() const {
  return new MessageDataAck;
}

void MessageDataAck::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MessageDataAck*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, msg_id_);
    session_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageDataAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Message.MessageDataAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // required uint32 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_session_type;
        break;
      }

      // required .Im.Base.SessionType session_type = 4;
      case 4: {
        if (tag == 32) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::Im::Base::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Message.MessageDataAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Message.MessageDataAck)
  return false;
#undef DO_
}

void MessageDataAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Message.MessageDataAck)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_id(), output);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_id(), output);
  }

  // required .Im.Base.SessionType session_type = 4;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->session_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Message.MessageDataAck)
}

::google::protobuf::uint8* MessageDataAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Message.MessageDataAck)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->session_id(), target);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->msg_id(), target);
  }

  // required .Im.Base.SessionType session_type = 4;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->session_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Message.MessageDataAck)
  return target;
}

int MessageDataAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // required uint32 msg_id = 3;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

    // required .Im.Base.SessionType session_type = 4;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageDataAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageDataAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageDataAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageDataAck::MergeFrom(const MessageDataAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageDataAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageDataAck::CopyFrom(const MessageDataAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageDataAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MessageDataAck::Swap(MessageDataAck* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageDataAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageDataAck_descriptor_;
  metadata.reflection = MessageDataAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageDataReadAck::kUserIdFieldNumber;
const int MessageDataReadAck::kSessionIdFieldNumber;
const int MessageDataReadAck::kMsgIdFieldNumber;
const int MessageDataReadAck::kSessionTypeFieldNumber;
#endif  // !_MSC_VER

MessageDataReadAck::MessageDataReadAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Message.MessageDataReadAck)
}

void MessageDataReadAck::InitAsDefaultInstance() {
}

MessageDataReadAck::MessageDataReadAck(const MessageDataReadAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Message.MessageDataReadAck)
}

void MessageDataReadAck::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  session_id_ = 0u;
  msg_id_ = 0u;
  session_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageDataReadAck::~MessageDataReadAck() {
  // @@protoc_insertion_point(destructor:Im.Message.MessageDataReadAck)
  SharedDtor();
}

void MessageDataReadAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageDataReadAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageDataReadAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageDataReadAck_descriptor_;
}

const MessageDataReadAck& MessageDataReadAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eMessage_2eproto();
  return *default_instance_;
}

MessageDataReadAck* MessageDataReadAck::default_instance_ = NULL;

MessageDataReadAck* MessageDataReadAck::New() const {
  return new MessageDataReadAck;
}

void MessageDataReadAck::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MessageDataReadAck*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, msg_id_);
    session_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageDataReadAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Message.MessageDataReadAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // required uint32 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_session_type;
        break;
      }

      // required .Im.Base.SessionType session_type = 4;
      case 4: {
        if (tag == 32) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::Im::Base::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Message.MessageDataReadAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Message.MessageDataReadAck)
  return false;
#undef DO_
}

void MessageDataReadAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Message.MessageDataReadAck)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_id(), output);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_id(), output);
  }

  // required .Im.Base.SessionType session_type = 4;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->session_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Message.MessageDataReadAck)
}

::google::protobuf::uint8* MessageDataReadAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Message.MessageDataReadAck)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->session_id(), target);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->msg_id(), target);
  }

  // required .Im.Base.SessionType session_type = 4;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->session_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Message.MessageDataReadAck)
  return target;
}

int MessageDataReadAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // required uint32 msg_id = 3;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

    // required .Im.Base.SessionType session_type = 4;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageDataReadAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageDataReadAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageDataReadAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageDataReadAck::MergeFrom(const MessageDataReadAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageDataReadAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageDataReadAck::CopyFrom(const MessageDataReadAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageDataReadAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MessageDataReadAck::Swap(MessageDataReadAck* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageDataReadAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageDataReadAck_descriptor_;
  metadata.reflection = MessageDataReadAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageDataReadNotify::kUserIdFieldNumber;
const int MessageDataReadNotify::kSessionIdFieldNumber;
const int MessageDataReadNotify::kMsgIdFieldNumber;
const int MessageDataReadNotify::kSessionTypeFieldNumber;
#endif  // !_MSC_VER

MessageDataReadNotify::MessageDataReadNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Message.MessageDataReadNotify)
}

void MessageDataReadNotify::InitAsDefaultInstance() {
}

MessageDataReadNotify::MessageDataReadNotify(const MessageDataReadNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Message.MessageDataReadNotify)
}

void MessageDataReadNotify::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  session_id_ = 0u;
  msg_id_ = 0u;
  session_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageDataReadNotify::~MessageDataReadNotify() {
  // @@protoc_insertion_point(destructor:Im.Message.MessageDataReadNotify)
  SharedDtor();
}

void MessageDataReadNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageDataReadNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageDataReadNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageDataReadNotify_descriptor_;
}

const MessageDataReadNotify& MessageDataReadNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eMessage_2eproto();
  return *default_instance_;
}

MessageDataReadNotify* MessageDataReadNotify::default_instance_ = NULL;

MessageDataReadNotify* MessageDataReadNotify::New() const {
  return new MessageDataReadNotify;
}

void MessageDataReadNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MessageDataReadNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, msg_id_);
    session_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageDataReadNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Message.MessageDataReadNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // required uint32 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_session_type;
        break;
      }

      // required .Im.Base.SessionType session_type = 4;
      case 4: {
        if (tag == 32) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::Im::Base::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Message.MessageDataReadNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Message.MessageDataReadNotify)
  return false;
#undef DO_
}

void MessageDataReadNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Message.MessageDataReadNotify)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_id(), output);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_id(), output);
  }

  // required .Im.Base.SessionType session_type = 4;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->session_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Message.MessageDataReadNotify)
}

::google::protobuf::uint8* MessageDataReadNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Message.MessageDataReadNotify)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->session_id(), target);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->msg_id(), target);
  }

  // required .Im.Base.SessionType session_type = 4;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->session_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Message.MessageDataReadNotify)
  return target;
}

int MessageDataReadNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // required uint32 msg_id = 3;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

    // required .Im.Base.SessionType session_type = 4;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageDataReadNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageDataReadNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageDataReadNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageDataReadNotify::MergeFrom(const MessageDataReadNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageDataReadNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageDataReadNotify::CopyFrom(const MessageDataReadNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageDataReadNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MessageDataReadNotify::Swap(MessageDataReadNotify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageDataReadNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageDataReadNotify_descriptor_;
  metadata.reflection = MessageDataReadNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClientTimeRequest::ClientTimeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Message.ClientTimeRequest)
}

void ClientTimeRequest::InitAsDefaultInstance() {
}

ClientTimeRequest::ClientTimeRequest(const ClientTimeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Message.ClientTimeRequest)
}

void ClientTimeRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientTimeRequest::~ClientTimeRequest() {
  // @@protoc_insertion_point(destructor:Im.Message.ClientTimeRequest)
  SharedDtor();
}

void ClientTimeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientTimeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientTimeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientTimeRequest_descriptor_;
}

const ClientTimeRequest& ClientTimeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eMessage_2eproto();
  return *default_instance_;
}

ClientTimeRequest* ClientTimeRequest::default_instance_ = NULL;

ClientTimeRequest* ClientTimeRequest::New() const {
  return new ClientTimeRequest;
}

void ClientTimeRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientTimeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Message.ClientTimeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Message.ClientTimeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Message.ClientTimeRequest)
  return false;
#undef DO_
}

void ClientTimeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Message.ClientTimeRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Message.ClientTimeRequest)
}

::google::protobuf::uint8* ClientTimeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Message.ClientTimeRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Message.ClientTimeRequest)
  return target;
}

int ClientTimeRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientTimeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientTimeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientTimeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientTimeRequest::MergeFrom(const ClientTimeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientTimeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientTimeRequest::CopyFrom(const ClientTimeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientTimeRequest::IsInitialized() const {

  return true;
}

void ClientTimeRequest::Swap(ClientTimeRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientTimeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientTimeRequest_descriptor_;
  metadata.reflection = ClientTimeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientTimeResponse::kServerTimeFieldNumber;
#endif  // !_MSC_VER

ClientTimeResponse::ClientTimeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Message.ClientTimeResponse)
}

void ClientTimeResponse::InitAsDefaultInstance() {
}

ClientTimeResponse::ClientTimeResponse(const ClientTimeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Message.ClientTimeResponse)
}

void ClientTimeResponse::SharedCtor() {
  _cached_size_ = 0;
  server_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientTimeResponse::~ClientTimeResponse() {
  // @@protoc_insertion_point(destructor:Im.Message.ClientTimeResponse)
  SharedDtor();
}

void ClientTimeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientTimeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientTimeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientTimeResponse_descriptor_;
}

const ClientTimeResponse& ClientTimeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eMessage_2eproto();
  return *default_instance_;
}

ClientTimeResponse* ClientTimeResponse::default_instance_ = NULL;

ClientTimeResponse* ClientTimeResponse::New() const {
  return new ClientTimeResponse;
}

void ClientTimeResponse::Clear() {
  server_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientTimeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Message.ClientTimeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 server_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Message.ClientTimeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Message.ClientTimeResponse)
  return false;
#undef DO_
}

void ClientTimeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Message.ClientTimeResponse)
  // required uint32 server_time = 1;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Message.ClientTimeResponse)
}

::google::protobuf::uint8* ClientTimeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Message.ClientTimeResponse)
  // required uint32 server_time = 1;
  if (has_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Message.ClientTimeResponse)
  return target;
}

int ClientTimeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 server_time = 1;
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientTimeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientTimeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientTimeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientTimeResponse::MergeFrom(const ClientTimeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientTimeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientTimeResponse::CopyFrom(const ClientTimeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientTimeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientTimeResponse::Swap(ClientTimeResponse* other) {
  if (other != this) {
    std::swap(server_time_, other->server_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientTimeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientTimeResponse_descriptor_;
  metadata.reflection = ClientTimeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnreadMsgCntRequest::kUserIdFieldNumber;
const int UnreadMsgCntRequest::kAttachDataFieldNumber;
#endif  // !_MSC_VER

UnreadMsgCntRequest::UnreadMsgCntRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Message.UnreadMsgCntRequest)
}

void UnreadMsgCntRequest::InitAsDefaultInstance() {
}

UnreadMsgCntRequest::UnreadMsgCntRequest(const UnreadMsgCntRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Message.UnreadMsgCntRequest)
}

void UnreadMsgCntRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnreadMsgCntRequest::~UnreadMsgCntRequest() {
  // @@protoc_insertion_point(destructor:Im.Message.UnreadMsgCntRequest)
  SharedDtor();
}

void UnreadMsgCntRequest::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void UnreadMsgCntRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnreadMsgCntRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnreadMsgCntRequest_descriptor_;
}

const UnreadMsgCntRequest& UnreadMsgCntRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eMessage_2eproto();
  return *default_instance_;
}

UnreadMsgCntRequest* UnreadMsgCntRequest::default_instance_ = NULL;

UnreadMsgCntRequest* UnreadMsgCntRequest::New() const {
  return new UnreadMsgCntRequest;
}

void UnreadMsgCntRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnreadMsgCntRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Message.UnreadMsgCntRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 2;
      case 2: {
        if (tag == 18) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Message.UnreadMsgCntRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Message.UnreadMsgCntRequest)
  return false;
#undef DO_
}

void UnreadMsgCntRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Message.UnreadMsgCntRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // optional bytes attach_data = 2;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Message.UnreadMsgCntRequest)
}

::google::protobuf::uint8* UnreadMsgCntRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Message.UnreadMsgCntRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // optional bytes attach_data = 2;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Message.UnreadMsgCntRequest)
  return target;
}

int UnreadMsgCntRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 2;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnreadMsgCntRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnreadMsgCntRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnreadMsgCntRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnreadMsgCntRequest::MergeFrom(const UnreadMsgCntRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnreadMsgCntRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnreadMsgCntRequest::CopyFrom(const UnreadMsgCntRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnreadMsgCntRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UnreadMsgCntRequest::Swap(UnreadMsgCntRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnreadMsgCntRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnreadMsgCntRequest_descriptor_;
  metadata.reflection = UnreadMsgCntRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnreadMsgCntResponse::kUserIdFieldNumber;
const int UnreadMsgCntResponse::kTotalCountFieldNumber;
const int UnreadMsgCntResponse::kUnreadInfoListFieldNumber;
const int UnreadMsgCntResponse::kAttachDataFieldNumber;
#endif  // !_MSC_VER

UnreadMsgCntResponse::UnreadMsgCntResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Message.UnreadMsgCntResponse)
}

void UnreadMsgCntResponse::InitAsDefaultInstance() {
}

UnreadMsgCntResponse::UnreadMsgCntResponse(const UnreadMsgCntResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Message.UnreadMsgCntResponse)
}

void UnreadMsgCntResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  total_count_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnreadMsgCntResponse::~UnreadMsgCntResponse() {
  // @@protoc_insertion_point(destructor:Im.Message.UnreadMsgCntResponse)
  SharedDtor();
}

void UnreadMsgCntResponse::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void UnreadMsgCntResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnreadMsgCntResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnreadMsgCntResponse_descriptor_;
}

const UnreadMsgCntResponse& UnreadMsgCntResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eMessage_2eproto();
  return *default_instance_;
}

UnreadMsgCntResponse* UnreadMsgCntResponse::default_instance_ = NULL;

UnreadMsgCntResponse* UnreadMsgCntResponse::New() const {
  return new UnreadMsgCntResponse;
}

void UnreadMsgCntResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UnreadMsgCntResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(user_id_, total_count_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  unread_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnreadMsgCntResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Message.UnreadMsgCntResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_count;
        break;
      }

      // required uint32 total_count = 2;
      case 2: {
        if (tag == 16) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_unread_info_list;
        break;
      }

      // repeated .Im.Base.UnreadInfo unread_info_list = 3;
      case 3: {
        if (tag == 26) {
         parse_unread_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unread_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_unread_info_list;
        if (input->ExpectTag(34)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 4;
      case 4: {
        if (tag == 34) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Message.UnreadMsgCntResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Message.UnreadMsgCntResponse)
  return false;
#undef DO_
}

void UnreadMsgCntResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Message.UnreadMsgCntResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 total_count = 2;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_count(), output);
  }

  // repeated .Im.Base.UnreadInfo unread_info_list = 3;
  for (int i = 0; i < this->unread_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->unread_info_list(i), output);
  }

  // optional bytes attach_data = 4;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Message.UnreadMsgCntResponse)
}

::google::protobuf::uint8* UnreadMsgCntResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Message.UnreadMsgCntResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 total_count = 2;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_count(), target);
  }

  // repeated .Im.Base.UnreadInfo unread_info_list = 3;
  for (int i = 0; i < this->unread_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->unread_info_list(i), target);
  }

  // optional bytes attach_data = 4;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Message.UnreadMsgCntResponse)
  return target;
}

int UnreadMsgCntResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 total_count = 2;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_count());
    }

    // optional bytes attach_data = 4;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .Im.Base.UnreadInfo unread_info_list = 3;
  total_size += 1 * this->unread_info_list_size();
  for (int i = 0; i < this->unread_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unread_info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnreadMsgCntResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnreadMsgCntResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnreadMsgCntResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnreadMsgCntResponse::MergeFrom(const UnreadMsgCntResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  unread_info_list_.MergeFrom(from.unread_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnreadMsgCntResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnreadMsgCntResponse::CopyFrom(const UnreadMsgCntResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnreadMsgCntResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->unread_info_list())) return false;
  return true;
}

void UnreadMsgCntResponse::Swap(UnreadMsgCntResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(total_count_, other->total_count_);
    unread_info_list_.Swap(&other->unread_info_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnreadMsgCntResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnreadMsgCntResponse_descriptor_;
  metadata.reflection = UnreadMsgCntResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMsgListRequest::kUserIdFieldNumber;
const int GetMsgListRequest::kSessionTypeFieldNumber;
const int GetMsgListRequest::kSessionIdFieldNumber;
const int GetMsgListRequest::kMsgIdBeginFieldNumber;
const int GetMsgListRequest::kMsgCountFieldNumber;
const int GetMsgListRequest::kAttachDataFieldNumber;
#endif  // !_MSC_VER

GetMsgListRequest::GetMsgListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Message.GetMsgListRequest)
}

void GetMsgListRequest::InitAsDefaultInstance() {
}

GetMsgListRequest::GetMsgListRequest(const GetMsgListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Message.GetMsgListRequest)
}

void GetMsgListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  msg_id_begin_ = 0u;
  msg_count_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMsgListRequest::~GetMsgListRequest() {
  // @@protoc_insertion_point(destructor:Im.Message.GetMsgListRequest)
  SharedDtor();
}

void GetMsgListRequest::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void GetMsgListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMsgListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMsgListRequest_descriptor_;
}

const GetMsgListRequest& GetMsgListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eMessage_2eproto();
  return *default_instance_;
}

GetMsgListRequest* GetMsgListRequest::default_instance_ = NULL;

GetMsgListRequest* GetMsgListRequest::New() const {
  return new GetMsgListRequest;
}

void GetMsgListRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetMsgListRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(session_id_, msg_id_begin_);
    user_id_ = 0u;
    session_type_ = 1;
    msg_count_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMsgListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Message.GetMsgListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .Im.Base.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::Im::Base::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_id_begin;
        break;
      }

      // required uint32 msg_id_begin = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_id_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_begin_)));
          set_has_msg_id_begin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_msg_count;
        break;
      }

      // required uint32 msg_count = 5;
      case 5: {
        if (tag == 40) {
         parse_msg_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_count_)));
          set_has_msg_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 6;
      case 6: {
        if (tag == 50) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Message.GetMsgListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Message.GetMsgListRequest)
  return false;
#undef DO_
}

void GetMsgListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Message.GetMsgListRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .Im.Base.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // required uint32 msg_id_begin = 4;
  if (has_msg_id_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msg_id_begin(), output);
  }

  // required uint32 msg_count = 5;
  if (has_msg_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->msg_count(), output);
  }

  // optional bytes attach_data = 6;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Message.GetMsgListRequest)
}

::google::protobuf::uint8* GetMsgListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Message.GetMsgListRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .Im.Base.SessionType session_type = 2;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->session_type(), target);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->session_id(), target);
  }

  // required uint32 msg_id_begin = 4;
  if (has_msg_id_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->msg_id_begin(), target);
  }

  // required uint32 msg_count = 5;
  if (has_msg_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->msg_count(), target);
  }

  // optional bytes attach_data = 6;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Message.GetMsgListRequest)
  return target;
}

int GetMsgListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .Im.Base.SessionType session_type = 2;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // required uint32 msg_id_begin = 4;
    if (has_msg_id_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id_begin());
    }

    // required uint32 msg_count = 5;
    if (has_msg_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_count());
    }

    // optional bytes attach_data = 6;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMsgListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMsgListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMsgListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMsgListRequest::MergeFrom(const GetMsgListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_msg_id_begin()) {
      set_msg_id_begin(from.msg_id_begin());
    }
    if (from.has_msg_count()) {
      set_msg_count(from.msg_count());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMsgListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMsgListRequest::CopyFrom(const GetMsgListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMsgListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GetMsgListRequest::Swap(GetMsgListRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_id_, other->session_id_);
    std::swap(msg_id_begin_, other->msg_id_begin_);
    std::swap(msg_count_, other->msg_count_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMsgListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMsgListRequest_descriptor_;
  metadata.reflection = GetMsgListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMsgListResponse::kUserIdFieldNumber;
const int GetMsgListResponse::kSessionTypeFieldNumber;
const int GetMsgListResponse::kSessionIdFieldNumber;
const int GetMsgListResponse::kMsgIdBeginFieldNumber;
const int GetMsgListResponse::kMsgInfoListFieldNumber;
const int GetMsgListResponse::kAttachDataFieldNumber;
#endif  // !_MSC_VER

GetMsgListResponse::GetMsgListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Message.GetMsgListResponse)
}

void GetMsgListResponse::InitAsDefaultInstance() {
}

GetMsgListResponse::GetMsgListResponse(const GetMsgListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Message.GetMsgListResponse)
}

void GetMsgListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  msg_id_begin_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMsgListResponse::~GetMsgListResponse() {
  // @@protoc_insertion_point(destructor:Im.Message.GetMsgListResponse)
  SharedDtor();
}

void GetMsgListResponse::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void GetMsgListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMsgListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMsgListResponse_descriptor_;
}

const GetMsgListResponse& GetMsgListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eMessage_2eproto();
  return *default_instance_;
}

GetMsgListResponse* GetMsgListResponse::default_instance_ = NULL;

GetMsgListResponse* GetMsgListResponse::New() const {
  return new GetMsgListResponse;
}

void GetMsgListResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetMsgListResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(session_id_, msg_id_begin_);
    user_id_ = 0u;
    session_type_ = 1;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  msg_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMsgListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Message.GetMsgListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .Im.Base.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::Im::Base::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_id_begin;
        break;
      }

      // required uint32 msg_id_begin = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_id_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_begin_)));
          set_has_msg_id_begin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msg_info_list;
        break;
      }

      // repeated .Im.Base.MsgInfo msg_info_list = 5;
      case 5: {
        if (tag == 42) {
         parse_msg_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msg_info_list;
        if (input->ExpectTag(50)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 6;
      case 6: {
        if (tag == 50) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Message.GetMsgListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Message.GetMsgListResponse)
  return false;
#undef DO_
}

void GetMsgListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Message.GetMsgListResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .Im.Base.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // required uint32 msg_id_begin = 4;
  if (has_msg_id_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msg_id_begin(), output);
  }

  // repeated .Im.Base.MsgInfo msg_info_list = 5;
  for (int i = 0; i < this->msg_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->msg_info_list(i), output);
  }

  // optional bytes attach_data = 6;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Message.GetMsgListResponse)
}

::google::protobuf::uint8* GetMsgListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Message.GetMsgListResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .Im.Base.SessionType session_type = 2;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->session_type(), target);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->session_id(), target);
  }

  // required uint32 msg_id_begin = 4;
  if (has_msg_id_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->msg_id_begin(), target);
  }

  // repeated .Im.Base.MsgInfo msg_info_list = 5;
  for (int i = 0; i < this->msg_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->msg_info_list(i), target);
  }

  // optional bytes attach_data = 6;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Message.GetMsgListResponse)
  return target;
}

int GetMsgListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .Im.Base.SessionType session_type = 2;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // required uint32 msg_id_begin = 4;
    if (has_msg_id_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id_begin());
    }

    // optional bytes attach_data = 6;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .Im.Base.MsgInfo msg_info_list = 5;
  total_size += 1 * this->msg_info_list_size();
  for (int i = 0; i < this->msg_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg_info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMsgListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMsgListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMsgListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMsgListResponse::MergeFrom(const GetMsgListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_info_list_.MergeFrom(from.msg_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_msg_id_begin()) {
      set_msg_id_begin(from.msg_id_begin());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMsgListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMsgListResponse::CopyFrom(const GetMsgListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMsgListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->msg_info_list())) return false;
  return true;
}

void GetMsgListResponse::Swap(GetMsgListResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_id_, other->session_id_);
    std::swap(msg_id_begin_, other->msg_id_begin_);
    msg_info_list_.Swap(&other->msg_info_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMsgListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMsgListResponse_descriptor_;
  metadata.reflection = GetMsgListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLatestMsgIdResquest::kUserIdFieldNumber;
const int GetLatestMsgIdResquest::kSessionTypeFieldNumber;
const int GetLatestMsgIdResquest::kSessionIdFieldNumber;
const int GetLatestMsgIdResquest::kMsgIdListFieldNumber;
const int GetLatestMsgIdResquest::kAttachDataFieldNumber;
#endif  // !_MSC_VER

GetLatestMsgIdResquest::GetLatestMsgIdResquest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Message.GetLatestMsgIdResquest)
}

void GetLatestMsgIdResquest::InitAsDefaultInstance() {
}

GetLatestMsgIdResquest::GetLatestMsgIdResquest(const GetLatestMsgIdResquest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Message.GetLatestMsgIdResquest)
}

void GetLatestMsgIdResquest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLatestMsgIdResquest::~GetLatestMsgIdResquest() {
  // @@protoc_insertion_point(destructor:Im.Message.GetLatestMsgIdResquest)
  SharedDtor();
}

void GetLatestMsgIdResquest::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void GetLatestMsgIdResquest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLatestMsgIdResquest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLatestMsgIdResquest_descriptor_;
}

const GetLatestMsgIdResquest& GetLatestMsgIdResquest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eMessage_2eproto();
  return *default_instance_;
}

GetLatestMsgIdResquest* GetLatestMsgIdResquest::default_instance_ = NULL;

GetLatestMsgIdResquest* GetLatestMsgIdResquest::New() const {
  return new GetLatestMsgIdResquest;
}

void GetLatestMsgIdResquest::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    user_id_ = 0u;
    session_type_ = 1;
    session_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  msg_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLatestMsgIdResquest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Message.GetLatestMsgIdResquest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .Im.Base.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::Im::Base::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_id_list;
        break;
      }

      // repeated uint32 msg_id_list = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_msg_id_list())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_msg_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_id_list;
        if (input->ExpectTag(42)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 5;
      case 5: {
        if (tag == 42) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Message.GetLatestMsgIdResquest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Message.GetLatestMsgIdResquest)
  return false;
#undef DO_
}

void GetLatestMsgIdResquest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Message.GetLatestMsgIdResquest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .Im.Base.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // repeated uint32 msg_id_list = 4;
  for (int i = 0; i < this->msg_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->msg_id_list(i), output);
  }

  // optional bytes attach_data = 5;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Message.GetLatestMsgIdResquest)
}

::google::protobuf::uint8* GetLatestMsgIdResquest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Message.GetLatestMsgIdResquest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .Im.Base.SessionType session_type = 2;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->session_type(), target);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->session_id(), target);
  }

  // repeated uint32 msg_id_list = 4;
  for (int i = 0; i < this->msg_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->msg_id_list(i), target);
  }

  // optional bytes attach_data = 5;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Message.GetLatestMsgIdResquest)
  return target;
}

int GetLatestMsgIdResquest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .Im.Base.SessionType session_type = 2;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // optional bytes attach_data = 5;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 msg_id_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->msg_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->msg_id_list(i));
    }
    total_size += 1 * this->msg_id_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLatestMsgIdResquest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLatestMsgIdResquest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLatestMsgIdResquest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLatestMsgIdResquest::MergeFrom(const GetLatestMsgIdResquest& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_id_list_.MergeFrom(from.msg_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLatestMsgIdResquest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLatestMsgIdResquest::CopyFrom(const GetLatestMsgIdResquest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLatestMsgIdResquest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetLatestMsgIdResquest::Swap(GetLatestMsgIdResquest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_id_, other->session_id_);
    msg_id_list_.Swap(&other->msg_id_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLatestMsgIdResquest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLatestMsgIdResquest_descriptor_;
  metadata.reflection = GetLatestMsgIdResquest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLatestMsgIdResponse::kUserIdFieldNumber;
const int GetLatestMsgIdResponse::kSessionTypeFieldNumber;
const int GetLatestMsgIdResponse::kSessionIdFieldNumber;
const int GetLatestMsgIdResponse::kLatestMsgIdFieldNumber;
const int GetLatestMsgIdResponse::kAttachDataFieldNumber;
#endif  // !_MSC_VER

GetLatestMsgIdResponse::GetLatestMsgIdResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Message.GetLatestMsgIdResponse)
}

void GetLatestMsgIdResponse::InitAsDefaultInstance() {
}

GetLatestMsgIdResponse::GetLatestMsgIdResponse(const GetLatestMsgIdResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Message.GetLatestMsgIdResponse)
}

void GetLatestMsgIdResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  latest_msg_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLatestMsgIdResponse::~GetLatestMsgIdResponse() {
  // @@protoc_insertion_point(destructor:Im.Message.GetLatestMsgIdResponse)
  SharedDtor();
}

void GetLatestMsgIdResponse::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void GetLatestMsgIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLatestMsgIdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLatestMsgIdResponse_descriptor_;
}

const GetLatestMsgIdResponse& GetLatestMsgIdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eMessage_2eproto();
  return *default_instance_;
}

GetLatestMsgIdResponse* GetLatestMsgIdResponse::default_instance_ = NULL;

GetLatestMsgIdResponse* GetLatestMsgIdResponse::New() const {
  return new GetLatestMsgIdResponse;
}

void GetLatestMsgIdResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetLatestMsgIdResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(session_id_, latest_msg_id_);
    user_id_ = 0u;
    session_type_ = 1;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLatestMsgIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Message.GetLatestMsgIdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .Im.Base.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::Im::Base::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_latest_msg_id;
        break;
      }

      // required uint32 latest_msg_id = 4;
      case 4: {
        if (tag == 32) {
         parse_latest_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_msg_id_)));
          set_has_latest_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 5;
      case 5: {
        if (tag == 42) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Message.GetLatestMsgIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Message.GetLatestMsgIdResponse)
  return false;
#undef DO_
}

void GetLatestMsgIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Message.GetLatestMsgIdResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .Im.Base.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // required uint32 latest_msg_id = 4;
  if (has_latest_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->latest_msg_id(), output);
  }

  // optional bytes attach_data = 5;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Message.GetLatestMsgIdResponse)
}

::google::protobuf::uint8* GetLatestMsgIdResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Message.GetLatestMsgIdResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .Im.Base.SessionType session_type = 2;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->session_type(), target);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->session_id(), target);
  }

  // required uint32 latest_msg_id = 4;
  if (has_latest_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->latest_msg_id(), target);
  }

  // optional bytes attach_data = 5;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Message.GetLatestMsgIdResponse)
  return target;
}

int GetLatestMsgIdResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .Im.Base.SessionType session_type = 2;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // required uint32 latest_msg_id = 4;
    if (has_latest_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latest_msg_id());
    }

    // optional bytes attach_data = 5;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLatestMsgIdResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLatestMsgIdResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLatestMsgIdResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLatestMsgIdResponse::MergeFrom(const GetLatestMsgIdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_latest_msg_id()) {
      set_latest_msg_id(from.latest_msg_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLatestMsgIdResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLatestMsgIdResponse::CopyFrom(const GetLatestMsgIdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLatestMsgIdResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GetLatestMsgIdResponse::Swap(GetLatestMsgIdResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_id_, other->session_id_);
    std::swap(latest_msg_id_, other->latest_msg_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLatestMsgIdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLatestMsgIdResponse_descriptor_;
  metadata.reflection = GetLatestMsgIdResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMsgByIdRequest::kUserIdFieldNumber;
const int GetMsgByIdRequest::kSessionTypeFieldNumber;
const int GetMsgByIdRequest::kSessionIdFieldNumber;
const int GetMsgByIdRequest::kMsgIdListFieldNumber;
const int GetMsgByIdRequest::kAttachDataFieldNumber;
#endif  // !_MSC_VER

GetMsgByIdRequest::GetMsgByIdRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Message.GetMsgByIdRequest)
}

void GetMsgByIdRequest::InitAsDefaultInstance() {
}

GetMsgByIdRequest::GetMsgByIdRequest(const GetMsgByIdRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Message.GetMsgByIdRequest)
}

void GetMsgByIdRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMsgByIdRequest::~GetMsgByIdRequest() {
  // @@protoc_insertion_point(destructor:Im.Message.GetMsgByIdRequest)
  SharedDtor();
}

void GetMsgByIdRequest::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void GetMsgByIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMsgByIdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMsgByIdRequest_descriptor_;
}

const GetMsgByIdRequest& GetMsgByIdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eMessage_2eproto();
  return *default_instance_;
}

GetMsgByIdRequest* GetMsgByIdRequest::default_instance_ = NULL;

GetMsgByIdRequest* GetMsgByIdRequest::New() const {
  return new GetMsgByIdRequest;
}

void GetMsgByIdRequest::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    user_id_ = 0u;
    session_type_ = 1;
    session_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  msg_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMsgByIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Message.GetMsgByIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .Im.Base.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::Im::Base::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_id_list;
        break;
      }

      // repeated uint32 msg_id_list = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_msg_id_list())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_msg_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_id_list;
        if (input->ExpectTag(42)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 5;
      case 5: {
        if (tag == 42) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Message.GetMsgByIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Message.GetMsgByIdRequest)
  return false;
#undef DO_
}

void GetMsgByIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Message.GetMsgByIdRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .Im.Base.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // repeated uint32 msg_id_list = 4;
  for (int i = 0; i < this->msg_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->msg_id_list(i), output);
  }

  // optional bytes attach_data = 5;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Message.GetMsgByIdRequest)
}

::google::protobuf::uint8* GetMsgByIdRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Message.GetMsgByIdRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .Im.Base.SessionType session_type = 2;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->session_type(), target);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->session_id(), target);
  }

  // repeated uint32 msg_id_list = 4;
  for (int i = 0; i < this->msg_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->msg_id_list(i), target);
  }

  // optional bytes attach_data = 5;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Message.GetMsgByIdRequest)
  return target;
}

int GetMsgByIdRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .Im.Base.SessionType session_type = 2;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // optional bytes attach_data = 5;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 msg_id_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->msg_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->msg_id_list(i));
    }
    total_size += 1 * this->msg_id_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMsgByIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMsgByIdRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMsgByIdRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMsgByIdRequest::MergeFrom(const GetMsgByIdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_id_list_.MergeFrom(from.msg_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMsgByIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMsgByIdRequest::CopyFrom(const GetMsgByIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMsgByIdRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetMsgByIdRequest::Swap(GetMsgByIdRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_id_, other->session_id_);
    msg_id_list_.Swap(&other->msg_id_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMsgByIdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMsgByIdRequest_descriptor_;
  metadata.reflection = GetMsgByIdRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMsgByIdResponse::kUserIdFieldNumber;
const int GetMsgByIdResponse::kSessionTypeFieldNumber;
const int GetMsgByIdResponse::kSessionIdFieldNumber;
const int GetMsgByIdResponse::kMsgInfoListFieldNumber;
const int GetMsgByIdResponse::kAttachDataFieldNumber;
#endif  // !_MSC_VER

GetMsgByIdResponse::GetMsgByIdResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Message.GetMsgByIdResponse)
}

void GetMsgByIdResponse::InitAsDefaultInstance() {
}

GetMsgByIdResponse::GetMsgByIdResponse(const GetMsgByIdResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Message.GetMsgByIdResponse)
}

void GetMsgByIdResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMsgByIdResponse::~GetMsgByIdResponse() {
  // @@protoc_insertion_point(destructor:Im.Message.GetMsgByIdResponse)
  SharedDtor();
}

void GetMsgByIdResponse::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void GetMsgByIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMsgByIdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMsgByIdResponse_descriptor_;
}

const GetMsgByIdResponse& GetMsgByIdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eMessage_2eproto();
  return *default_instance_;
}

GetMsgByIdResponse* GetMsgByIdResponse::default_instance_ = NULL;

GetMsgByIdResponse* GetMsgByIdResponse::New() const {
  return new GetMsgByIdResponse;
}

void GetMsgByIdResponse::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    user_id_ = 0u;
    session_type_ = 1;
    session_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  msg_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMsgByIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Message.GetMsgByIdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .Im.Base.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::Im::Base::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg_info_list;
        break;
      }

      // repeated .Im.Base.MsgInfo msg_info_list = 4;
      case 4: {
        if (tag == 34) {
         parse_msg_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg_info_list;
        if (input->ExpectTag(42)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 5;
      case 5: {
        if (tag == 42) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Message.GetMsgByIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Message.GetMsgByIdResponse)
  return false;
#undef DO_
}

void GetMsgByIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Message.GetMsgByIdResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .Im.Base.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // repeated .Im.Base.MsgInfo msg_info_list = 4;
  for (int i = 0; i < this->msg_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->msg_info_list(i), output);
  }

  // optional bytes attach_data = 5;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Message.GetMsgByIdResponse)
}

::google::protobuf::uint8* GetMsgByIdResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Message.GetMsgByIdResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .Im.Base.SessionType session_type = 2;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->session_type(), target);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->session_id(), target);
  }

  // repeated .Im.Base.MsgInfo msg_info_list = 4;
  for (int i = 0; i < this->msg_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->msg_info_list(i), target);
  }

  // optional bytes attach_data = 5;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Message.GetMsgByIdResponse)
  return target;
}

int GetMsgByIdResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .Im.Base.SessionType session_type = 2;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // optional bytes attach_data = 5;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .Im.Base.MsgInfo msg_info_list = 4;
  total_size += 1 * this->msg_info_list_size();
  for (int i = 0; i < this->msg_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg_info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMsgByIdResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMsgByIdResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMsgByIdResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMsgByIdResponse::MergeFrom(const GetMsgByIdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_info_list_.MergeFrom(from.msg_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMsgByIdResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMsgByIdResponse::CopyFrom(const GetMsgByIdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMsgByIdResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->msg_info_list())) return false;
  return true;
}

void GetMsgByIdResponse::Swap(GetMsgByIdResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_id_, other->session_id_);
    msg_info_list_.Swap(&other->msg_info_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMsgByIdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMsgByIdResponse_descriptor_;
  metadata.reflection = GetMsgByIdResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Im

// @@protoc_insertion_point(global_scope)
