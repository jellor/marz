// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Im.Session.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Im.Session.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Im {
namespace Session {

namespace {

const ::google::protobuf::Descriptor* RecentContactSessionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecentContactSessionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecentContactSessionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecentContactSessionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveSessionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveSessionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveSessionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveSessionResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Im_2eSession_2eproto() {
  protobuf_AddDesc_Im_2eSession_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Im.Session.proto");
  GOOGLE_CHECK(file != NULL);
  RecentContactSessionRequest_descriptor_ = file->message_type(0);
  static const int RecentContactSessionRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentContactSessionRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentContactSessionRequest, latest_update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentContactSessionRequest, attach_data_),
  };
  RecentContactSessionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecentContactSessionRequest_descriptor_,
      RecentContactSessionRequest::default_instance_,
      RecentContactSessionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentContactSessionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentContactSessionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecentContactSessionRequest));
  RecentContactSessionResponse_descriptor_ = file->message_type(1);
  static const int RecentContactSessionResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentContactSessionResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentContactSessionResponse, contact_session_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentContactSessionResponse, attach_data_),
  };
  RecentContactSessionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecentContactSessionResponse_descriptor_,
      RecentContactSessionResponse::default_instance_,
      RecentContactSessionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentContactSessionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentContactSessionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecentContactSessionResponse));
  RemoveSessionRequest_descriptor_ = file->message_type(2);
  static const int RemoveSessionRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionRequest, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionRequest, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionRequest, attach_data_),
  };
  RemoveSessionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveSessionRequest_descriptor_,
      RemoveSessionRequest::default_instance_,
      RemoveSessionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveSessionRequest));
  RemoveSessionResponse_descriptor_ = file->message_type(3);
  static const int RemoveSessionResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionResponse, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionResponse, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionResponse, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionResponse, attach_data_),
  };
  RemoveSessionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveSessionResponse_descriptor_,
      RemoveSessionResponse::default_instance_,
      RemoveSessionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSessionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveSessionResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Im_2eSession_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecentContactSessionRequest_descriptor_, &RecentContactSessionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecentContactSessionResponse_descriptor_, &RecentContactSessionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveSessionRequest_descriptor_, &RemoveSessionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveSessionResponse_descriptor_, &RemoveSessionResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Im_2eSession_2eproto() {
  delete RecentContactSessionRequest::default_instance_;
  delete RecentContactSessionRequest_reflection_;
  delete RecentContactSessionResponse::default_instance_;
  delete RecentContactSessionResponse_reflection_;
  delete RemoveSessionRequest::default_instance_;
  delete RemoveSessionRequest_reflection_;
  delete RemoveSessionResponse::default_instance_;
  delete RemoveSessionResponse_reflection_;
}

void protobuf_AddDesc_Im_2eSession_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Im::Base::protobuf_AddDesc_Im_2eBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020Im.Session.proto\022\nIm.Session\032\rIm.Base."
    "proto\"_\n\033RecentContactSessionRequest\022\017\n\007"
    "user_id\030\001 \002(\r\022\032\n\022latest_update_time\030\002 \002("
    "\r\022\023\n\013attach_data\030\003 \001(\014\"\177\n\034RecentContactS"
    "essionResponse\022\017\n\007user_id\030\001 \002(\r\0229\n\024conta"
    "ct_session_list\030\002 \003(\0132\033.Im.Base.ContactS"
    "essionInfo\022\023\n\013attach_data\030\003 \001(\014\"|\n\024Remov"
    "eSessionRequest\022\017\n\007user_id\030\001 \002(\r\022*\n\014sess"
    "ion_type\030\002 \002(\0162\024.Im.Base.SessionType\022\022\n\n"
    "session_id\030\003 \002(\r\022\023\n\013attach_data\030\004 \001(\014\"\222\001"
    "\n\025RemoveSessionResponse\022\017\n\007user_id\030\001 \002(\r"
    "\022\023\n\013result_code\030\002 \002(\r\022*\n\014session_type\030\003 "
    "\002(\0162\024.Im.Base.SessionType\022\022\n\nsession_id\030"
    "\004 \002(\r\022\023\n\013attach_data\030\005 \001(\014B)\n\'com.exampl"
    "e.user.myapplication.protobuf", 589);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Im.Session.proto", &protobuf_RegisterTypes);
  RecentContactSessionRequest::default_instance_ = new RecentContactSessionRequest();
  RecentContactSessionResponse::default_instance_ = new RecentContactSessionResponse();
  RemoveSessionRequest::default_instance_ = new RemoveSessionRequest();
  RemoveSessionResponse::default_instance_ = new RemoveSessionResponse();
  RecentContactSessionRequest::default_instance_->InitAsDefaultInstance();
  RecentContactSessionResponse::default_instance_->InitAsDefaultInstance();
  RemoveSessionRequest::default_instance_->InitAsDefaultInstance();
  RemoveSessionResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Im_2eSession_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Im_2eSession_2eproto {
  StaticDescriptorInitializer_Im_2eSession_2eproto() {
    protobuf_AddDesc_Im_2eSession_2eproto();
  }
} static_descriptor_initializer_Im_2eSession_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RecentContactSessionRequest::kUserIdFieldNumber;
const int RecentContactSessionRequest::kLatestUpdateTimeFieldNumber;
const int RecentContactSessionRequest::kAttachDataFieldNumber;
#endif  // !_MSC_VER

RecentContactSessionRequest::RecentContactSessionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Session.RecentContactSessionRequest)
}

void RecentContactSessionRequest::InitAsDefaultInstance() {
}

RecentContactSessionRequest::RecentContactSessionRequest(const RecentContactSessionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Session.RecentContactSessionRequest)
}

void RecentContactSessionRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  latest_update_time_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecentContactSessionRequest::~RecentContactSessionRequest() {
  // @@protoc_insertion_point(destructor:Im.Session.RecentContactSessionRequest)
  SharedDtor();
}

void RecentContactSessionRequest::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void RecentContactSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecentContactSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecentContactSessionRequest_descriptor_;
}

const RecentContactSessionRequest& RecentContactSessionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eSession_2eproto();
  return *default_instance_;
}

RecentContactSessionRequest* RecentContactSessionRequest::default_instance_ = NULL;

RecentContactSessionRequest* RecentContactSessionRequest::New() const {
  return new RecentContactSessionRequest;
}

void RecentContactSessionRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RecentContactSessionRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, latest_update_time_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecentContactSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Session.RecentContactSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_latest_update_time;
        break;
      }

      // required uint32 latest_update_time = 2;
      case 2: {
        if (tag == 16) {
         parse_latest_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_update_time_)));
          set_has_latest_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 3;
      case 3: {
        if (tag == 26) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Session.RecentContactSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Session.RecentContactSessionRequest)
  return false;
#undef DO_
}

void RecentContactSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Session.RecentContactSessionRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 latest_update_time = 2;
  if (has_latest_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->latest_update_time(), output);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Session.RecentContactSessionRequest)
}

::google::protobuf::uint8* RecentContactSessionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Session.RecentContactSessionRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 latest_update_time = 2;
  if (has_latest_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->latest_update_time(), target);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Session.RecentContactSessionRequest)
  return target;
}

int RecentContactSessionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 latest_update_time = 2;
    if (has_latest_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latest_update_time());
    }

    // optional bytes attach_data = 3;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecentContactSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecentContactSessionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecentContactSessionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecentContactSessionRequest::MergeFrom(const RecentContactSessionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_latest_update_time()) {
      set_latest_update_time(from.latest_update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecentContactSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecentContactSessionRequest::CopyFrom(const RecentContactSessionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecentContactSessionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RecentContactSessionRequest::Swap(RecentContactSessionRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(latest_update_time_, other->latest_update_time_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecentContactSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecentContactSessionRequest_descriptor_;
  metadata.reflection = RecentContactSessionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecentContactSessionResponse::kUserIdFieldNumber;
const int RecentContactSessionResponse::kContactSessionListFieldNumber;
const int RecentContactSessionResponse::kAttachDataFieldNumber;
#endif  // !_MSC_VER

RecentContactSessionResponse::RecentContactSessionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Session.RecentContactSessionResponse)
}

void RecentContactSessionResponse::InitAsDefaultInstance() {
}

RecentContactSessionResponse::RecentContactSessionResponse(const RecentContactSessionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Session.RecentContactSessionResponse)
}

void RecentContactSessionResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecentContactSessionResponse::~RecentContactSessionResponse() {
  // @@protoc_insertion_point(destructor:Im.Session.RecentContactSessionResponse)
  SharedDtor();
}

void RecentContactSessionResponse::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void RecentContactSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecentContactSessionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecentContactSessionResponse_descriptor_;
}

const RecentContactSessionResponse& RecentContactSessionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eSession_2eproto();
  return *default_instance_;
}

RecentContactSessionResponse* RecentContactSessionResponse::default_instance_ = NULL;

RecentContactSessionResponse* RecentContactSessionResponse::New() const {
  return new RecentContactSessionResponse;
}

void RecentContactSessionResponse::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  contact_session_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecentContactSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Session.RecentContactSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contact_session_list;
        break;
      }

      // repeated .Im.Base.ContactSessionInfo contact_session_list = 2;
      case 2: {
        if (tag == 18) {
         parse_contact_session_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contact_session_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contact_session_list;
        if (input->ExpectTag(26)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 3;
      case 3: {
        if (tag == 26) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Session.RecentContactSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Session.RecentContactSessionResponse)
  return false;
#undef DO_
}

void RecentContactSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Session.RecentContactSessionResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .Im.Base.ContactSessionInfo contact_session_list = 2;
  for (int i = 0; i < this->contact_session_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contact_session_list(i), output);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Session.RecentContactSessionResponse)
}

::google::protobuf::uint8* RecentContactSessionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Session.RecentContactSessionResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // repeated .Im.Base.ContactSessionInfo contact_session_list = 2;
  for (int i = 0; i < this->contact_session_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->contact_session_list(i), target);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Session.RecentContactSessionResponse)
  return target;
}

int RecentContactSessionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 3;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .Im.Base.ContactSessionInfo contact_session_list = 2;
  total_size += 1 * this->contact_session_list_size();
  for (int i = 0; i < this->contact_session_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contact_session_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecentContactSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecentContactSessionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecentContactSessionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecentContactSessionResponse::MergeFrom(const RecentContactSessionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  contact_session_list_.MergeFrom(from.contact_session_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecentContactSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecentContactSessionResponse::CopyFrom(const RecentContactSessionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecentContactSessionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->contact_session_list())) return false;
  return true;
}

void RecentContactSessionResponse::Swap(RecentContactSessionResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    contact_session_list_.Swap(&other->contact_session_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecentContactSessionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecentContactSessionResponse_descriptor_;
  metadata.reflection = RecentContactSessionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveSessionRequest::kUserIdFieldNumber;
const int RemoveSessionRequest::kSessionTypeFieldNumber;
const int RemoveSessionRequest::kSessionIdFieldNumber;
const int RemoveSessionRequest::kAttachDataFieldNumber;
#endif  // !_MSC_VER

RemoveSessionRequest::RemoveSessionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Session.RemoveSessionRequest)
}

void RemoveSessionRequest::InitAsDefaultInstance() {
}

RemoveSessionRequest::RemoveSessionRequest(const RemoveSessionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Session.RemoveSessionRequest)
}

void RemoveSessionRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveSessionRequest::~RemoveSessionRequest() {
  // @@protoc_insertion_point(destructor:Im.Session.RemoveSessionRequest)
  SharedDtor();
}

void RemoveSessionRequest::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void RemoveSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveSessionRequest_descriptor_;
}

const RemoveSessionRequest& RemoveSessionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eSession_2eproto();
  return *default_instance_;
}

RemoveSessionRequest* RemoveSessionRequest::default_instance_ = NULL;

RemoveSessionRequest* RemoveSessionRequest::New() const {
  return new RemoveSessionRequest;
}

void RemoveSessionRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    user_id_ = 0u;
    session_type_ = 1;
    session_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Session.RemoveSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .Im.Base.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::Im::Base::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 4;
      case 4: {
        if (tag == 34) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Session.RemoveSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Session.RemoveSessionRequest)
  return false;
#undef DO_
}

void RemoveSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Session.RemoveSessionRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .Im.Base.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // optional bytes attach_data = 4;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Session.RemoveSessionRequest)
}

::google::protobuf::uint8* RemoveSessionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Session.RemoveSessionRequest)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .Im.Base.SessionType session_type = 2;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->session_type(), target);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->session_id(), target);
  }

  // optional bytes attach_data = 4;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Session.RemoveSessionRequest)
  return target;
}

int RemoveSessionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .Im.Base.SessionType session_type = 2;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // optional bytes attach_data = 4;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveSessionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveSessionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveSessionRequest::MergeFrom(const RemoveSessionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveSessionRequest::CopyFrom(const RemoveSessionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveSessionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RemoveSessionRequest::Swap(RemoveSessionRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_id_, other->session_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveSessionRequest_descriptor_;
  metadata.reflection = RemoveSessionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveSessionResponse::kUserIdFieldNumber;
const int RemoveSessionResponse::kResultCodeFieldNumber;
const int RemoveSessionResponse::kSessionTypeFieldNumber;
const int RemoveSessionResponse::kSessionIdFieldNumber;
const int RemoveSessionResponse::kAttachDataFieldNumber;
#endif  // !_MSC_VER

RemoveSessionResponse::RemoveSessionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Session.RemoveSessionResponse)
}

void RemoveSessionResponse::InitAsDefaultInstance() {
}

RemoveSessionResponse::RemoveSessionResponse(const RemoveSessionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Session.RemoveSessionResponse)
}

void RemoveSessionResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveSessionResponse::~RemoveSessionResponse() {
  // @@protoc_insertion_point(destructor:Im.Session.RemoveSessionResponse)
  SharedDtor();
}

void RemoveSessionResponse::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void RemoveSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveSessionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveSessionResponse_descriptor_;
}

const RemoveSessionResponse& RemoveSessionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eSession_2eproto();
  return *default_instance_;
}

RemoveSessionResponse* RemoveSessionResponse::default_instance_ = NULL;

RemoveSessionResponse* RemoveSessionResponse::New() const {
  return new RemoveSessionResponse;
}

void RemoveSessionResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RemoveSessionResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(user_id_, result_code_);
    session_type_ = 1;
    session_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Session.RemoveSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_type;
        break;
      }

      // required .Im.Base.SessionType session_type = 3;
      case 3: {
        if (tag == 24) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::Im::Base::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 4;
      case 4: {
        if (tag == 32) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 5;
      case 5: {
        if (tag == 42) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Session.RemoveSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Session.RemoveSessionResponse)
  return false;
#undef DO_
}

void RemoveSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Session.RemoveSessionResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // required .Im.Base.SessionType session_type = 3;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->session_type(), output);
  }

  // required uint32 session_id = 4;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->session_id(), output);
  }

  // optional bytes attach_data = 5;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Session.RemoveSessionResponse)
}

::google::protobuf::uint8* RemoveSessionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Session.RemoveSessionResponse)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result_code(), target);
  }

  // required .Im.Base.SessionType session_type = 3;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->session_type(), target);
  }

  // required uint32 session_id = 4;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->session_id(), target);
  }

  // optional bytes attach_data = 5;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Session.RemoveSessionResponse)
  return target;
}

int RemoveSessionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // required .Im.Base.SessionType session_type = 3;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 session_id = 4;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // optional bytes attach_data = 5;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveSessionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveSessionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveSessionResponse::MergeFrom(const RemoveSessionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveSessionResponse::CopyFrom(const RemoveSessionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveSessionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RemoveSessionResponse::Swap(RemoveSessionResponse* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_id_, other->session_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveSessionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveSessionResponse_descriptor_;
  metadata.reflection = RemoveSessionResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Session
}  // namespace Im

// @@protoc_insertion_point(global_scope)
