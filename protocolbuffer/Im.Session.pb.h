// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Im.Session.proto

#ifndef PROTOBUF_Im_2eSession_2eproto__INCLUDED
#define PROTOBUF_Im_2eSession_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Im.Base.pb.h"
// @@protoc_insertion_point(includes)

namespace Im {
namespace Session {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Im_2eSession_2eproto();
void protobuf_AssignDesc_Im_2eSession_2eproto();
void protobuf_ShutdownFile_Im_2eSession_2eproto();

class RecentContactSessionRequest;
class RecentContactSessionResponse;
class RemoveSessionRequest;
class RemoveSessionResponse;

// ===================================================================

class RecentContactSessionRequest : public ::google::protobuf::Message {
 public:
  RecentContactSessionRequest();
  virtual ~RecentContactSessionRequest();

  RecentContactSessionRequest(const RecentContactSessionRequest& from);

  inline RecentContactSessionRequest& operator=(const RecentContactSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecentContactSessionRequest& default_instance();

  void Swap(RecentContactSessionRequest* other);

  // implements Message ----------------------------------------------

  RecentContactSessionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecentContactSessionRequest& from);
  void MergeFrom(const RecentContactSessionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 latest_update_time = 2;
  inline bool has_latest_update_time() const;
  inline void clear_latest_update_time();
  static const int kLatestUpdateTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 latest_update_time() const;
  inline void set_latest_update_time(::google::protobuf::uint32 value);

  // optional bytes attach_data = 3;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 3;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:Im.Session.RecentContactSessionRequest)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_latest_update_time();
  inline void clear_has_latest_update_time();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 latest_update_time_;
  ::std::string* attach_data_;
  friend void  protobuf_AddDesc_Im_2eSession_2eproto();
  friend void protobuf_AssignDesc_Im_2eSession_2eproto();
  friend void protobuf_ShutdownFile_Im_2eSession_2eproto();

  void InitAsDefaultInstance();
  static RecentContactSessionRequest* default_instance_;
};
// -------------------------------------------------------------------

class RecentContactSessionResponse : public ::google::protobuf::Message {
 public:
  RecentContactSessionResponse();
  virtual ~RecentContactSessionResponse();

  RecentContactSessionResponse(const RecentContactSessionResponse& from);

  inline RecentContactSessionResponse& operator=(const RecentContactSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecentContactSessionResponse& default_instance();

  void Swap(RecentContactSessionResponse* other);

  // implements Message ----------------------------------------------

  RecentContactSessionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecentContactSessionResponse& from);
  void MergeFrom(const RecentContactSessionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // repeated .Im.Base.ContactSessionInfo contact_session_list = 2;
  inline int contact_session_list_size() const;
  inline void clear_contact_session_list();
  static const int kContactSessionListFieldNumber = 2;
  inline const ::Im::Base::ContactSessionInfo& contact_session_list(int index) const;
  inline ::Im::Base::ContactSessionInfo* mutable_contact_session_list(int index);
  inline ::Im::Base::ContactSessionInfo* add_contact_session_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Im::Base::ContactSessionInfo >&
      contact_session_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Im::Base::ContactSessionInfo >*
      mutable_contact_session_list();

  // optional bytes attach_data = 3;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 3;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:Im.Session.RecentContactSessionResponse)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Im::Base::ContactSessionInfo > contact_session_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  friend void  protobuf_AddDesc_Im_2eSession_2eproto();
  friend void protobuf_AssignDesc_Im_2eSession_2eproto();
  friend void protobuf_ShutdownFile_Im_2eSession_2eproto();

  void InitAsDefaultInstance();
  static RecentContactSessionResponse* default_instance_;
};
// -------------------------------------------------------------------

class RemoveSessionRequest : public ::google::protobuf::Message {
 public:
  RemoveSessionRequest();
  virtual ~RemoveSessionRequest();

  RemoveSessionRequest(const RemoveSessionRequest& from);

  inline RemoveSessionRequest& operator=(const RemoveSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveSessionRequest& default_instance();

  void Swap(RemoveSessionRequest* other);

  // implements Message ----------------------------------------------

  RemoveSessionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveSessionRequest& from);
  void MergeFrom(const RemoveSessionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .Im.Base.SessionType session_type = 2;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 2;
  inline ::Im::Base::SessionType session_type() const;
  inline void set_session_type(::Im::Base::SessionType value);

  // required uint32 session_id = 3;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 session_id() const;
  inline void set_session_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 4;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 4;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:Im.Session.RemoveSessionRequest)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  int session_type_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 session_id_;
  friend void  protobuf_AddDesc_Im_2eSession_2eproto();
  friend void protobuf_AssignDesc_Im_2eSession_2eproto();
  friend void protobuf_ShutdownFile_Im_2eSession_2eproto();

  void InitAsDefaultInstance();
  static RemoveSessionRequest* default_instance_;
};
// -------------------------------------------------------------------

class RemoveSessionResponse : public ::google::protobuf::Message {
 public:
  RemoveSessionResponse();
  virtual ~RemoveSessionResponse();

  RemoveSessionResponse(const RemoveSessionResponse& from);

  inline RemoveSessionResponse& operator=(const RemoveSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveSessionResponse& default_instance();

  void Swap(RemoveSessionResponse* other);

  // implements Message ----------------------------------------------

  RemoveSessionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveSessionResponse& from);
  void MergeFrom(const RemoveSessionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 result_code = 2;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // required .Im.Base.SessionType session_type = 3;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 3;
  inline ::Im::Base::SessionType session_type() const;
  inline void set_session_type(::Im::Base::SessionType value);

  // required uint32 session_id = 4;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 4;
  inline ::google::protobuf::uint32 session_id() const;
  inline void set_session_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 5;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 5;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:Im.Session.RemoveSessionResponse)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 result_code_;
  int session_type_;
  ::google::protobuf::uint32 session_id_;
  ::std::string* attach_data_;
  friend void  protobuf_AddDesc_Im_2eSession_2eproto();
  friend void protobuf_AssignDesc_Im_2eSession_2eproto();
  friend void protobuf_ShutdownFile_Im_2eSession_2eproto();

  void InitAsDefaultInstance();
  static RemoveSessionResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// RecentContactSessionRequest

// required uint32 user_id = 1;
inline bool RecentContactSessionRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecentContactSessionRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecentContactSessionRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecentContactSessionRequest::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 RecentContactSessionRequest::user_id() const {
  // @@protoc_insertion_point(field_get:Im.Session.RecentContactSessionRequest.user_id)
  return user_id_;
}
inline void RecentContactSessionRequest::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.Session.RecentContactSessionRequest.user_id)
}

// required uint32 latest_update_time = 2;
inline bool RecentContactSessionRequest::has_latest_update_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecentContactSessionRequest::set_has_latest_update_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecentContactSessionRequest::clear_has_latest_update_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecentContactSessionRequest::clear_latest_update_time() {
  latest_update_time_ = 0u;
  clear_has_latest_update_time();
}
inline ::google::protobuf::uint32 RecentContactSessionRequest::latest_update_time() const {
  // @@protoc_insertion_point(field_get:Im.Session.RecentContactSessionRequest.latest_update_time)
  return latest_update_time_;
}
inline void RecentContactSessionRequest::set_latest_update_time(::google::protobuf::uint32 value) {
  set_has_latest_update_time();
  latest_update_time_ = value;
  // @@protoc_insertion_point(field_set:Im.Session.RecentContactSessionRequest.latest_update_time)
}

// optional bytes attach_data = 3;
inline bool RecentContactSessionRequest::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecentContactSessionRequest::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecentContactSessionRequest::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecentContactSessionRequest::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& RecentContactSessionRequest::attach_data() const {
  // @@protoc_insertion_point(field_get:Im.Session.RecentContactSessionRequest.attach_data)
  return *attach_data_;
}
inline void RecentContactSessionRequest::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:Im.Session.RecentContactSessionRequest.attach_data)
}
inline void RecentContactSessionRequest::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.Session.RecentContactSessionRequest.attach_data)
}
inline void RecentContactSessionRequest::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.Session.RecentContactSessionRequest.attach_data)
}
inline ::std::string* RecentContactSessionRequest::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.Session.RecentContactSessionRequest.attach_data)
  return attach_data_;
}
inline ::std::string* RecentContactSessionRequest::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RecentContactSessionRequest::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.Session.RecentContactSessionRequest.attach_data)
}

// -------------------------------------------------------------------

// RecentContactSessionResponse

// required uint32 user_id = 1;
inline bool RecentContactSessionResponse::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecentContactSessionResponse::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecentContactSessionResponse::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecentContactSessionResponse::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 RecentContactSessionResponse::user_id() const {
  // @@protoc_insertion_point(field_get:Im.Session.RecentContactSessionResponse.user_id)
  return user_id_;
}
inline void RecentContactSessionResponse::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.Session.RecentContactSessionResponse.user_id)
}

// repeated .Im.Base.ContactSessionInfo contact_session_list = 2;
inline int RecentContactSessionResponse::contact_session_list_size() const {
  return contact_session_list_.size();
}
inline void RecentContactSessionResponse::clear_contact_session_list() {
  contact_session_list_.Clear();
}
inline const ::Im::Base::ContactSessionInfo& RecentContactSessionResponse::contact_session_list(int index) const {
  // @@protoc_insertion_point(field_get:Im.Session.RecentContactSessionResponse.contact_session_list)
  return contact_session_list_.Get(index);
}
inline ::Im::Base::ContactSessionInfo* RecentContactSessionResponse::mutable_contact_session_list(int index) {
  // @@protoc_insertion_point(field_mutable:Im.Session.RecentContactSessionResponse.contact_session_list)
  return contact_session_list_.Mutable(index);
}
inline ::Im::Base::ContactSessionInfo* RecentContactSessionResponse::add_contact_session_list() {
  // @@protoc_insertion_point(field_add:Im.Session.RecentContactSessionResponse.contact_session_list)
  return contact_session_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Im::Base::ContactSessionInfo >&
RecentContactSessionResponse::contact_session_list() const {
  // @@protoc_insertion_point(field_list:Im.Session.RecentContactSessionResponse.contact_session_list)
  return contact_session_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Im::Base::ContactSessionInfo >*
RecentContactSessionResponse::mutable_contact_session_list() {
  // @@protoc_insertion_point(field_mutable_list:Im.Session.RecentContactSessionResponse.contact_session_list)
  return &contact_session_list_;
}

// optional bytes attach_data = 3;
inline bool RecentContactSessionResponse::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecentContactSessionResponse::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecentContactSessionResponse::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecentContactSessionResponse::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& RecentContactSessionResponse::attach_data() const {
  // @@protoc_insertion_point(field_get:Im.Session.RecentContactSessionResponse.attach_data)
  return *attach_data_;
}
inline void RecentContactSessionResponse::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:Im.Session.RecentContactSessionResponse.attach_data)
}
inline void RecentContactSessionResponse::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.Session.RecentContactSessionResponse.attach_data)
}
inline void RecentContactSessionResponse::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.Session.RecentContactSessionResponse.attach_data)
}
inline ::std::string* RecentContactSessionResponse::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.Session.RecentContactSessionResponse.attach_data)
  return attach_data_;
}
inline ::std::string* RecentContactSessionResponse::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RecentContactSessionResponse::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.Session.RecentContactSessionResponse.attach_data)
}

// -------------------------------------------------------------------

// RemoveSessionRequest

// required uint32 user_id = 1;
inline bool RemoveSessionRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoveSessionRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoveSessionRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoveSessionRequest::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 RemoveSessionRequest::user_id() const {
  // @@protoc_insertion_point(field_get:Im.Session.RemoveSessionRequest.user_id)
  return user_id_;
}
inline void RemoveSessionRequest::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.Session.RemoveSessionRequest.user_id)
}

// required .Im.Base.SessionType session_type = 2;
inline bool RemoveSessionRequest::has_session_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoveSessionRequest::set_has_session_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoveSessionRequest::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoveSessionRequest::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
inline ::Im::Base::SessionType RemoveSessionRequest::session_type() const {
  // @@protoc_insertion_point(field_get:Im.Session.RemoveSessionRequest.session_type)
  return static_cast< ::Im::Base::SessionType >(session_type_);
}
inline void RemoveSessionRequest::set_session_type(::Im::Base::SessionType value) {
  assert(::Im::Base::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:Im.Session.RemoveSessionRequest.session_type)
}

// required uint32 session_id = 3;
inline bool RemoveSessionRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RemoveSessionRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RemoveSessionRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RemoveSessionRequest::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
inline ::google::protobuf::uint32 RemoveSessionRequest::session_id() const {
  // @@protoc_insertion_point(field_get:Im.Session.RemoveSessionRequest.session_id)
  return session_id_;
}
inline void RemoveSessionRequest::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:Im.Session.RemoveSessionRequest.session_id)
}

// optional bytes attach_data = 4;
inline bool RemoveSessionRequest::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RemoveSessionRequest::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RemoveSessionRequest::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RemoveSessionRequest::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& RemoveSessionRequest::attach_data() const {
  // @@protoc_insertion_point(field_get:Im.Session.RemoveSessionRequest.attach_data)
  return *attach_data_;
}
inline void RemoveSessionRequest::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:Im.Session.RemoveSessionRequest.attach_data)
}
inline void RemoveSessionRequest::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.Session.RemoveSessionRequest.attach_data)
}
inline void RemoveSessionRequest::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.Session.RemoveSessionRequest.attach_data)
}
inline ::std::string* RemoveSessionRequest::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.Session.RemoveSessionRequest.attach_data)
  return attach_data_;
}
inline ::std::string* RemoveSessionRequest::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RemoveSessionRequest::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.Session.RemoveSessionRequest.attach_data)
}

// -------------------------------------------------------------------

// RemoveSessionResponse

// required uint32 user_id = 1;
inline bool RemoveSessionResponse::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoveSessionResponse::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoveSessionResponse::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoveSessionResponse::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 RemoveSessionResponse::user_id() const {
  // @@protoc_insertion_point(field_get:Im.Session.RemoveSessionResponse.user_id)
  return user_id_;
}
inline void RemoveSessionResponse::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Im.Session.RemoveSessionResponse.user_id)
}

// required uint32 result_code = 2;
inline bool RemoveSessionResponse::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoveSessionResponse::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoveSessionResponse::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoveSessionResponse::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 RemoveSessionResponse::result_code() const {
  // @@protoc_insertion_point(field_get:Im.Session.RemoveSessionResponse.result_code)
  return result_code_;
}
inline void RemoveSessionResponse::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:Im.Session.RemoveSessionResponse.result_code)
}

// required .Im.Base.SessionType session_type = 3;
inline bool RemoveSessionResponse::has_session_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RemoveSessionResponse::set_has_session_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RemoveSessionResponse::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RemoveSessionResponse::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
inline ::Im::Base::SessionType RemoveSessionResponse::session_type() const {
  // @@protoc_insertion_point(field_get:Im.Session.RemoveSessionResponse.session_type)
  return static_cast< ::Im::Base::SessionType >(session_type_);
}
inline void RemoveSessionResponse::set_session_type(::Im::Base::SessionType value) {
  assert(::Im::Base::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:Im.Session.RemoveSessionResponse.session_type)
}

// required uint32 session_id = 4;
inline bool RemoveSessionResponse::has_session_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RemoveSessionResponse::set_has_session_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RemoveSessionResponse::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RemoveSessionResponse::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
inline ::google::protobuf::uint32 RemoveSessionResponse::session_id() const {
  // @@protoc_insertion_point(field_get:Im.Session.RemoveSessionResponse.session_id)
  return session_id_;
}
inline void RemoveSessionResponse::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:Im.Session.RemoveSessionResponse.session_id)
}

// optional bytes attach_data = 5;
inline bool RemoveSessionResponse::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RemoveSessionResponse::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RemoveSessionResponse::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RemoveSessionResponse::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& RemoveSessionResponse::attach_data() const {
  // @@protoc_insertion_point(field_get:Im.Session.RemoveSessionResponse.attach_data)
  return *attach_data_;
}
inline void RemoveSessionResponse::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:Im.Session.RemoveSessionResponse.attach_data)
}
inline void RemoveSessionResponse::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Im.Session.RemoveSessionResponse.attach_data)
}
inline void RemoveSessionResponse::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Im.Session.RemoveSessionResponse.attach_data)
}
inline ::std::string* RemoveSessionResponse::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Im.Session.RemoveSessionResponse.attach_data)
  return attach_data_;
}
inline ::std::string* RemoveSessionResponse::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RemoveSessionResponse::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Im.Session.RemoveSessionResponse.attach_data)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Session
}  // namespace Im

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Im_2eSession_2eproto__INCLUDED
