// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Im.Base.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Im.Base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Im {
namespace Base {

namespace {

const ::google::protobuf::Descriptor* IpAddr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IpAddr_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactSessionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactSessionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerUserStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerUserStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnreadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnreadInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupVersionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupVersionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserTokenInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserTokenInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShieldStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShieldStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfflineFileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfflineFileInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Service_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginCommand_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BuddyListCommand_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageCommand_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupCommand_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FileCommand_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SwitchCommand_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OtherCommand_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SessionCmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UserCmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* KickReasonType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OnlineListType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UserStatusType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SessionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupModifyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FileType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientFileStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientFileRole_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FileServerError_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SessionStatusType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Im_2eBase_2eproto() {
  protobuf_AddDesc_Im_2eBase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Im.Base.proto");
  GOOGLE_CHECK(file != NULL);
  IpAddr_descriptor_ = file->message_type(0);
  static const int IpAddr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddr, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddr, port_),
  };
  IpAddr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IpAddr_descriptor_,
      IpAddr::default_instance_,
      IpAddr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IpAddr));
  UserInfo_descriptor_ = file->message_type(1);
  static const int UserInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, status_),
  };
  UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo));
  ContactSessionInfo_descriptor_ = file->message_type(2);
  static const int ContactSessionInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSessionInfo, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSessionInfo, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSessionInfo, session_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSessionInfo, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSessionInfo, latest_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSessionInfo, latest_msg_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSessionInfo, latest_msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSessionInfo, latest_msg_from_user_id_),
  };
  ContactSessionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactSessionInfo_descriptor_,
      ContactSessionInfo::default_instance_,
      ContactSessionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSessionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSessionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactSessionInfo));
  UserStatus_descriptor_ = file->message_type(3);
  static const int UserStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, user_status_),
  };
  UserStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserStatus_descriptor_,
      UserStatus::default_instance_,
      UserStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserStatus));
  ServerUserStatus_descriptor_ = file->message_type(4);
  static const int ServerUserStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUserStatus, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUserStatus, user_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUserStatus, client_type_),
  };
  ServerUserStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerUserStatus_descriptor_,
      ServerUserStatus::default_instance_,
      ServerUserStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUserStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUserStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerUserStatus));
  UnreadInfo_descriptor_ = file->message_type(5);
  static const int UnreadInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadInfo, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadInfo, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadInfo, unread_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadInfo, latest_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadInfo, latest_msg_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadInfo, latest_msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadInfo, latest_msg_from_user_id_),
  };
  UnreadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnreadInfo_descriptor_,
      UnreadInfo::default_instance_,
      UnreadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnreadInfo));
  MsgInfo_descriptor_ = file->message_type(6);
  static const int MsgInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInfo, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInfo, from_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInfo, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInfo, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInfo, msg_data_),
  };
  MsgInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgInfo_descriptor_,
      MsgInfo::default_instance_,
      MsgInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgInfo));
  GroupVersionInfo_descriptor_ = file->message_type(7);
  static const int GroupVersionInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupVersionInfo, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupVersionInfo, version_),
  };
  GroupVersionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupVersionInfo_descriptor_,
      GroupVersionInfo::default_instance_,
      GroupVersionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupVersionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupVersionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupVersionInfo));
  GroupInfo_descriptor_ = file->message_type(8);
  static const int GroupInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, group_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, group_avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, group_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, shield_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, group_member_list_),
  };
  GroupInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupInfo_descriptor_,
      GroupInfo::default_instance_,
      GroupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupInfo));
  UserTokenInfo_descriptor_ = file->message_type(9);
  static const int UserTokenInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTokenInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTokenInfo, client_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTokenInfo, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTokenInfo, push_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTokenInfo, push_type_),
  };
  UserTokenInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserTokenInfo_descriptor_,
      UserTokenInfo::default_instance_,
      UserTokenInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTokenInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTokenInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserTokenInfo));
  PushResult_descriptor_ = file->message_type(10);
  static const int PushResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushResult, user_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushResult, result_code_),
  };
  PushResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushResult_descriptor_,
      PushResult::default_instance_,
      PushResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushResult));
  ShieldStatus_descriptor_ = file->message_type(11);
  static const int ShieldStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldStatus, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldStatus, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldStatus, shield_status_),
  };
  ShieldStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShieldStatus_descriptor_,
      ShieldStatus::default_instance_,
      ShieldStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShieldStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShieldStatus));
  OfflineFileInfo_descriptor_ = file->message_type(12);
  static const int OfflineFileInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineFileInfo, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineFileInfo, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineFileInfo, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineFileInfo, file_size_),
  };
  OfflineFileInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfflineFileInfo_descriptor_,
      OfflineFileInfo::default_instance_,
      OfflineFileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineFileInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineFileInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfflineFileInfo));
  Service_descriptor_ = file->enum_type(0);
  LoginCommand_descriptor_ = file->enum_type(1);
  BuddyListCommand_descriptor_ = file->enum_type(2);
  MessageCommand_descriptor_ = file->enum_type(3);
  GroupCommand_descriptor_ = file->enum_type(4);
  FileCommand_descriptor_ = file->enum_type(5);
  SwitchCommand_descriptor_ = file->enum_type(6);
  OtherCommand_descriptor_ = file->enum_type(7);
  SessionCmd_descriptor_ = file->enum_type(8);
  UserCmd_descriptor_ = file->enum_type(9);
  ResultType_descriptor_ = file->enum_type(10);
  KickReasonType_descriptor_ = file->enum_type(11);
  OnlineListType_descriptor_ = file->enum_type(12);
  UserStatusType_descriptor_ = file->enum_type(13);
  SessionType_descriptor_ = file->enum_type(14);
  MsgType_descriptor_ = file->enum_type(15);
  ClientType_descriptor_ = file->enum_type(16);
  GroupType_descriptor_ = file->enum_type(17);
  GroupModifyType_descriptor_ = file->enum_type(18);
  FileType_descriptor_ = file->enum_type(19);
  ClientFileStatus_descriptor_ = file->enum_type(20);
  ClientFileRole_descriptor_ = file->enum_type(21);
  FileServerError_descriptor_ = file->enum_type(22);
  SessionStatusType_descriptor_ = file->enum_type(23);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Im_2eBase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IpAddr_descriptor_, &IpAddr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactSessionInfo_descriptor_, &ContactSessionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserStatus_descriptor_, &UserStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerUserStatus_descriptor_, &ServerUserStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnreadInfo_descriptor_, &UnreadInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgInfo_descriptor_, &MsgInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupVersionInfo_descriptor_, &GroupVersionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupInfo_descriptor_, &GroupInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserTokenInfo_descriptor_, &UserTokenInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushResult_descriptor_, &PushResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShieldStatus_descriptor_, &ShieldStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfflineFileInfo_descriptor_, &OfflineFileInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Im_2eBase_2eproto() {
  delete IpAddr::default_instance_;
  delete IpAddr_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete ContactSessionInfo::default_instance_;
  delete ContactSessionInfo_reflection_;
  delete UserStatus::default_instance_;
  delete UserStatus_reflection_;
  delete ServerUserStatus::default_instance_;
  delete ServerUserStatus_reflection_;
  delete UnreadInfo::default_instance_;
  delete UnreadInfo_reflection_;
  delete MsgInfo::default_instance_;
  delete MsgInfo_reflection_;
  delete GroupVersionInfo::default_instance_;
  delete GroupVersionInfo_reflection_;
  delete GroupInfo::default_instance_;
  delete GroupInfo_reflection_;
  delete UserTokenInfo::default_instance_;
  delete UserTokenInfo_reflection_;
  delete PushResult::default_instance_;
  delete PushResult_reflection_;
  delete ShieldStatus::default_instance_;
  delete ShieldStatus_reflection_;
  delete OfflineFileInfo::default_instance_;
  delete OfflineFileInfo_reflection_;
}

void protobuf_AddDesc_Im_2eBase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rIm.Base.proto\022\007Im.Base\"\"\n\006IpAddr\022\n\n\002id"
    "\030\001 \002(\t\022\014\n\004port\030\002 \002(\r\"\222\001\n\010UserInfo\022\017\n\007use"
    "r_id\030\001 \002(\r\022\013\n\003sex\030\002 \002(\r\022\014\n\004nick\030\003 \002(\t\022\016\n"
    "\006avatar\030\004 \002(\t\022\r\n\005phone\030\005 \002(\t\022\r\n\005email\030\006 "
    "\002(\t\022\014\n\004name\030\007 \002(\t\022\016\n\006domain\030\010 \002(\t\022\016\n\006sta"
    "tus\030\t \002(\r\"\231\002\n\022ContactSessionInfo\022\022\n\nsess"
    "ion_id\030\001 \002(\r\022*\n\014session_type\030\002 \002(\0162\024.Im."
    "Base.SessionType\0222\n\016session_status\030\003 \002(\016"
    "2\032.Im.Base.SessionStatusType\022\023\n\013update_t"
    "ime\030\004 \002(\r\022\025\n\rlatest_msg_id\030\005 \002(\r\022\027\n\017late"
    "st_msg_data\030\006 \002(\014\022)\n\017latest_msg_type\030\007 \002"
    "(\0162\020.Im.Base.MsgType\022\037\n\027latest_msg_from_"
    "user_id\030\010 \002(\r\"K\n\nUserStatus\022\017\n\007user_id\030\001"
    " \002(\r\022,\n\013user_status\030\002 \002(\0162\027.Im.Base.User"
    "StatusType\"{\n\020ServerUserStatus\022\017\n\007user_i"
    "d\030\001 \002(\r\022,\n\013user_status\030\002 \002(\0162\027.Im.Base.U"
    "serStatusType\022(\n\013client_type\030\003 \002(\0162\023.Im."
    "Base.ClientType\"\336\001\n\nUnreadInfo\022\022\n\nsessio"
    "n_id\030\001 \002(\r\022*\n\014session_type\030\002 \002(\0162\024.Im.Ba"
    "se.SessionType\022\024\n\014unread_count\030\003 \002(\r\022\025\n\r"
    "latest_msg_id\030\004 \002(\r\022\027\n\017latest_msg_data\030\005"
    " \002(\014\022)\n\017latest_msg_type\030\006 \002(\0162\020.Im.Base."
    "MsgType\022\037\n\027latest_msg_from_user_id\030\007 \002(\r"
    "\"}\n\007MsgInfo\022\016\n\006msg_id\030\001 \002(\r\022\027\n\017from_sess"
    "ion_id\030\002 \002(\r\022\023\n\013create_time\030\003 \002(\r\022\"\n\010msg"
    "_type\030\004 \002(\0162\020.Im.Base.MsgType\022\020\n\010msg_dat"
    "a\030\005 \002(\014\"5\n\020GroupVersionInfo\022\020\n\010group_id\030"
    "\001 \002(\r\022\017\n\007version\030\002 \002(\r\"\310\001\n\tGroupInfo\022\020\n\010"
    "group_id\030\001 \002(\r\022\017\n\007version\030\002 \002(\r\022\024\n\014from_"
    "user_id\030\003 \002(\r\022\022\n\ngroup_name\030\004 \002(\t\022\024\n\014gro"
    "up_avatar\030\005 \002(\t\022&\n\ngroup_type\030\006 \002(\0162\022.Im"
    ".Base.GroupType\022\025\n\rshield_status\030\007 \002(\r\022\031"
    "\n\021group_member_list\030\010 \003(\r\"\200\001\n\rUserTokenI"
    "nfo\022\017\n\007user_id\030\001 \002(\r\022(\n\013client_type\030\002 \002("
    "\0162\023.Im.Base.ClientType\022\r\n\005token\030\003 \002(\t\022\022\n"
    "\npush_count\030\004 \002(\r\022\021\n\tpush_type\030\005 \002(\r\"5\n\n"
    "PushResult\022\022\n\nuser_token\030\001 \002(\t\022\023\n\013result"
    "_code\030\002 \002(\r\"H\n\014ShieldStatus\022\017\n\007user_id\030\001"
    " \002(\r\022\020\n\010group_id\030\002 \002(\r\022\025\n\rshield_status\030"
    "\003 \002(\r\"^\n\017OfflineFileInfo\022\024\n\014from_user_id"
    "\030\001 \002(\r\022\017\n\007task_id\030\002 \002(\t\022\021\n\tfile_name\030\003 \002"
    "(\t\022\021\n\tfile_size\030\004 \002(\t*\360\001\n\007Service\022\021\n\rSER"
    "VICE_LOGIN\020\001\022\026\n\022SERVICE_BUDDY_LIST\020\002\022\023\n\017"
    "SERVICE_MESSAGE\020\003\022\021\n\rSERVICE_GROUP\020\004\022\020\n\014"
    "SERVICE_FILE\020\005\022\032\n\026SERVICE_SWITCH_SERVICE"
    "\020\006\022\024\n\020SERVICE_INTERNAL\020\007\022\021\n\rSERVICE_OTHE"
    "R\020\010\022\024\n\020SERVICE_RELATION\020\t\022\020\n\014SERVICE_USE"
    "R\020\n\022\023\n\017SERVICE_SESSION\020\013*\362\001\n\014LoginComman"
    "d\022\023\n\016REQ_MSG_SERVER\020\201\002\022\023\n\016RES_MSG_SERVER"
    "\020\202\002\022\023\n\016REQ_USER_LOGIN\020\203\002\022\023\n\016RES_USER_LOG"
    "IN\020\204\002\022\024\n\017REQ_USER_LOGOUT\020\205\002\022\024\n\017RES_USER_"
    "LOGOUT\020\206\002\022\016\n\tKICK_USER\020\207\002\022\025\n\020REQ_DEVICE_"
    "TOKEN\020\210\002\022\025\n\020RES_DEVICE_TOKEN\020\211\002\022\021\n\014REQ_V"
    "ALIDATE\020\212\002\022\021\n\014RES_VALIDATE\020\213\002*\306\001\n\020BuddyL"
    "istCommand\022\037\n\032REQ_RECENT_CONTACT_SESSION"
    "\020\201\004\022\037\n\032RES_RECENT_CONTACT_SESSION\020\202\004\022\022\n\r"
    "STATUS_NOTIFY\020\203\004\022\025\n\020REQ_USERS_STATUS\020\212\004\022"
    "\025\n\020RES_USERS_STATUS\020\213\004\022\026\n\021REQ_CHANGE_AVA"
    "TAR\020\214\004\022\026\n\021RES_CHANGE_AVATAR\020\215\004*\265\002\n\016Messa"
    "geCommand\022\r\n\010MSG_DATA\020\201\006\022\021\n\014MSG_DATA_ACK"
    "\020\202\006\022\021\n\014MSG_READ_ACK\020\203\006\022\024\n\017MSG_READ_NOTIF"
    "Y\020\204\006\022\021\n\014REQ_MSG_TIME\020\205\006\022\021\n\014RES_MSG_TIME\020"
    "\206\006\022\025\n\020REQ_UNREAD_COUNT\020\207\006\022\025\n\020RES_UNREAD_"
    "COUNT\020\210\006\022\021\n\014REQ_MSG_LIST\020\211\006\022\021\n\014RES_MSG_L"
    "IST\020\212\006\022\026\n\021REQ_LATEST_MSG_ID\020\213\006\022\026\n\021RES_LA"
    "TEST_MSG_ID\020\214\006\022\026\n\021REQ_MSG_BY_MSG_ID\020\215\006\022\026"
    "\n\021RES_MSG_BY_MSG_ID\020\216\006*\227\002\n\014GroupCommand\022"
    "\024\n\017REQ_NORMAL_LIST\020\201\010\022\024\n\017RES_NORMAL_LIST"
    "\020\202\010\022\023\n\016REQ_GROUP_INFO\020\203\010\022\023\n\016RES_GROUP_IN"
    "FO\020\204\010\022\025\n\020REQ_CREATE_GROUP\020\205\010\022\025\n\020RES_CREA"
    "TE_GROUP\020\206\010\022\034\n\027REQ_CHANGE_GROUP_MEMBER\020\207"
    "\010\022\034\n\027RES_CHANGE_GROUP_MEMBER\020\210\010\022\025\n\020REQ_S"
    "HIELD_GROUP\020\211\010\022\025\n\020RES_SHIELD_GROUP\020\212\010\022\031\n"
    "\024CHANGE_MEMBER_NOTIFY\020\213\010*7\n\013FileCommand\022"
    "\023\n\016REQ_FILE_LOGIN\020\201\n\022\023\n\016RES_FILE_LOGIN\020\202"
    "\n*\035\n\rSwitchCommand\022\014\n\007P2P_CMD\020\201\014*\301\003\n\014Oth"
    "erCommand\022\016\n\tHEARTBEAT\020\201\016\022\025\n\020STOP_RECV_P"
    "ACKET\020\202\016\022\031\n\024REQ_GET_DEVICE_TOKEN\020\205\016\022\031\n\024R"
    "ES_GET_DEVICE_TOKEN\020\206\016\022\r\n\010ROLE_SET\020\207\016\022\025\n"
    "\020ONLINE_USER_INFO\020\210\016\022\024\n\017MSG_SERVER_INFO\020"
    "\211\016\022\025\n\020USER_INFO_UPDATE\020\212\016\022\026\n\021USER_COUNT_"
    "UPDATE\020\213\016\022\025\n\020SERVER_KICK_USER\020\214\016\022\030\n\023LOGI"
    "N_STATUS_NOTIFY\020\215\016\022\025\n\020REQ_PUSH_TO_USER\020\216"
    "\016\022\025\n\020RES_PUSH_TO_USER\020\217\016\022\023\n\016REQ_GET_SHIE"
    "LD\020\221\016\022\023\n\016RES_GET_SHIELD\020\222\016\022\026\n\021REQ_FILE_T"
    "RANSFER\020\223\016\022\026\n\021RES_FILE_TRANSFER\020\224\016\022\027\n\022RE"
    "Q_FILE_SERVER_IP\020\225\016\022\027\n\022RES_FILE_SERVER_I"
    "P\020\226\016*p\n\nSessionCmd\022\027\n\022REQ_RECENT_SESSION"
    "\020\201\020\022\027\n\022RES_RECENT_SESSION\020\202\020\022\027\n\022REQ_REMO"
    "VE_SESSION\020\203\020\022\027\n\022RES_REMOVE_SESSION\020\204\020*W"
    "\n\007UserCmd\022\022\n\rREQ_USER_INFO\020\201\022\022\022\n\rRES_USE"
    "R_INFO\020\202\022\022\021\n\014REQ_ALL_USER\020\203\022\022\021\n\014RES_ALL_"
    "USER\020\204\022*\223\002\n\nResultType\022\026\n\022REFUSE_REASON_"
    "NONE\020\001\022\033\n\027REFUSE_REASON_NO_SERVER\020\002\022!\n\035R"
    "EFUSE_REASON_MSG_SERVER_FULL\020\003\022\036\n\032REFUSE"
    "_REASON_NO_DB_SERVER\020\004\022!\n\035REFUSE_REASON_"
    "NO_LOGIN_SERVER\020\005\022!\n\035REFUSE_REASON_NO_RO"
    "UTE_SERVER\020\006\022$\n REFUSE_REASON_DB_VALIDAT"
    "E_FAILED\020\007\022!\n\035REFUSE_REASON_VERSION_TOO_"
    "OLD\020\010*M\n\016KickReasonType\022\036\n\032KICK_REASON_D"
    "UPLICATE_USER\020\001\022\033\n\027KICK_REASON_MOBILE_KI"
    "CK\020\002*2\n\016OnlineListType\022 \n\034ONLINE_LIST_TY"
    "PE_FRIEND_LIST\020\001*X\n\016UserStatusType\022\026\n\022US"
    "ER_STATUS_ONLINE\020\001\022\027\n\023USER_STATUS_OFFLIN"
    "E\020\002\022\025\n\021USER_STATUS_LEAVE\020\003*>\n\013SessionTyp"
    "e\022\027\n\023SESSION_TYPE_SINGLE\020\001\022\026\n\022SESSION_TY"
    "PE_GROUP\020\002*q\n\007MsgType\022\030\n\024MSG_TYPE_SINGLE"
    "_TEXT\020\001\022\031\n\025MSG_TYPE_SINGLE_AUDIO\020\002\022\027\n\023MS"
    "G_TYPE_GROUP_TEXT\020\003\022\030\n\024MSG_TYPE_GROUP_AU"
    "DIO\020\004*\177\n\nClientType\022\027\n\023CLIENT_TYPE_ANDRO"
    "ID\020\001\022\023\n\017CLIENT_TYPE_IOS\020\002\022\027\n\023CLIENT_TYPE"
    "_WINDOWS\020\003\022\023\n\017CLIENT_TYPE_MAC\020\004\022\025\n\021CLIEN"
    "T_TYPE_LINUX\020\005*6\n\tGroupType\022\025\n\021GROUP_TYP"
    "E_NORMAL\020\001\022\022\n\016GROUP_TYPE_TMP\020\002*G\n\017GroupM"
    "odifyType\022\031\n\025GROUP_MODIFY_TYPE_ADD\020\001\022\031\n\025"
    "GROUP_MODIFY_TYPE_DEL\020\002*7\n\010FileType\022\024\n\020F"
    "ILE_TYPE_ONLINE\020\001\022\025\n\021FILE_TYPE_OFFLINE\020\002"
    "*t\n\020ClientFileStatus\022\032\n\026CLIENT_FILE_PEER"
    "_READY\020\001\022\026\n\022CLIENT_FILE_CANCEL\020\002\022\026\n\022CLIE"
    "NT_FILE_REFUSE\020\003\022\024\n\020CLIENT_FILE_DONE\020\004*x"
    "\n\016ClientFileRole\022\030\n\024FILE_REALTIME_SENDER"
    "\020\001\022\030\n\024FILE_REALTIME_RECVER\020\002\022\027\n\023FILE_OFF"
    "LINE_UPLOAD\020\003\022\031\n\025FILE_OFFLINE_DOWNLOAD\020\004"
    "*\260\004\n\017FileServerError\022\022\n\016FILE_SERVER_OK\020\001"
    "\022$\n FILE_SERVER_CREATE_TASK_ID_ERROR\020\002\022!"
    "\n\035FILE_SERVER_CREATE_TASK_ERROR\020\003\022)\n%FIL"
    "E_SERVER_LOGIN_INVALID_TOKEN_ERROR\020\004\022+\n\'"
    "FILE_SERVER_INVALID_USER_FOR_TASK_ERROR\020"
    "\005\0224\n0FILE_SERVER_PULL_DATA_WITH_INVALID_"
    "TASK_ID_ERROR\020\006\022,\n(FILE_SERVER_PULL_DATA"
    "_ILLEGAL_USER_ERROR\020\007\022%\n!FILE_SERVER_PUL"
    "L_DATA_MKDIR_ERROR\020\010\022)\n%FILE_SERVER_PULL"
    "_DATA_OPEN_FILE_ERROR\020\t\0220\n,FILE_SERVER_P"
    "ULL_DATA_READ_FILE_HEADER_ERROR\020\n\022)\n%FIL"
    "E_SERVER_PULL_DATA_ALLOC_MEM_ERROR\020\013\022+\n\'"
    "FILE_SERVER_PULL_DATA_SEEK_OFFSET_ERROR\020"
    "\014\022(\n$FILE_SERVER_PULL_DATA_FINISHED_ERRO"
    "R\020\r*E\n\021SessionStatusType\022\025\n\021SESSION_STAT"
    "US_OK\020\001\022\031\n\025SESSION_STATUS_DELETE\020\002B)\n\'co"
    "m.example.user.myapplication.protobuf", 5597);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Im.Base.proto", &protobuf_RegisterTypes);
  IpAddr::default_instance_ = new IpAddr();
  UserInfo::default_instance_ = new UserInfo();
  ContactSessionInfo::default_instance_ = new ContactSessionInfo();
  UserStatus::default_instance_ = new UserStatus();
  ServerUserStatus::default_instance_ = new ServerUserStatus();
  UnreadInfo::default_instance_ = new UnreadInfo();
  MsgInfo::default_instance_ = new MsgInfo();
  GroupVersionInfo::default_instance_ = new GroupVersionInfo();
  GroupInfo::default_instance_ = new GroupInfo();
  UserTokenInfo::default_instance_ = new UserTokenInfo();
  PushResult::default_instance_ = new PushResult();
  ShieldStatus::default_instance_ = new ShieldStatus();
  OfflineFileInfo::default_instance_ = new OfflineFileInfo();
  IpAddr::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  ContactSessionInfo::default_instance_->InitAsDefaultInstance();
  UserStatus::default_instance_->InitAsDefaultInstance();
  ServerUserStatus::default_instance_->InitAsDefaultInstance();
  UnreadInfo::default_instance_->InitAsDefaultInstance();
  MsgInfo::default_instance_->InitAsDefaultInstance();
  GroupVersionInfo::default_instance_->InitAsDefaultInstance();
  GroupInfo::default_instance_->InitAsDefaultInstance();
  UserTokenInfo::default_instance_->InitAsDefaultInstance();
  PushResult::default_instance_->InitAsDefaultInstance();
  ShieldStatus::default_instance_->InitAsDefaultInstance();
  OfflineFileInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Im_2eBase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Im_2eBase_2eproto {
  StaticDescriptorInitializer_Im_2eBase_2eproto() {
    protobuf_AddDesc_Im_2eBase_2eproto();
  }
} static_descriptor_initializer_Im_2eBase_2eproto_;
const ::google::protobuf::EnumDescriptor* Service_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Service_descriptor_;
}
bool Service_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LoginCommand_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginCommand_descriptor_;
}
bool LoginCommand_IsValid(int value) {
  switch(value) {
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BuddyListCommand_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuddyListCommand_descriptor_;
}
bool BuddyListCommand_IsValid(int value) {
  switch(value) {
    case 513:
    case 514:
    case 515:
    case 522:
    case 523:
    case 524:
    case 525:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageCommand_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageCommand_descriptor_;
}
bool MessageCommand_IsValid(int value) {
  switch(value) {
    case 769:
    case 770:
    case 771:
    case 772:
    case 773:
    case 774:
    case 775:
    case 776:
    case 777:
    case 778:
    case 779:
    case 780:
    case 781:
    case 782:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GroupCommand_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupCommand_descriptor_;
}
bool GroupCommand_IsValid(int value) {
  switch(value) {
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FileCommand_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileCommand_descriptor_;
}
bool FileCommand_IsValid(int value) {
  switch(value) {
    case 1281:
    case 1282:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SwitchCommand_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwitchCommand_descriptor_;
}
bool SwitchCommand_IsValid(int value) {
  switch(value) {
    case 1537:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OtherCommand_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OtherCommand_descriptor_;
}
bool OtherCommand_IsValid(int value) {
  switch(value) {
    case 1793:
    case 1794:
    case 1797:
    case 1798:
    case 1799:
    case 1800:
    case 1801:
    case 1802:
    case 1803:
    case 1804:
    case 1805:
    case 1806:
    case 1807:
    case 1809:
    case 1810:
    case 1811:
    case 1812:
    case 1813:
    case 1814:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SessionCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionCmd_descriptor_;
}
bool SessionCmd_IsValid(int value) {
  switch(value) {
    case 2049:
    case 2050:
    case 2051:
    case 2052:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UserCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserCmd_descriptor_;
}
bool UserCmd_IsValid(int value) {
  switch(value) {
    case 2305:
    case 2306:
    case 2307:
    case 2308:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResultType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultType_descriptor_;
}
bool ResultType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* KickReasonType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickReasonType_descriptor_;
}
bool KickReasonType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OnlineListType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineListType_descriptor_;
}
bool OnlineListType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UserStatusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserStatusType_descriptor_;
}
bool UserStatusType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SessionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionType_descriptor_;
}
bool SessionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ClientType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientType_descriptor_;
}
bool ClientType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GroupType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupType_descriptor_;
}
bool GroupType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GroupModifyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupModifyType_descriptor_;
}
bool GroupModifyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FileType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileType_descriptor_;
}
bool FileType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ClientFileStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientFileStatus_descriptor_;
}
bool ClientFileStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ClientFileRole_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientFileRole_descriptor_;
}
bool ClientFileRole_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FileServerError_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileServerError_descriptor_;
}
bool FileServerError_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SessionStatusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionStatusType_descriptor_;
}
bool SessionStatusType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int IpAddr::kIdFieldNumber;
const int IpAddr::kPortFieldNumber;
#endif  // !_MSC_VER

IpAddr::IpAddr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Base.IpAddr)
}

void IpAddr::InitAsDefaultInstance() {
}

IpAddr::IpAddr(const IpAddr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Base.IpAddr)
}

void IpAddr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IpAddr::~IpAddr() {
  // @@protoc_insertion_point(destructor:Im.Base.IpAddr)
  SharedDtor();
}

void IpAddr::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void IpAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IpAddr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IpAddr_descriptor_;
}

const IpAddr& IpAddr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBase_2eproto();
  return *default_instance_;
}

IpAddr* IpAddr::default_instance_ = NULL;

IpAddr* IpAddr::New() const {
  return new IpAddr;
}

void IpAddr::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IpAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Base.IpAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Base.IpAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Base.IpAddr)
  return false;
#undef DO_
}

void IpAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Base.IpAddr)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Base.IpAddr)
}

::google::protobuf::uint8* IpAddr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Base.IpAddr)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Base.IpAddr)
  return target;
}

int IpAddr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IpAddr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IpAddr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IpAddr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IpAddr::MergeFrom(const IpAddr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IpAddr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpAddr::CopyFrom(const IpAddr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpAddr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IpAddr::Swap(IpAddr* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IpAddr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IpAddr_descriptor_;
  metadata.reflection = IpAddr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo::kUserIdFieldNumber;
const int UserInfo::kSexFieldNumber;
const int UserInfo::kNickFieldNumber;
const int UserInfo::kAvatarFieldNumber;
const int UserInfo::kPhoneFieldNumber;
const int UserInfo::kEmailFieldNumber;
const int UserInfo::kNameFieldNumber;
const int UserInfo::kDomainFieldNumber;
const int UserInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Base.UserInfo)
}

void UserInfo::InitAsDefaultInstance() {
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Base.UserInfo)
}

void UserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  sex_ = 0u;
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:Im.Base.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (nick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBase_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(user_id_, sex_);
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nick_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phone_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domain_->clear();
      }
    }
  }
  status_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Base.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sex;
        break;
      }

      // required uint32 sex = 2;
      case 2: {
        if (tag == 16) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nick;
        break;
      }

      // required string nick = 3;
      case 3: {
        if (tag == 26) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nick");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_avatar;
        break;
      }

      // required string avatar = 4;
      case 4: {
        if (tag == 34) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_phone;
        break;
      }

      // required string phone = 5;
      case 5: {
        if (tag == 42) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "phone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_email;
        break;
      }

      // required string email = 6;
      case 6: {
        if (tag == 50) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // required string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_domain;
        break;
      }

      // required string domain = 8;
      case 8: {
        if (tag == 66) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_status;
        break;
      }

      // required uint32 status = 9;
      case 9: {
        if (tag == 72) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Base.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Base.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Base.UserInfo)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 sex = 2;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sex(), output);
  }

  // required string nick = 3;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nick(), output);
  }

  // required string avatar = 4;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->avatar(), output);
  }

  // required string phone = 5;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->phone(), output);
  }

  // required string email = 6;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->email(), output);
  }

  // required string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // required string domain = 8;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->domain(), output);
  }

  // required uint32 status = 9;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Base.UserInfo)
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Base.UserInfo)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 sex = 2;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sex(), target);
  }

  // required string nick = 3;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nick(), target);
  }

  // required string avatar = 4;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->avatar(), target);
  }

  // required string phone = 5;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->phone(), target);
  }

  // required string email = 6;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->email(), target);
  }

  // required string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // required string domain = 8;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->domain(), target);
  }

  // required uint32 status = 9;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Base.UserInfo)
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 sex = 2;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // required string nick = 3;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

    // required string avatar = 4;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // required string phone = 5;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // required string email = 6;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // required string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string domain = 8;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 status = 9;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(sex_, other->sex_);
    std::swap(nick_, other->nick_);
    std::swap(avatar_, other->avatar_);
    std::swap(phone_, other->phone_);
    std::swap(email_, other->email_);
    std::swap(name_, other->name_);
    std::swap(domain_, other->domain_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactSessionInfo::kSessionIdFieldNumber;
const int ContactSessionInfo::kSessionTypeFieldNumber;
const int ContactSessionInfo::kSessionStatusFieldNumber;
const int ContactSessionInfo::kUpdateTimeFieldNumber;
const int ContactSessionInfo::kLatestMsgIdFieldNumber;
const int ContactSessionInfo::kLatestMsgDataFieldNumber;
const int ContactSessionInfo::kLatestMsgTypeFieldNumber;
const int ContactSessionInfo::kLatestMsgFromUserIdFieldNumber;
#endif  // !_MSC_VER

ContactSessionInfo::ContactSessionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Base.ContactSessionInfo)
}

void ContactSessionInfo::InitAsDefaultInstance() {
}

ContactSessionInfo::ContactSessionInfo(const ContactSessionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Base.ContactSessionInfo)
}

void ContactSessionInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_id_ = 0u;
  session_type_ = 1;
  session_status_ = 1;
  update_time_ = 0u;
  latest_msg_id_ = 0u;
  latest_msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latest_msg_type_ = 1;
  latest_msg_from_user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactSessionInfo::~ContactSessionInfo() {
  // @@protoc_insertion_point(destructor:Im.Base.ContactSessionInfo)
  SharedDtor();
}

void ContactSessionInfo::SharedDtor() {
  if (latest_msg_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete latest_msg_data_;
  }
  if (this != default_instance_) {
  }
}

void ContactSessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactSessionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactSessionInfo_descriptor_;
}

const ContactSessionInfo& ContactSessionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBase_2eproto();
  return *default_instance_;
}

ContactSessionInfo* ContactSessionInfo::default_instance_ = NULL;

ContactSessionInfo* ContactSessionInfo::New() const {
  return new ContactSessionInfo;
}

void ContactSessionInfo::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    session_id_ = 0u;
    session_type_ = 1;
    session_status_ = 1;
    update_time_ = 0u;
    latest_msg_id_ = 0u;
    if (has_latest_msg_data()) {
      if (latest_msg_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        latest_msg_data_->clear();
      }
    }
    latest_msg_type_ = 1;
    latest_msg_from_user_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactSessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Base.ContactSessionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 session_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .Im.Base.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::Im::Base::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_status;
        break;
      }

      // required .Im.Base.SessionStatusType session_status = 3;
      case 3: {
        if (tag == 24) {
         parse_session_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::SessionStatusType_IsValid(value)) {
            set_session_status(static_cast< ::Im::Base::SessionStatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_update_time;
        break;
      }

      // required uint32 update_time = 4;
      case 4: {
        if (tag == 32) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_latest_msg_id;
        break;
      }

      // required uint32 latest_msg_id = 5;
      case 5: {
        if (tag == 40) {
         parse_latest_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_msg_id_)));
          set_has_latest_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_latest_msg_data;
        break;
      }

      // required bytes latest_msg_data = 6;
      case 6: {
        if (tag == 50) {
         parse_latest_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_latest_msg_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_latest_msg_type;
        break;
      }

      // required .Im.Base.MsgType latest_msg_type = 7;
      case 7: {
        if (tag == 56) {
         parse_latest_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::MsgType_IsValid(value)) {
            set_latest_msg_type(static_cast< ::Im::Base::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_latest_msg_from_user_id;
        break;
      }

      // required uint32 latest_msg_from_user_id = 8;
      case 8: {
        if (tag == 64) {
         parse_latest_msg_from_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_msg_from_user_id_)));
          set_has_latest_msg_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Base.ContactSessionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Base.ContactSessionInfo)
  return false;
#undef DO_
}

void ContactSessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Base.ContactSessionInfo)
  // required uint32 session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session_id(), output);
  }

  // required .Im.Base.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required .Im.Base.SessionStatusType session_status = 3;
  if (has_session_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->session_status(), output);
  }

  // required uint32 update_time = 4;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->update_time(), output);
  }

  // required uint32 latest_msg_id = 5;
  if (has_latest_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->latest_msg_id(), output);
  }

  // required bytes latest_msg_data = 6;
  if (has_latest_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->latest_msg_data(), output);
  }

  // required .Im.Base.MsgType latest_msg_type = 7;
  if (has_latest_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->latest_msg_type(), output);
  }

  // required uint32 latest_msg_from_user_id = 8;
  if (has_latest_msg_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->latest_msg_from_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Base.ContactSessionInfo)
}

::google::protobuf::uint8* ContactSessionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Base.ContactSessionInfo)
  // required uint32 session_id = 1;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session_id(), target);
  }

  // required .Im.Base.SessionType session_type = 2;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->session_type(), target);
  }

  // required .Im.Base.SessionStatusType session_status = 3;
  if (has_session_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->session_status(), target);
  }

  // required uint32 update_time = 4;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->update_time(), target);
  }

  // required uint32 latest_msg_id = 5;
  if (has_latest_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->latest_msg_id(), target);
  }

  // required bytes latest_msg_data = 6;
  if (has_latest_msg_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->latest_msg_data(), target);
  }

  // required .Im.Base.MsgType latest_msg_type = 7;
  if (has_latest_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->latest_msg_type(), target);
  }

  // required uint32 latest_msg_from_user_id = 8;
  if (has_latest_msg_from_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->latest_msg_from_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Base.ContactSessionInfo)
  return target;
}

int ContactSessionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // required .Im.Base.SessionType session_type = 2;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required .Im.Base.SessionStatusType session_status = 3;
    if (has_session_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_status());
    }

    // required uint32 update_time = 4;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

    // required uint32 latest_msg_id = 5;
    if (has_latest_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latest_msg_id());
    }

    // required bytes latest_msg_data = 6;
    if (has_latest_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->latest_msg_data());
    }

    // required .Im.Base.MsgType latest_msg_type = 7;
    if (has_latest_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->latest_msg_type());
    }

    // required uint32 latest_msg_from_user_id = 8;
    if (has_latest_msg_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latest_msg_from_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactSessionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactSessionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactSessionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactSessionInfo::MergeFrom(const ContactSessionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_status()) {
      set_session_status(from.session_status());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_latest_msg_id()) {
      set_latest_msg_id(from.latest_msg_id());
    }
    if (from.has_latest_msg_data()) {
      set_latest_msg_data(from.latest_msg_data());
    }
    if (from.has_latest_msg_type()) {
      set_latest_msg_type(from.latest_msg_type());
    }
    if (from.has_latest_msg_from_user_id()) {
      set_latest_msg_from_user_id(from.latest_msg_from_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactSessionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactSessionInfo::CopyFrom(const ContactSessionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactSessionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void ContactSessionInfo::Swap(ContactSessionInfo* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_status_, other->session_status_);
    std::swap(update_time_, other->update_time_);
    std::swap(latest_msg_id_, other->latest_msg_id_);
    std::swap(latest_msg_data_, other->latest_msg_data_);
    std::swap(latest_msg_type_, other->latest_msg_type_);
    std::swap(latest_msg_from_user_id_, other->latest_msg_from_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactSessionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactSessionInfo_descriptor_;
  metadata.reflection = ContactSessionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserStatus::kUserIdFieldNumber;
const int UserStatus::kUserStatusFieldNumber;
#endif  // !_MSC_VER

UserStatus::UserStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Base.UserStatus)
}

void UserStatus::InitAsDefaultInstance() {
}

UserStatus::UserStatus(const UserStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Base.UserStatus)
}

void UserStatus::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  user_status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserStatus::~UserStatus() {
  // @@protoc_insertion_point(destructor:Im.Base.UserStatus)
  SharedDtor();
}

void UserStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserStatus_descriptor_;
}

const UserStatus& UserStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBase_2eproto();
  return *default_instance_;
}

UserStatus* UserStatus::default_instance_ = NULL;

UserStatus* UserStatus::New() const {
  return new UserStatus;
}

void UserStatus::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_id_ = 0u;
    user_status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Base.UserStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_status;
        break;
      }

      // required .Im.Base.UserStatusType user_status = 2;
      case 2: {
        if (tag == 16) {
         parse_user_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::UserStatusType_IsValid(value)) {
            set_user_status(static_cast< ::Im::Base::UserStatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Base.UserStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Base.UserStatus)
  return false;
#undef DO_
}

void UserStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Base.UserStatus)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .Im.Base.UserStatusType user_status = 2;
  if (has_user_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->user_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Base.UserStatus)
}

::google::protobuf::uint8* UserStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Base.UserStatus)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .Im.Base.UserStatusType user_status = 2;
  if (has_user_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->user_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Base.UserStatus)
  return target;
}

int UserStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .Im.Base.UserStatusType user_status = 2;
    if (has_user_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserStatus::MergeFrom(const UserStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_status()) {
      set_user_status(from.user_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStatus::CopyFrom(const UserStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserStatus::Swap(UserStatus* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(user_status_, other->user_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserStatus_descriptor_;
  metadata.reflection = UserStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerUserStatus::kUserIdFieldNumber;
const int ServerUserStatus::kUserStatusFieldNumber;
const int ServerUserStatus::kClientTypeFieldNumber;
#endif  // !_MSC_VER

ServerUserStatus::ServerUserStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Base.ServerUserStatus)
}

void ServerUserStatus::InitAsDefaultInstance() {
}

ServerUserStatus::ServerUserStatus(const ServerUserStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Base.ServerUserStatus)
}

void ServerUserStatus::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  user_status_ = 1;
  client_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerUserStatus::~ServerUserStatus() {
  // @@protoc_insertion_point(destructor:Im.Base.ServerUserStatus)
  SharedDtor();
}

void ServerUserStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerUserStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerUserStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerUserStatus_descriptor_;
}

const ServerUserStatus& ServerUserStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBase_2eproto();
  return *default_instance_;
}

ServerUserStatus* ServerUserStatus::default_instance_ = NULL;

ServerUserStatus* ServerUserStatus::New() const {
  return new ServerUserStatus;
}

void ServerUserStatus::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = 0u;
    user_status_ = 1;
    client_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerUserStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Base.ServerUserStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_status;
        break;
      }

      // required .Im.Base.UserStatusType user_status = 2;
      case 2: {
        if (tag == 16) {
         parse_user_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::UserStatusType_IsValid(value)) {
            set_user_status(static_cast< ::Im::Base::UserStatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_client_type;
        break;
      }

      // required .Im.Base.ClientType client_type = 3;
      case 3: {
        if (tag == 24) {
         parse_client_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::ClientType_IsValid(value)) {
            set_client_type(static_cast< ::Im::Base::ClientType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Base.ServerUserStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Base.ServerUserStatus)
  return false;
#undef DO_
}

void ServerUserStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Base.ServerUserStatus)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .Im.Base.UserStatusType user_status = 2;
  if (has_user_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->user_status(), output);
  }

  // required .Im.Base.ClientType client_type = 3;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->client_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Base.ServerUserStatus)
}

::google::protobuf::uint8* ServerUserStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Base.ServerUserStatus)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .Im.Base.UserStatusType user_status = 2;
  if (has_user_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->user_status(), target);
  }

  // required .Im.Base.ClientType client_type = 3;
  if (has_client_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->client_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Base.ServerUserStatus)
  return target;
}

int ServerUserStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .Im.Base.UserStatusType user_status = 2;
    if (has_user_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_status());
    }

    // required .Im.Base.ClientType client_type = 3;
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerUserStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerUserStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerUserStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerUserStatus::MergeFrom(const ServerUserStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_status()) {
      set_user_status(from.user_status());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerUserStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerUserStatus::CopyFrom(const ServerUserStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerUserStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ServerUserStatus::Swap(ServerUserStatus* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(user_status_, other->user_status_);
    std::swap(client_type_, other->client_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerUserStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerUserStatus_descriptor_;
  metadata.reflection = ServerUserStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnreadInfo::kSessionIdFieldNumber;
const int UnreadInfo::kSessionTypeFieldNumber;
const int UnreadInfo::kUnreadCountFieldNumber;
const int UnreadInfo::kLatestMsgIdFieldNumber;
const int UnreadInfo::kLatestMsgDataFieldNumber;
const int UnreadInfo::kLatestMsgTypeFieldNumber;
const int UnreadInfo::kLatestMsgFromUserIdFieldNumber;
#endif  // !_MSC_VER

UnreadInfo::UnreadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Base.UnreadInfo)
}

void UnreadInfo::InitAsDefaultInstance() {
}

UnreadInfo::UnreadInfo(const UnreadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Base.UnreadInfo)
}

void UnreadInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_id_ = 0u;
  session_type_ = 1;
  unread_count_ = 0u;
  latest_msg_id_ = 0u;
  latest_msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latest_msg_type_ = 1;
  latest_msg_from_user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnreadInfo::~UnreadInfo() {
  // @@protoc_insertion_point(destructor:Im.Base.UnreadInfo)
  SharedDtor();
}

void UnreadInfo::SharedDtor() {
  if (latest_msg_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete latest_msg_data_;
  }
  if (this != default_instance_) {
  }
}

void UnreadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnreadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnreadInfo_descriptor_;
}

const UnreadInfo& UnreadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBase_2eproto();
  return *default_instance_;
}

UnreadInfo* UnreadInfo::default_instance_ = NULL;

UnreadInfo* UnreadInfo::New() const {
  return new UnreadInfo;
}

void UnreadInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UnreadInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(unread_count_, latest_msg_id_);
    session_id_ = 0u;
    session_type_ = 1;
    if (has_latest_msg_data()) {
      if (latest_msg_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        latest_msg_data_->clear();
      }
    }
    latest_msg_type_ = 1;
    latest_msg_from_user_id_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnreadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Base.UnreadInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 session_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .Im.Base.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::Im::Base::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unread_count;
        break;
      }

      // required uint32 unread_count = 3;
      case 3: {
        if (tag == 24) {
         parse_unread_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unread_count_)));
          set_has_unread_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_latest_msg_id;
        break;
      }

      // required uint32 latest_msg_id = 4;
      case 4: {
        if (tag == 32) {
         parse_latest_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_msg_id_)));
          set_has_latest_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_latest_msg_data;
        break;
      }

      // required bytes latest_msg_data = 5;
      case 5: {
        if (tag == 42) {
         parse_latest_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_latest_msg_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_latest_msg_type;
        break;
      }

      // required .Im.Base.MsgType latest_msg_type = 6;
      case 6: {
        if (tag == 48) {
         parse_latest_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::MsgType_IsValid(value)) {
            set_latest_msg_type(static_cast< ::Im::Base::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_latest_msg_from_user_id;
        break;
      }

      // required uint32 latest_msg_from_user_id = 7;
      case 7: {
        if (tag == 56) {
         parse_latest_msg_from_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_msg_from_user_id_)));
          set_has_latest_msg_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Base.UnreadInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Base.UnreadInfo)
  return false;
#undef DO_
}

void UnreadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Base.UnreadInfo)
  // required uint32 session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session_id(), output);
  }

  // required .Im.Base.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 unread_count = 3;
  if (has_unread_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unread_count(), output);
  }

  // required uint32 latest_msg_id = 4;
  if (has_latest_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->latest_msg_id(), output);
  }

  // required bytes latest_msg_data = 5;
  if (has_latest_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->latest_msg_data(), output);
  }

  // required .Im.Base.MsgType latest_msg_type = 6;
  if (has_latest_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->latest_msg_type(), output);
  }

  // required uint32 latest_msg_from_user_id = 7;
  if (has_latest_msg_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->latest_msg_from_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Base.UnreadInfo)
}

::google::protobuf::uint8* UnreadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Base.UnreadInfo)
  // required uint32 session_id = 1;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session_id(), target);
  }

  // required .Im.Base.SessionType session_type = 2;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->session_type(), target);
  }

  // required uint32 unread_count = 3;
  if (has_unread_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->unread_count(), target);
  }

  // required uint32 latest_msg_id = 4;
  if (has_latest_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->latest_msg_id(), target);
  }

  // required bytes latest_msg_data = 5;
  if (has_latest_msg_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->latest_msg_data(), target);
  }

  // required .Im.Base.MsgType latest_msg_type = 6;
  if (has_latest_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->latest_msg_type(), target);
  }

  // required uint32 latest_msg_from_user_id = 7;
  if (has_latest_msg_from_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->latest_msg_from_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Base.UnreadInfo)
  return target;
}

int UnreadInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // required .Im.Base.SessionType session_type = 2;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 unread_count = 3;
    if (has_unread_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unread_count());
    }

    // required uint32 latest_msg_id = 4;
    if (has_latest_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latest_msg_id());
    }

    // required bytes latest_msg_data = 5;
    if (has_latest_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->latest_msg_data());
    }

    // required .Im.Base.MsgType latest_msg_type = 6;
    if (has_latest_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->latest_msg_type());
    }

    // required uint32 latest_msg_from_user_id = 7;
    if (has_latest_msg_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latest_msg_from_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnreadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnreadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnreadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnreadInfo::MergeFrom(const UnreadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_unread_count()) {
      set_unread_count(from.unread_count());
    }
    if (from.has_latest_msg_id()) {
      set_latest_msg_id(from.latest_msg_id());
    }
    if (from.has_latest_msg_data()) {
      set_latest_msg_data(from.latest_msg_data());
    }
    if (from.has_latest_msg_type()) {
      set_latest_msg_type(from.latest_msg_type());
    }
    if (from.has_latest_msg_from_user_id()) {
      set_latest_msg_from_user_id(from.latest_msg_from_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnreadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnreadInfo::CopyFrom(const UnreadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnreadInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void UnreadInfo::Swap(UnreadInfo* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(unread_count_, other->unread_count_);
    std::swap(latest_msg_id_, other->latest_msg_id_);
    std::swap(latest_msg_data_, other->latest_msg_data_);
    std::swap(latest_msg_type_, other->latest_msg_type_);
    std::swap(latest_msg_from_user_id_, other->latest_msg_from_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnreadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnreadInfo_descriptor_;
  metadata.reflection = UnreadInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgInfo::kMsgIdFieldNumber;
const int MsgInfo::kFromSessionIdFieldNumber;
const int MsgInfo::kCreateTimeFieldNumber;
const int MsgInfo::kMsgTypeFieldNumber;
const int MsgInfo::kMsgDataFieldNumber;
#endif  // !_MSC_VER

MsgInfo::MsgInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Base.MsgInfo)
}

void MsgInfo::InitAsDefaultInstance() {
}

MsgInfo::MsgInfo(const MsgInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Base.MsgInfo)
}

void MsgInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_id_ = 0u;
  from_session_id_ = 0u;
  create_time_ = 0u;
  msg_type_ = 1;
  msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgInfo::~MsgInfo() {
  // @@protoc_insertion_point(destructor:Im.Base.MsgInfo)
  SharedDtor();
}

void MsgInfo::SharedDtor() {
  if (msg_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_data_;
  }
  if (this != default_instance_) {
  }
}

void MsgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgInfo_descriptor_;
}

const MsgInfo& MsgInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBase_2eproto();
  return *default_instance_;
}

MsgInfo* MsgInfo::default_instance_ = NULL;

MsgInfo* MsgInfo::New() const {
  return new MsgInfo;
}

void MsgInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(msg_id_, create_time_);
    msg_type_ = 1;
    if (has_msg_data()) {
      if (msg_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Base.MsgInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 msg_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_from_session_id;
        break;
      }

      // required uint32 from_session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_from_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_session_id_)));
          set_has_from_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 3;
      case 3: {
        if (tag == 24) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_type;
        break;
      }

      // required .Im.Base.MsgType msg_type = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::MsgType_IsValid(value)) {
            set_msg_type(static_cast< ::Im::Base::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msg_data;
        break;
      }

      // required bytes msg_data = 5;
      case 5: {
        if (tag == 42) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Base.MsgInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Base.MsgInfo)
  return false;
#undef DO_
}

void MsgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Base.MsgInfo)
  // required uint32 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_id(), output);
  }

  // required uint32 from_session_id = 2;
  if (has_from_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->from_session_id(), output);
  }

  // required uint32 create_time = 3;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->create_time(), output);
  }

  // required .Im.Base.MsgType msg_type = 4;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->msg_type(), output);
  }

  // required bytes msg_data = 5;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->msg_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Base.MsgInfo)
}

::google::protobuf::uint8* MsgInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Base.MsgInfo)
  // required uint32 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_id(), target);
  }

  // required uint32 from_session_id = 2;
  if (has_from_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->from_session_id(), target);
  }

  // required uint32 create_time = 3;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->create_time(), target);
  }

  // required .Im.Base.MsgType msg_type = 4;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->msg_type(), target);
  }

  // required bytes msg_data = 5;
  if (has_msg_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->msg_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Base.MsgInfo)
  return target;
}

int MsgInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 msg_id = 1;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

    // required uint32 from_session_id = 2;
    if (has_from_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_session_id());
    }

    // required uint32 create_time = 3;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // required .Im.Base.MsgType msg_type = 4;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // required bytes msg_data = 5;
    if (has_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgInfo::MergeFrom(const MsgInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_from_session_id()) {
      set_from_session_id(from.from_session_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_msg_data()) {
      set_msg_data(from.msg_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgInfo::CopyFrom(const MsgInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MsgInfo::Swap(MsgInfo* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(from_session_id_, other->from_session_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(msg_data_, other->msg_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgInfo_descriptor_;
  metadata.reflection = MsgInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupVersionInfo::kGroupIdFieldNumber;
const int GroupVersionInfo::kVersionFieldNumber;
#endif  // !_MSC_VER

GroupVersionInfo::GroupVersionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Base.GroupVersionInfo)
}

void GroupVersionInfo::InitAsDefaultInstance() {
}

GroupVersionInfo::GroupVersionInfo(const GroupVersionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Base.GroupVersionInfo)
}

void GroupVersionInfo::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupVersionInfo::~GroupVersionInfo() {
  // @@protoc_insertion_point(destructor:Im.Base.GroupVersionInfo)
  SharedDtor();
}

void GroupVersionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupVersionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupVersionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupVersionInfo_descriptor_;
}

const GroupVersionInfo& GroupVersionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBase_2eproto();
  return *default_instance_;
}

GroupVersionInfo* GroupVersionInfo::default_instance_ = NULL;

GroupVersionInfo* GroupVersionInfo::New() const {
  return new GroupVersionInfo;
}

void GroupVersionInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GroupVersionInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(group_id_, version_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupVersionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Base.GroupVersionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // required uint32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Base.GroupVersionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Base.GroupVersionInfo)
  return false;
#undef DO_
}

void GroupVersionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Base.GroupVersionInfo)
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required uint32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Base.GroupVersionInfo)
}

::google::protobuf::uint8* GroupVersionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Base.GroupVersionInfo)
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // required uint32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Base.GroupVersionInfo)
  return target;
}

int GroupVersionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupVersionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupVersionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupVersionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupVersionInfo::MergeFrom(const GroupVersionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupVersionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupVersionInfo::CopyFrom(const GroupVersionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupVersionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GroupVersionInfo::Swap(GroupVersionInfo* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupVersionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupVersionInfo_descriptor_;
  metadata.reflection = GroupVersionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupInfo::kGroupIdFieldNumber;
const int GroupInfo::kVersionFieldNumber;
const int GroupInfo::kFromUserIdFieldNumber;
const int GroupInfo::kGroupNameFieldNumber;
const int GroupInfo::kGroupAvatarFieldNumber;
const int GroupInfo::kGroupTypeFieldNumber;
const int GroupInfo::kShieldStatusFieldNumber;
const int GroupInfo::kGroupMemberListFieldNumber;
#endif  // !_MSC_VER

GroupInfo::GroupInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Base.GroupInfo)
}

void GroupInfo::InitAsDefaultInstance() {
}

GroupInfo::GroupInfo(const GroupInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Base.GroupInfo)
}

void GroupInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_ = 0u;
  version_ = 0u;
  from_user_id_ = 0u;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_type_ = 1;
  shield_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupInfo::~GroupInfo() {
  // @@protoc_insertion_point(destructor:Im.Base.GroupInfo)
  SharedDtor();
}

void GroupInfo::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_avatar_;
  }
  if (this != default_instance_) {
  }
}

void GroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupInfo_descriptor_;
}

const GroupInfo& GroupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBase_2eproto();
  return *default_instance_;
}

GroupInfo* GroupInfo::default_instance_ = NULL;

GroupInfo* GroupInfo::New() const {
  return new GroupInfo;
}

void GroupInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GroupInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(group_id_, version_);
    from_user_id_ = 0u;
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_group_avatar()) {
      if (group_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_avatar_->clear();
      }
    }
    group_type_ = 1;
    shield_status_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  group_member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Base.GroupInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // required uint32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_from_user_id;
        break;
      }

      // required uint32 from_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_from_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_name;
        break;
      }

      // required string group_name = 4;
      case 4: {
        if (tag == 34) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_group_avatar;
        break;
      }

      // required string group_avatar = 5;
      case 5: {
        if (tag == 42) {
         parse_group_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_avatar().data(), this->group_avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_group_type;
        break;
      }

      // required .Im.Base.GroupType group_type = 6;
      case 6: {
        if (tag == 48) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::Im::Base::GroupType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_shield_status;
        break;
      }

      // required uint32 shield_status = 7;
      case 7: {
        if (tag == 56) {
         parse_shield_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shield_status_)));
          set_has_shield_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_group_member_list;
        break;
      }

      // repeated uint32 group_member_list = 8;
      case 8: {
        if (tag == 64) {
         parse_group_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_group_member_list())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_group_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_group_member_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Base.GroupInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Base.GroupInfo)
  return false;
#undef DO_
}

void GroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Base.GroupInfo)
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required uint32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // required uint32 from_user_id = 3;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->from_user_id(), output);
  }

  // required string group_name = 4;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group_name(), output);
  }

  // required string group_avatar = 5;
  if (has_group_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_avatar().data(), this->group_avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->group_avatar(), output);
  }

  // required .Im.Base.GroupType group_type = 6;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->group_type(), output);
  }

  // required uint32 shield_status = 7;
  if (has_shield_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->shield_status(), output);
  }

  // repeated uint32 group_member_list = 8;
  for (int i = 0; i < this->group_member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->group_member_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Base.GroupInfo)
}

::google::protobuf::uint8* GroupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Base.GroupInfo)
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // required uint32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // required uint32 from_user_id = 3;
  if (has_from_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->from_user_id(), target);
  }

  // required string group_name = 4;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->group_name(), target);
  }

  // required string group_avatar = 5;
  if (has_group_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_avatar().data(), this->group_avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->group_avatar(), target);
  }

  // required .Im.Base.GroupType group_type = 6;
  if (has_group_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->group_type(), target);
  }

  // required uint32 shield_status = 7;
  if (has_shield_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->shield_status(), target);
  }

  // repeated uint32 group_member_list = 8;
  for (int i = 0; i < this->group_member_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->group_member_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Base.GroupInfo)
  return target;
}

int GroupInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required uint32 from_user_id = 3;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_user_id());
    }

    // required string group_name = 4;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // required string group_avatar = 5;
    if (has_group_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_avatar());
    }

    // required .Im.Base.GroupType group_type = 6;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

    // required uint32 shield_status = 7;
    if (has_shield_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shield_status());
    }

  }
  // repeated uint32 group_member_list = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->group_member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->group_member_list(i));
    }
    total_size += 1 * this->group_member_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupInfo::MergeFrom(const GroupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_member_list_.MergeFrom(from.group_member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_group_avatar()) {
      set_group_avatar(from.group_avatar());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_shield_status()) {
      set_shield_status(from.shield_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupInfo::CopyFrom(const GroupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void GroupInfo::Swap(GroupInfo* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(version_, other->version_);
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(group_name_, other->group_name_);
    std::swap(group_avatar_, other->group_avatar_);
    std::swap(group_type_, other->group_type_);
    std::swap(shield_status_, other->shield_status_);
    group_member_list_.Swap(&other->group_member_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupInfo_descriptor_;
  metadata.reflection = GroupInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserTokenInfo::kUserIdFieldNumber;
const int UserTokenInfo::kClientTypeFieldNumber;
const int UserTokenInfo::kTokenFieldNumber;
const int UserTokenInfo::kPushCountFieldNumber;
const int UserTokenInfo::kPushTypeFieldNumber;
#endif  // !_MSC_VER

UserTokenInfo::UserTokenInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Base.UserTokenInfo)
}

void UserTokenInfo::InitAsDefaultInstance() {
}

UserTokenInfo::UserTokenInfo(const UserTokenInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Base.UserTokenInfo)
}

void UserTokenInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  client_type_ = 1;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  push_count_ = 0u;
  push_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserTokenInfo::~UserTokenInfo() {
  // @@protoc_insertion_point(destructor:Im.Base.UserTokenInfo)
  SharedDtor();
}

void UserTokenInfo::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void UserTokenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserTokenInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserTokenInfo_descriptor_;
}

const UserTokenInfo& UserTokenInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBase_2eproto();
  return *default_instance_;
}

UserTokenInfo* UserTokenInfo::default_instance_ = NULL;

UserTokenInfo* UserTokenInfo::New() const {
  return new UserTokenInfo;
}

void UserTokenInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserTokenInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(push_count_, push_type_);
    user_id_ = 0u;
    client_type_ = 1;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserTokenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Base.UserTokenInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_client_type;
        break;
      }

      // required .Im.Base.ClientType client_type = 2;
      case 2: {
        if (tag == 16) {
         parse_client_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::ClientType_IsValid(value)) {
            set_client_type(static_cast< ::Im::Base::ClientType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // required string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_push_count;
        break;
      }

      // required uint32 push_count = 4;
      case 4: {
        if (tag == 32) {
         parse_push_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &push_count_)));
          set_has_push_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_push_type;
        break;
      }

      // required uint32 push_type = 5;
      case 5: {
        if (tag == 40) {
         parse_push_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &push_type_)));
          set_has_push_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Base.UserTokenInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Base.UserTokenInfo)
  return false;
#undef DO_
}

void UserTokenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Base.UserTokenInfo)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .Im.Base.ClientType client_type = 2;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->client_type(), output);
  }

  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // required uint32 push_count = 4;
  if (has_push_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->push_count(), output);
  }

  // required uint32 push_type = 5;
  if (has_push_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->push_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Base.UserTokenInfo)
}

::google::protobuf::uint8* UserTokenInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Base.UserTokenInfo)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .Im.Base.ClientType client_type = 2;
  if (has_client_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->client_type(), target);
  }

  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // required uint32 push_count = 4;
  if (has_push_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->push_count(), target);
  }

  // required uint32 push_type = 5;
  if (has_push_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->push_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Base.UserTokenInfo)
  return target;
}

int UserTokenInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .Im.Base.ClientType client_type = 2;
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
    }

    // required string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required uint32 push_count = 4;
    if (has_push_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->push_count());
    }

    // required uint32 push_type = 5;
    if (has_push_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->push_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserTokenInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserTokenInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserTokenInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserTokenInfo::MergeFrom(const UserTokenInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_push_count()) {
      set_push_count(from.push_count());
    }
    if (from.has_push_type()) {
      set_push_type(from.push_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserTokenInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTokenInfo::CopyFrom(const UserTokenInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTokenInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void UserTokenInfo::Swap(UserTokenInfo* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(client_type_, other->client_type_);
    std::swap(token_, other->token_);
    std::swap(push_count_, other->push_count_);
    std::swap(push_type_, other->push_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserTokenInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserTokenInfo_descriptor_;
  metadata.reflection = UserTokenInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushResult::kUserTokenFieldNumber;
const int PushResult::kResultCodeFieldNumber;
#endif  // !_MSC_VER

PushResult::PushResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Base.PushResult)
}

void PushResult::InitAsDefaultInstance() {
}

PushResult::PushResult(const PushResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Base.PushResult)
}

void PushResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushResult::~PushResult() {
  // @@protoc_insertion_point(destructor:Im.Base.PushResult)
  SharedDtor();
}

void PushResult::SharedDtor() {
  if (user_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_token_;
  }
  if (this != default_instance_) {
  }
}

void PushResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushResult_descriptor_;
}

const PushResult& PushResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBase_2eproto();
  return *default_instance_;
}

PushResult* PushResult::default_instance_ = NULL;

PushResult* PushResult::New() const {
  return new PushResult;
}

void PushResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_user_token()) {
      if (user_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_token_->clear();
      }
    }
    result_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Base.PushResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_token().data(), this->user_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Base.PushResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Base.PushResult)
  return false;
#undef DO_
}

void PushResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Base.PushResult)
  // required string user_token = 1;
  if (has_user_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_token().data(), this->user_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_token(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Base.PushResult)
}

::google::protobuf::uint8* PushResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Base.PushResult)
  // required string user_token = 1;
  if (has_user_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_token().data(), this->user_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_token(), target);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Base.PushResult)
  return target;
}

int PushResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_token = 1;
    if (has_user_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_token());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushResult::MergeFrom(const PushResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_token()) {
      set_user_token(from.user_token());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushResult::CopyFrom(const PushResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PushResult::Swap(PushResult* other) {
  if (other != this) {
    std::swap(user_token_, other->user_token_);
    std::swap(result_code_, other->result_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushResult_descriptor_;
  metadata.reflection = PushResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShieldStatus::kUserIdFieldNumber;
const int ShieldStatus::kGroupIdFieldNumber;
const int ShieldStatus::kShieldStatusFieldNumber;
#endif  // !_MSC_VER

ShieldStatus::ShieldStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Base.ShieldStatus)
}

void ShieldStatus::InitAsDefaultInstance() {
}

ShieldStatus::ShieldStatus(const ShieldStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Base.ShieldStatus)
}

void ShieldStatus::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  group_id_ = 0u;
  shield_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShieldStatus::~ShieldStatus() {
  // @@protoc_insertion_point(destructor:Im.Base.ShieldStatus)
  SharedDtor();
}

void ShieldStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShieldStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShieldStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShieldStatus_descriptor_;
}

const ShieldStatus& ShieldStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBase_2eproto();
  return *default_instance_;
}

ShieldStatus* ShieldStatus::default_instance_ = NULL;

ShieldStatus* ShieldStatus::New() const {
  return new ShieldStatus;
}

void ShieldStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShieldStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, shield_status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShieldStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Base.ShieldStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_shield_status;
        break;
      }

      // required uint32 shield_status = 3;
      case 3: {
        if (tag == 24) {
         parse_shield_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shield_status_)));
          set_has_shield_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Base.ShieldStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Base.ShieldStatus)
  return false;
#undef DO_
}

void ShieldStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Base.ShieldStatus)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 shield_status = 3;
  if (has_shield_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shield_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Base.ShieldStatus)
}

::google::protobuf::uint8* ShieldStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Base.ShieldStatus)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group_id(), target);
  }

  // required uint32 shield_status = 3;
  if (has_shield_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->shield_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Base.ShieldStatus)
  return target;
}

int ShieldStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 shield_status = 3;
    if (has_shield_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shield_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShieldStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShieldStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShieldStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShieldStatus::MergeFrom(const ShieldStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_shield_status()) {
      set_shield_status(from.shield_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShieldStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShieldStatus::CopyFrom(const ShieldStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShieldStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ShieldStatus::Swap(ShieldStatus* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(shield_status_, other->shield_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShieldStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShieldStatus_descriptor_;
  metadata.reflection = ShieldStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfflineFileInfo::kFromUserIdFieldNumber;
const int OfflineFileInfo::kTaskIdFieldNumber;
const int OfflineFileInfo::kFileNameFieldNumber;
const int OfflineFileInfo::kFileSizeFieldNumber;
#endif  // !_MSC_VER

OfflineFileInfo::OfflineFileInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Base.OfflineFileInfo)
}

void OfflineFileInfo::InitAsDefaultInstance() {
}

OfflineFileInfo::OfflineFileInfo(const OfflineFileInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Base.OfflineFileInfo)
}

void OfflineFileInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_user_id_ = 0u;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfflineFileInfo::~OfflineFileInfo() {
  // @@protoc_insertion_point(destructor:Im.Base.OfflineFileInfo)
  SharedDtor();
}

void OfflineFileInfo::SharedDtor() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (file_size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_size_;
  }
  if (this != default_instance_) {
  }
}

void OfflineFileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfflineFileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfflineFileInfo_descriptor_;
}

const OfflineFileInfo& OfflineFileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eBase_2eproto();
  return *default_instance_;
}

OfflineFileInfo* OfflineFileInfo::default_instance_ = NULL;

OfflineFileInfo* OfflineFileInfo::New() const {
  return new OfflineFileInfo;
}

void OfflineFileInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    from_user_id_ = 0u;
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        task_id_->clear();
      }
    }
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_name_->clear();
      }
    }
    if (has_file_size()) {
      if (file_size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_size_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfflineFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Base.OfflineFileInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 from_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_task_id;
        break;
      }

      // required string task_id = 2;
      case 2: {
        if (tag == 18) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->task_id().data(), this->task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "task_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_file_name;
        break;
      }

      // required string file_name = 3;
      case 3: {
        if (tag == 26) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_file_size;
        break;
      }

      // required string file_size = 4;
      case 4: {
        if (tag == 34) {
         parse_file_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_size().data(), this->file_size().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_size");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Base.OfflineFileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Base.OfflineFileInfo)
  return false;
#undef DO_
}

void OfflineFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Base.OfflineFileInfo)
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_user_id(), output);
  }

  // required string task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->task_id(), output);
  }

  // required string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_name(), output);
  }

  // required string file_size = 4;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_size().data(), this->file_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->file_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Base.OfflineFileInfo)
}

::google::protobuf::uint8* OfflineFileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Base.OfflineFileInfo)
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->from_user_id(), target);
  }

  // required string task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->task_id(), target);
  }

  // required string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_name(), target);
  }

  // required string file_size = 4;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_size().data(), this->file_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Base.OfflineFileInfo)
  return target;
}

int OfflineFileInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 from_user_id = 1;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_user_id());
    }

    // required string task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_id());
    }

    // required string file_name = 3;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // required string file_size = 4;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineFileInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfflineFileInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfflineFileInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfflineFileInfo::MergeFrom(const OfflineFileInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfflineFileInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineFileInfo::CopyFrom(const OfflineFileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineFileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void OfflineFileInfo::Swap(OfflineFileInfo* other) {
  if (other != this) {
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(file_name_, other->file_name_);
    std::swap(file_size_, other->file_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfflineFileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfflineFileInfo_descriptor_;
  metadata.reflection = OfflineFileInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Base
}  // namespace Im

// @@protoc_insertion_point(global_scope)
