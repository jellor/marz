// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Im.Server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Im.Server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Im {
namespace Server {

namespace {

const ::google::protobuf::Descriptor* ServerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopReceivePacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopReceivePacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* ValidateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ValidateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ValidateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ValidateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDeviceTokenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDeviceTokenRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDeviceTokenResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDeviceTokenResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserStatusUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserStatusUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserCountUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserCountUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerUpdateNotity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerUpdateNotity_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerKickUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerKickUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerPcLoginStatusNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerPcLoginStatusNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushToUserRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushToUserRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushToUserRepsonse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushToUserRepsonse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupGetShieldRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupGetShieldRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupGetShieldResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupGetShieldResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileTransferRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileTransferRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileTransferResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileTransferResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileServerIpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileServerIpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileServerIpResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileServerIpResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Im_2eServer_2eproto() {
  protobuf_AddDesc_Im_2eServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Im.Server.proto");
  GOOGLE_CHECK(file != NULL);
  ServerRequest_descriptor_ = file->message_type(0);
  static const int ServerRequest_offsets_[1] = {
  };
  ServerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerRequest_descriptor_,
      ServerRequest::default_instance_,
      ServerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerRequest));
  ServerResponse_descriptor_ = file->message_type(1);
  static const int ServerResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerResponse, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerResponse, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerResponse, backup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerResponse, port_),
  };
  ServerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerResponse_descriptor_,
      ServerResponse::default_instance_,
      ServerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerResponse));
  StopReceivePacket_descriptor_ = file->message_type(2);
  static const int StopReceivePacket_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopReceivePacket, result_),
  };
  StopReceivePacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopReceivePacket_descriptor_,
      StopReceivePacket::default_instance_,
      StopReceivePacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopReceivePacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopReceivePacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopReceivePacket));
  ValidateRequest_descriptor_ = file->message_type(3);
  static const int ValidateRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateRequest, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateRequest, user_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateRequest, attach_data_),
  };
  ValidateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ValidateRequest_descriptor_,
      ValidateRequest::default_instance_,
      ValidateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ValidateRequest));
  ValidateResponse_descriptor_ = file->message_type(4);
  static const int ValidateResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateResponse, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateResponse, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateResponse, result_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateResponse, user_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateResponse, attach_data_),
  };
  ValidateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ValidateResponse_descriptor_,
      ValidateResponse::default_instance_,
      ValidateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ValidateResponse));
  GetDeviceTokenRequest_descriptor_ = file->message_type(5);
  static const int GetDeviceTokenRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceTokenRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceTokenRequest, attach_data_),
  };
  GetDeviceTokenRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDeviceTokenRequest_descriptor_,
      GetDeviceTokenRequest::default_instance_,
      GetDeviceTokenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceTokenRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceTokenRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDeviceTokenRequest));
  GetDeviceTokenResponse_descriptor_ = file->message_type(6);
  static const int GetDeviceTokenResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceTokenResponse, user_token_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceTokenResponse, attach_data_),
  };
  GetDeviceTokenResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDeviceTokenResponse_descriptor_,
      GetDeviceTokenResponse::default_instance_,
      GetDeviceTokenResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceTokenResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceTokenResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDeviceTokenResponse));
  RoleSet_descriptor_ = file->message_type(7);
  static const int RoleSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSet, master_id_),
  };
  RoleSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleSet_descriptor_,
      RoleSet::default_instance_,
      RoleSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleSet));
  OnlineUserInfo_descriptor_ = file->message_type(8);
  static const int OnlineUserInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineUserInfo, user_status_list_),
  };
  OnlineUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineUserInfo_descriptor_,
      OnlineUserInfo::default_instance_,
      OnlineUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineUserInfo));
  MsgServerInfo_descriptor_ = file->message_type(9);
  static const int MsgServerInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerInfo, ip_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerInfo, ip_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerInfo, host_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerInfo, max_connect_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerInfo, current_connect_cnt_),
  };
  MsgServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgServerInfo_descriptor_,
      MsgServerInfo::default_instance_,
      MsgServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgServerInfo));
  ServerInfo_descriptor_ = file->message_type(10);
  static const int ServerInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, ip_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, ip_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, host_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, max_connect_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, cur_connect_cnt_),
  };
  ServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfo_descriptor_,
      ServerInfo::default_instance_,
      ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfo));
  UserStatusUpdate_descriptor_ = file->message_type(11);
  static const int UserStatusUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatusUpdate, user_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatusUpdate, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatusUpdate, client_type_),
  };
  UserStatusUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserStatusUpdate_descriptor_,
      UserStatusUpdate::default_instance_,
      UserStatusUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatusUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatusUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserStatusUpdate));
  UserCountUpdate_descriptor_ = file->message_type(12);
  static const int UserCountUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCountUpdate, user_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCountUpdate, user_id_),
  };
  UserCountUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserCountUpdate_descriptor_,
      UserCountUpdate::default_instance_,
      UserCountUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCountUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCountUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserCountUpdate));
  ServerUpdateNotity_descriptor_ = file->message_type(13);
  static const int ServerUpdateNotity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUpdateNotity, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUpdateNotity, user_id_),
  };
  ServerUpdateNotity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerUpdateNotity_descriptor_,
      ServerUpdateNotity::default_instance_,
      ServerUpdateNotity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUpdateNotity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUpdateNotity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerUpdateNotity));
  ServerKickUser_descriptor_ = file->message_type(14);
  static const int ServerKickUser_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerKickUser, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerKickUser, client_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerKickUser, reason_),
  };
  ServerKickUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerKickUser_descriptor_,
      ServerKickUser::default_instance_,
      ServerKickUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerKickUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerKickUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerKickUser));
  ServerPcLoginStatusNotify_descriptor_ = file->message_type(15);
  static const int ServerPcLoginStatusNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPcLoginStatusNotify, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPcLoginStatusNotify, login_status_),
  };
  ServerPcLoginStatusNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerPcLoginStatusNotify_descriptor_,
      ServerPcLoginStatusNotify::default_instance_,
      ServerPcLoginStatusNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPcLoginStatusNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPcLoginStatusNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerPcLoginStatusNotify));
  PushToUserRequest_descriptor_ = file->message_type(16);
  static const int PushToUserRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushToUserRequest, flash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushToUserRequest, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushToUserRequest, user_token_list_),
  };
  PushToUserRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushToUserRequest_descriptor_,
      PushToUserRequest::default_instance_,
      PushToUserRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushToUserRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushToUserRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushToUserRequest));
  PushToUserRepsonse_descriptor_ = file->message_type(17);
  static const int PushToUserRepsonse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushToUserRepsonse, push_result_list_),
  };
  PushToUserRepsonse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushToUserRepsonse_descriptor_,
      PushToUserRepsonse::default_instance_,
      PushToUserRepsonse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushToUserRepsonse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushToUserRepsonse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushToUserRepsonse));
  GroupGetShieldRequest_descriptor_ = file->message_type(18);
  static const int GroupGetShieldRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGetShieldRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGetShieldRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGetShieldRequest, attach_data_),
  };
  GroupGetShieldRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupGetShieldRequest_descriptor_,
      GroupGetShieldRequest::default_instance_,
      GroupGetShieldRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGetShieldRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGetShieldRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupGetShieldRequest));
  GroupGetShieldResponse_descriptor_ = file->message_type(19);
  static const int GroupGetShieldResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGetShieldResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGetShieldResponse, shield_status_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGetShieldResponse, attach_data_),
  };
  GroupGetShieldResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupGetShieldResponse_descriptor_,
      GroupGetShieldResponse::default_instance_,
      GroupGetShieldResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGetShieldResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGetShieldResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupGetShieldResponse));
  FileTransferRequest_descriptor_ = file->message_type(20);
  static const int FileTransferRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransferRequest, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransferRequest, to_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransferRequest, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransferRequest, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransferRequest, transfer_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransferRequest, attach_data_),
  };
  FileTransferRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileTransferRequest_descriptor_,
      FileTransferRequest::default_instance_,
      FileTransferRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransferRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransferRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileTransferRequest));
  FileTransferResponse_descriptor_ = file->message_type(21);
  static const int FileTransferResponse_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransferResponse, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransferResponse, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransferResponse, to_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransferResponse, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransferResponse, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransferResponse, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransferResponse, transfer_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransferResponse, attach_data_),
  };
  FileTransferResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileTransferResponse_descriptor_,
      FileTransferResponse::default_instance_,
      FileTransferResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransferResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransferResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileTransferResponse));
  FileServerIpRequest_descriptor_ = file->message_type(22);
  static const int FileServerIpRequest_offsets_[1] = {
  };
  FileServerIpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileServerIpRequest_descriptor_,
      FileServerIpRequest::default_instance_,
      FileServerIpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileServerIpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileServerIpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileServerIpRequest));
  FileServerIpResponse_descriptor_ = file->message_type(23);
  static const int FileServerIpResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileServerIpResponse, ip_addr_list_),
  };
  FileServerIpResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileServerIpResponse_descriptor_,
      FileServerIpResponse::default_instance_,
      FileServerIpResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileServerIpResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileServerIpResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileServerIpResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Im_2eServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerRequest_descriptor_, &ServerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerResponse_descriptor_, &ServerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopReceivePacket_descriptor_, &StopReceivePacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ValidateRequest_descriptor_, &ValidateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ValidateResponse_descriptor_, &ValidateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDeviceTokenRequest_descriptor_, &GetDeviceTokenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDeviceTokenResponse_descriptor_, &GetDeviceTokenResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleSet_descriptor_, &RoleSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineUserInfo_descriptor_, &OnlineUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgServerInfo_descriptor_, &MsgServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfo_descriptor_, &ServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserStatusUpdate_descriptor_, &UserStatusUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserCountUpdate_descriptor_, &UserCountUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerUpdateNotity_descriptor_, &ServerUpdateNotity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerKickUser_descriptor_, &ServerKickUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerPcLoginStatusNotify_descriptor_, &ServerPcLoginStatusNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushToUserRequest_descriptor_, &PushToUserRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushToUserRepsonse_descriptor_, &PushToUserRepsonse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupGetShieldRequest_descriptor_, &GroupGetShieldRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupGetShieldResponse_descriptor_, &GroupGetShieldResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileTransferRequest_descriptor_, &FileTransferRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileTransferResponse_descriptor_, &FileTransferResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileServerIpRequest_descriptor_, &FileServerIpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileServerIpResponse_descriptor_, &FileServerIpResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Im_2eServer_2eproto() {
  delete ServerRequest::default_instance_;
  delete ServerRequest_reflection_;
  delete ServerResponse::default_instance_;
  delete ServerResponse_reflection_;
  delete StopReceivePacket::default_instance_;
  delete StopReceivePacket_reflection_;
  delete ValidateRequest::default_instance_;
  delete ValidateRequest_reflection_;
  delete ValidateResponse::default_instance_;
  delete ValidateResponse_reflection_;
  delete GetDeviceTokenRequest::default_instance_;
  delete GetDeviceTokenRequest_reflection_;
  delete GetDeviceTokenResponse::default_instance_;
  delete GetDeviceTokenResponse_reflection_;
  delete RoleSet::default_instance_;
  delete RoleSet_reflection_;
  delete OnlineUserInfo::default_instance_;
  delete OnlineUserInfo_reflection_;
  delete MsgServerInfo::default_instance_;
  delete MsgServerInfo_reflection_;
  delete ServerInfo::default_instance_;
  delete ServerInfo_reflection_;
  delete UserStatusUpdate::default_instance_;
  delete UserStatusUpdate_reflection_;
  delete UserCountUpdate::default_instance_;
  delete UserCountUpdate_reflection_;
  delete ServerUpdateNotity::default_instance_;
  delete ServerUpdateNotity_reflection_;
  delete ServerKickUser::default_instance_;
  delete ServerKickUser_reflection_;
  delete ServerPcLoginStatusNotify::default_instance_;
  delete ServerPcLoginStatusNotify_reflection_;
  delete PushToUserRequest::default_instance_;
  delete PushToUserRequest_reflection_;
  delete PushToUserRepsonse::default_instance_;
  delete PushToUserRepsonse_reflection_;
  delete GroupGetShieldRequest::default_instance_;
  delete GroupGetShieldRequest_reflection_;
  delete GroupGetShieldResponse::default_instance_;
  delete GroupGetShieldResponse_reflection_;
  delete FileTransferRequest::default_instance_;
  delete FileTransferRequest_reflection_;
  delete FileTransferResponse::default_instance_;
  delete FileTransferResponse_reflection_;
  delete FileServerIpRequest::default_instance_;
  delete FileServerIpRequest_reflection_;
  delete FileServerIpResponse::default_instance_;
  delete FileServerIpResponse_reflection_;
}

void protobuf_AddDesc_Im_2eServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Im::Base::protobuf_AddDesc_Im_2eBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017Im.Server.proto\022\tIm.Server\032\rIm.Base.pr"
    "oto\"\017\n\rServerRequest\"j\n\016ServerResponse\022("
    "\n\013result_type\030\001 \002(\0162\023.Im.Base.ResultType"
    "\022\020\n\010priority\030\002 \001(\t\022\016\n\006backup\030\003 \001(\t\022\014\n\004po"
    "rt\030\004 \001(\r\"#\n\021StopReceivePacket\022\016\n\006result\030"
    "\001 \002(\r\"P\n\017ValidateRequest\022\021\n\tuser_name\030\001 "
    "\002(\t\022\025\n\ruser_password\030\002 \002(\t\022\023\n\013attach_dat"
    "a\030\003 \001(\014\"\214\001\n\020ValidateResponse\022\021\n\tuser_nam"
    "e\030\001 \002(\t\022\023\n\013result_code\030\002 \002(\r\022\025\n\rresult_s"
    "tring\030\003 \001(\t\022$\n\tuser_info\030\004 \001(\0132\021.Im.Base"
    ".UserInfo\022\023\n\013attach_data\030\005 \001(\014\"=\n\025GetDev"
    "iceTokenRequest\022\017\n\007user_id\030\001 \003(\r\022\023\n\013atta"
    "ch_data\030\002 \001(\014\"^\n\026GetDeviceTokenResponse\022"
    "/\n\017user_token_info\030\001 \003(\0132\026.Im.Base.UserT"
    "okenInfo\022\023\n\013attach_data\030\002 \001(\014\"\034\n\007RoleSet"
    "\022\021\n\tmaster_id\030\001 \002(\r\"E\n\016OnlineUserInfo\0223\n"
    "\020user_status_list\030\001 \003(\0132\031.Im.Base.Server"
    "UserStatus\"\202\001\n\rMsgServerInfo\022\014\n\004ip_1\030\001 \002"
    "(\t\022\014\n\004ip_2\030\002 \002(\t\022\014\n\004port\030\003 \002(\r\022\021\n\thost_n"
    "ame\030\004 \002(\t\022\027\n\017max_connect_cnt\030\005 \002(\r\022\033\n\023cu"
    "rrent_connect_cnt\030\006 \002(\r\"{\n\nServerInfo\022\014\n"
    "\004ip_1\030\001 \002(\t\022\014\n\004ip_2\030\002 \002(\t\022\014\n\004port\030\003 \002(\r\022"
    "\021\n\thost_name\030\004 \002(\t\022\027\n\017max_connect_cnt\030\005 "
    "\002(\r\022\027\n\017cur_connect_cnt\030\006 \002(\r\"b\n\020UserStat"
    "usUpdate\022\023\n\013user_status\030\001 \002(\r\022\017\n\007user_id"
    "\030\002 \002(\r\022(\n\013client_type\030\003 \002(\0162\023.Im.Base.Cl"
    "ientType\"7\n\017UserCountUpdate\022\023\n\013user_acti"
    "on\030\001 \002(\r\022\017\n\007user_id\030\002 \002(\r\"5\n\022ServerUpdat"
    "eNotity\022\016\n\006action\030\001 \002(\r\022\017\n\007user_id\030\002 \002(\r"
    "\"[\n\016ServerKickUser\022\017\n\007user_id\030\001 \002(\r\022(\n\013c"
    "lient_type\030\002 \002(\0162\023.Im.Base.ClientType\022\016\n"
    "\006reason\030\003 \002(\r\"B\n\031ServerPcLoginStatusNoti"
    "fy\022\017\n\007user_id\030\001 \002(\r\022\024\n\014login_status\030\002 \002("
    "\r\"a\n\021PushToUserRequest\022\r\n\005flash\030\001 \002(\t\022\014\n"
    "\004data\030\002 \002(\t\022/\n\017user_token_list\030\003 \003(\0132\026.I"
    "m.Base.UserTokenInfo\"C\n\022PushToUserRepson"
    "se\022-\n\020push_result_list\030\001 \003(\0132\023.Im.Base.P"
    "ushResult\"O\n\025GroupGetShieldRequest\022\020\n\010gr"
    "oup_id\030\001 \002(\r\022\017\n\007user_id\030\002 \003(\r\022\023\n\013attach_"
    "data\030\003 \001(\014\"r\n\026GroupGetShieldResponse\022\020\n\010"
    "group_id\030\001 \002(\r\0221\n\022shield_status_list\030\002 \003"
    "(\0132\025.Im.Base.ShieldStatus\022\023\n\013attach_data"
    "\030\003 \001(\014\"\244\001\n\023FileTransferRequest\022\024\n\014from_u"
    "ser_id\030\001 \002(\r\022\022\n\nto_user_id\030\002 \002(\r\022\021\n\tfile"
    "_name\030\003 \002(\t\022\021\n\tfile_size\030\004 \002(\r\022(\n\rtransf"
    "er_mode\030\005 \002(\0162\021.Im.Base.FileType\022\023\n\013atta"
    "ch_data\030\006 \001(\014\"\313\001\n\024FileTransferResponse\022\023"
    "\n\013result_code\030\001 \002(\r\022\024\n\014from_user_id\030\002 \002("
    "\r\022\022\n\nto_user_id\030\003 \002(\r\022\021\n\tfile_name\030\004 \001(\t"
    "\022\021\n\tfile_size\030\005 \001(\r\022\017\n\007task_id\030\006 \001(\t\022(\n\r"
    "transfer_mode\030\007 \001(\0162\021.Im.Base.FileType\022\023"
    "\n\013attach_data\030\010 \001(\014\"\025\n\023FileServerIpReque"
    "st\"=\n\024FileServerIpResponse\022%\n\014ip_addr_li"
    "st\030\001 \003(\0132\017.Im.Base.IpAddrB)\n\'com.example"
    ".user.myapplication.protobuf", 2188);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Im.Server.proto", &protobuf_RegisterTypes);
  ServerRequest::default_instance_ = new ServerRequest();
  ServerResponse::default_instance_ = new ServerResponse();
  StopReceivePacket::default_instance_ = new StopReceivePacket();
  ValidateRequest::default_instance_ = new ValidateRequest();
  ValidateResponse::default_instance_ = new ValidateResponse();
  GetDeviceTokenRequest::default_instance_ = new GetDeviceTokenRequest();
  GetDeviceTokenResponse::default_instance_ = new GetDeviceTokenResponse();
  RoleSet::default_instance_ = new RoleSet();
  OnlineUserInfo::default_instance_ = new OnlineUserInfo();
  MsgServerInfo::default_instance_ = new MsgServerInfo();
  ServerInfo::default_instance_ = new ServerInfo();
  UserStatusUpdate::default_instance_ = new UserStatusUpdate();
  UserCountUpdate::default_instance_ = new UserCountUpdate();
  ServerUpdateNotity::default_instance_ = new ServerUpdateNotity();
  ServerKickUser::default_instance_ = new ServerKickUser();
  ServerPcLoginStatusNotify::default_instance_ = new ServerPcLoginStatusNotify();
  PushToUserRequest::default_instance_ = new PushToUserRequest();
  PushToUserRepsonse::default_instance_ = new PushToUserRepsonse();
  GroupGetShieldRequest::default_instance_ = new GroupGetShieldRequest();
  GroupGetShieldResponse::default_instance_ = new GroupGetShieldResponse();
  FileTransferRequest::default_instance_ = new FileTransferRequest();
  FileTransferResponse::default_instance_ = new FileTransferResponse();
  FileServerIpRequest::default_instance_ = new FileServerIpRequest();
  FileServerIpResponse::default_instance_ = new FileServerIpResponse();
  ServerRequest::default_instance_->InitAsDefaultInstance();
  ServerResponse::default_instance_->InitAsDefaultInstance();
  StopReceivePacket::default_instance_->InitAsDefaultInstance();
  ValidateRequest::default_instance_->InitAsDefaultInstance();
  ValidateResponse::default_instance_->InitAsDefaultInstance();
  GetDeviceTokenRequest::default_instance_->InitAsDefaultInstance();
  GetDeviceTokenResponse::default_instance_->InitAsDefaultInstance();
  RoleSet::default_instance_->InitAsDefaultInstance();
  OnlineUserInfo::default_instance_->InitAsDefaultInstance();
  MsgServerInfo::default_instance_->InitAsDefaultInstance();
  ServerInfo::default_instance_->InitAsDefaultInstance();
  UserStatusUpdate::default_instance_->InitAsDefaultInstance();
  UserCountUpdate::default_instance_->InitAsDefaultInstance();
  ServerUpdateNotity::default_instance_->InitAsDefaultInstance();
  ServerKickUser::default_instance_->InitAsDefaultInstance();
  ServerPcLoginStatusNotify::default_instance_->InitAsDefaultInstance();
  PushToUserRequest::default_instance_->InitAsDefaultInstance();
  PushToUserRepsonse::default_instance_->InitAsDefaultInstance();
  GroupGetShieldRequest::default_instance_->InitAsDefaultInstance();
  GroupGetShieldResponse::default_instance_->InitAsDefaultInstance();
  FileTransferRequest::default_instance_->InitAsDefaultInstance();
  FileTransferResponse::default_instance_->InitAsDefaultInstance();
  FileServerIpRequest::default_instance_->InitAsDefaultInstance();
  FileServerIpResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Im_2eServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Im_2eServer_2eproto {
  StaticDescriptorInitializer_Im_2eServer_2eproto() {
    protobuf_AddDesc_Im_2eServer_2eproto();
  }
} static_descriptor_initializer_Im_2eServer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ServerRequest::ServerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.ServerRequest)
}

void ServerRequest::InitAsDefaultInstance() {
}

ServerRequest::ServerRequest(const ServerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.ServerRequest)
}

void ServerRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerRequest::~ServerRequest() {
  // @@protoc_insertion_point(destructor:Im.Server.ServerRequest)
  SharedDtor();
}

void ServerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerRequest_descriptor_;
}

const ServerRequest& ServerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

ServerRequest* ServerRequest::default_instance_ = NULL;

ServerRequest* ServerRequest::New() const {
  return new ServerRequest;
}

void ServerRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.ServerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.ServerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.ServerRequest)
  return false;
#undef DO_
}

void ServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.ServerRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.ServerRequest)
}

::google::protobuf::uint8* ServerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.ServerRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.ServerRequest)
  return target;
}

int ServerRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerRequest::MergeFrom(const ServerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerRequest::CopyFrom(const ServerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerRequest::IsInitialized() const {

  return true;
}

void ServerRequest::Swap(ServerRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerRequest_descriptor_;
  metadata.reflection = ServerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerResponse::kResultTypeFieldNumber;
const int ServerResponse::kPriorityFieldNumber;
const int ServerResponse::kBackupFieldNumber;
const int ServerResponse::kPortFieldNumber;
#endif  // !_MSC_VER

ServerResponse::ServerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.ServerResponse)
}

void ServerResponse::InitAsDefaultInstance() {
}

ServerResponse::ServerResponse(const ServerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.ServerResponse)
}

void ServerResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_type_ = 1;
  priority_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backup_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerResponse::~ServerResponse() {
  // @@protoc_insertion_point(destructor:Im.Server.ServerResponse)
  SharedDtor();
}

void ServerResponse::SharedDtor() {
  if (priority_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete priority_;
  }
  if (backup_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backup_;
  }
  if (this != default_instance_) {
  }
}

void ServerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerResponse_descriptor_;
}

const ServerResponse& ServerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

ServerResponse* ServerResponse::default_instance_ = NULL;

ServerResponse* ServerResponse::New() const {
  return new ServerResponse;
}

void ServerResponse::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    result_type_ = 1;
    if (has_priority()) {
      if (priority_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        priority_->clear();
      }
    }
    if (has_backup()) {
      if (backup_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        backup_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.ServerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Im.Base.ResultType result_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::ResultType_IsValid(value)) {
            set_result_type(static_cast< ::Im::Base::ResultType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_priority;
        break;
      }

      // optional string priority = 2;
      case 2: {
        if (tag == 18) {
         parse_priority:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_priority()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->priority().data(), this->priority().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "priority");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_backup;
        break;
      }

      // optional string backup = 3;
      case 3: {
        if (tag == 26) {
         parse_backup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backup()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->backup().data(), this->backup().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "backup");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional uint32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.ServerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.ServerResponse)
  return false;
#undef DO_
}

void ServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.ServerResponse)
  // required .Im.Base.ResultType result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_type(), output);
  }

  // optional string priority = 2;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->priority().data(), this->priority().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "priority");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->priority(), output);
  }

  // optional string backup = 3;
  if (has_backup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backup().data(), this->backup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backup");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->backup(), output);
  }

  // optional uint32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.ServerResponse)
}

::google::protobuf::uint8* ServerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.ServerResponse)
  // required .Im.Base.ResultType result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result_type(), target);
  }

  // optional string priority = 2;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->priority().data(), this->priority().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "priority");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->priority(), target);
  }

  // optional string backup = 3;
  if (has_backup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backup().data(), this->backup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backup");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->backup(), target);
  }

  // optional uint32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.ServerResponse)
  return target;
}

int ServerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Im.Base.ResultType result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_type());
    }

    // optional string priority = 2;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->priority());
    }

    // optional string backup = 3;
    if (has_backup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backup());
    }

    // optional uint32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerResponse::MergeFrom(const ServerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_backup()) {
      set_backup(from.backup());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerResponse::CopyFrom(const ServerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerResponse::Swap(ServerResponse* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(priority_, other->priority_);
    std::swap(backup_, other->backup_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerResponse_descriptor_;
  metadata.reflection = ServerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopReceivePacket::kResultFieldNumber;
#endif  // !_MSC_VER

StopReceivePacket::StopReceivePacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.StopReceivePacket)
}

void StopReceivePacket::InitAsDefaultInstance() {
}

StopReceivePacket::StopReceivePacket(const StopReceivePacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.StopReceivePacket)
}

void StopReceivePacket::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopReceivePacket::~StopReceivePacket() {
  // @@protoc_insertion_point(destructor:Im.Server.StopReceivePacket)
  SharedDtor();
}

void StopReceivePacket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StopReceivePacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopReceivePacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopReceivePacket_descriptor_;
}

const StopReceivePacket& StopReceivePacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

StopReceivePacket* StopReceivePacket::default_instance_ = NULL;

StopReceivePacket* StopReceivePacket::New() const {
  return new StopReceivePacket;
}

void StopReceivePacket::Clear() {
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopReceivePacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.StopReceivePacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.StopReceivePacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.StopReceivePacket)
  return false;
#undef DO_
}

void StopReceivePacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.StopReceivePacket)
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.StopReceivePacket)
}

::google::protobuf::uint8* StopReceivePacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.StopReceivePacket)
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.StopReceivePacket)
  return target;
}

int StopReceivePacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopReceivePacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopReceivePacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopReceivePacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopReceivePacket::MergeFrom(const StopReceivePacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopReceivePacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopReceivePacket::CopyFrom(const StopReceivePacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopReceivePacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StopReceivePacket::Swap(StopReceivePacket* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopReceivePacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopReceivePacket_descriptor_;
  metadata.reflection = StopReceivePacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ValidateRequest::kUserNameFieldNumber;
const int ValidateRequest::kUserPasswordFieldNumber;
const int ValidateRequest::kAttachDataFieldNumber;
#endif  // !_MSC_VER

ValidateRequest::ValidateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.ValidateRequest)
}

void ValidateRequest::InitAsDefaultInstance() {
}

ValidateRequest::ValidateRequest(const ValidateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.ValidateRequest)
}

void ValidateRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ValidateRequest::~ValidateRequest() {
  // @@protoc_insertion_point(destructor:Im.Server.ValidateRequest)
  SharedDtor();
}

void ValidateRequest::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (user_password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_password_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void ValidateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValidateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValidateRequest_descriptor_;
}

const ValidateRequest& ValidateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

ValidateRequest* ValidateRequest::default_instance_ = NULL;

ValidateRequest* ValidateRequest::New() const {
  return new ValidateRequest;
}

void ValidateRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_name_->clear();
      }
    }
    if (has_user_password()) {
      if (user_password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_password_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ValidateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.ValidateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_password;
        break;
      }

      // required string user_password = 2;
      case 2: {
        if (tag == 18) {
         parse_user_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_password().data(), this->user_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 3;
      case 3: {
        if (tag == 26) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.ValidateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.ValidateRequest)
  return false;
#undef DO_
}

void ValidateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.ValidateRequest)
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_name(), output);
  }

  // required string user_password = 2;
  if (has_user_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_password().data(), this->user_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_password(), output);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.ValidateRequest)
}

::google::protobuf::uint8* ValidateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.ValidateRequest)
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // required string user_password = 2;
  if (has_user_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_password().data(), this->user_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_password(), target);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.ValidateRequest)
  return target;
}

int ValidateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required string user_password = 2;
    if (has_user_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_password());
    }

    // optional bytes attach_data = 3;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValidateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ValidateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ValidateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ValidateRequest::MergeFrom(const ValidateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_user_password()) {
      set_user_password(from.user_password());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ValidateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateRequest::CopyFrom(const ValidateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ValidateRequest::Swap(ValidateRequest* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(user_password_, other->user_password_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ValidateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ValidateRequest_descriptor_;
  metadata.reflection = ValidateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ValidateResponse::kUserNameFieldNumber;
const int ValidateResponse::kResultCodeFieldNumber;
const int ValidateResponse::kResultStringFieldNumber;
const int ValidateResponse::kUserInfoFieldNumber;
const int ValidateResponse::kAttachDataFieldNumber;
#endif  // !_MSC_VER

ValidateResponse::ValidateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.ValidateResponse)
}

void ValidateResponse::InitAsDefaultInstance() {
  user_info_ = const_cast< ::Im::Base::UserInfo*>(&::Im::Base::UserInfo::default_instance());
}

ValidateResponse::ValidateResponse(const ValidateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.ValidateResponse)
}

void ValidateResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0u;
  result_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_info_ = NULL;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ValidateResponse::~ValidateResponse() {
  // @@protoc_insertion_point(destructor:Im.Server.ValidateResponse)
  SharedDtor();
}

void ValidateResponse::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (result_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_string_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
    delete user_info_;
  }
}

void ValidateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValidateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValidateResponse_descriptor_;
}

const ValidateResponse& ValidateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

ValidateResponse* ValidateResponse::default_instance_ = NULL;

ValidateResponse* ValidateResponse::New() const {
  return new ValidateResponse;
}

void ValidateResponse::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_name_->clear();
      }
    }
    result_code_ = 0u;
    if (has_result_string()) {
      if (result_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_string_->clear();
      }
    }
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::Im::Base::UserInfo::Clear();
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ValidateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.ValidateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_result_string;
        break;
      }

      // optional string result_string = 3;
      case 3: {
        if (tag == 26) {
         parse_result_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->result_string().data(), this->result_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "result_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_info;
        break;
      }

      // optional .Im.Base.UserInfo user_info = 4;
      case 4: {
        if (tag == 34) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 5;
      case 5: {
        if (tag == 42) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.ValidateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.ValidateResponse)
  return false;
#undef DO_
}

void ValidateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.ValidateResponse)
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_name(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // optional string result_string = 3;
  if (has_result_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->result_string().data(), this->result_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "result_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->result_string(), output);
  }

  // optional .Im.Base.UserInfo user_info = 4;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->user_info(), output);
  }

  // optional bytes attach_data = 5;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.ValidateResponse)
}

::google::protobuf::uint8* ValidateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.ValidateResponse)
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result_code(), target);
  }

  // optional string result_string = 3;
  if (has_result_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->result_string().data(), this->result_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "result_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->result_string(), target);
  }

  // optional .Im.Base.UserInfo user_info = 4;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->user_info(), target);
  }

  // optional bytes attach_data = 5;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.ValidateResponse)
  return target;
}

int ValidateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional string result_string = 3;
    if (has_result_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_string());
    }

    // optional .Im.Base.UserInfo user_info = 4;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

    // optional bytes attach_data = 5;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValidateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ValidateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ValidateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ValidateResponse::MergeFrom(const ValidateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_result_string()) {
      set_result_string(from.result_string());
    }
    if (from.has_user_info()) {
      mutable_user_info()->::Im::Base::UserInfo::MergeFrom(from.user_info());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ValidateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateResponse::CopyFrom(const ValidateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  return true;
}

void ValidateResponse::Swap(ValidateResponse* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(result_code_, other->result_code_);
    std::swap(result_string_, other->result_string_);
    std::swap(user_info_, other->user_info_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ValidateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ValidateResponse_descriptor_;
  metadata.reflection = ValidateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDeviceTokenRequest::kUserIdFieldNumber;
const int GetDeviceTokenRequest::kAttachDataFieldNumber;
#endif  // !_MSC_VER

GetDeviceTokenRequest::GetDeviceTokenRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.GetDeviceTokenRequest)
}

void GetDeviceTokenRequest::InitAsDefaultInstance() {
}

GetDeviceTokenRequest::GetDeviceTokenRequest(const GetDeviceTokenRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.GetDeviceTokenRequest)
}

void GetDeviceTokenRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDeviceTokenRequest::~GetDeviceTokenRequest() {
  // @@protoc_insertion_point(destructor:Im.Server.GetDeviceTokenRequest)
  SharedDtor();
}

void GetDeviceTokenRequest::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void GetDeviceTokenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDeviceTokenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDeviceTokenRequest_descriptor_;
}

const GetDeviceTokenRequest& GetDeviceTokenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

GetDeviceTokenRequest* GetDeviceTokenRequest::default_instance_ = NULL;

GetDeviceTokenRequest* GetDeviceTokenRequest::New() const {
  return new GetDeviceTokenRequest;
}

void GetDeviceTokenRequest::Clear() {
  if (has_attach_data()) {
    if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      attach_data_->clear();
    }
  }
  user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDeviceTokenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.GetDeviceTokenRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_user_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_user_id;
        if (input->ExpectTag(18)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 2;
      case 2: {
        if (tag == 18) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.GetDeviceTokenRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.GetDeviceTokenRequest)
  return false;
#undef DO_
}

void GetDeviceTokenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.GetDeviceTokenRequest)
  // repeated uint32 user_id = 1;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->user_id(i), output);
  }

  // optional bytes attach_data = 2;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.GetDeviceTokenRequest)
}

::google::protobuf::uint8* GetDeviceTokenRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.GetDeviceTokenRequest)
  // repeated uint32 user_id = 1;
  for (int i = 0; i < this->user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->user_id(i), target);
  }

  // optional bytes attach_data = 2;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.GetDeviceTokenRequest)
  return target;
}

int GetDeviceTokenRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes attach_data = 2;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 user_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDeviceTokenRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDeviceTokenRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDeviceTokenRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDeviceTokenRequest::MergeFrom(const GetDeviceTokenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDeviceTokenRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceTokenRequest::CopyFrom(const GetDeviceTokenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceTokenRequest::IsInitialized() const {

  return true;
}

void GetDeviceTokenRequest::Swap(GetDeviceTokenRequest* other) {
  if (other != this) {
    user_id_.Swap(&other->user_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDeviceTokenRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDeviceTokenRequest_descriptor_;
  metadata.reflection = GetDeviceTokenRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDeviceTokenResponse::kUserTokenInfoFieldNumber;
const int GetDeviceTokenResponse::kAttachDataFieldNumber;
#endif  // !_MSC_VER

GetDeviceTokenResponse::GetDeviceTokenResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.GetDeviceTokenResponse)
}

void GetDeviceTokenResponse::InitAsDefaultInstance() {
}

GetDeviceTokenResponse::GetDeviceTokenResponse(const GetDeviceTokenResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.GetDeviceTokenResponse)
}

void GetDeviceTokenResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDeviceTokenResponse::~GetDeviceTokenResponse() {
  // @@protoc_insertion_point(destructor:Im.Server.GetDeviceTokenResponse)
  SharedDtor();
}

void GetDeviceTokenResponse::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void GetDeviceTokenResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDeviceTokenResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDeviceTokenResponse_descriptor_;
}

const GetDeviceTokenResponse& GetDeviceTokenResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

GetDeviceTokenResponse* GetDeviceTokenResponse::default_instance_ = NULL;

GetDeviceTokenResponse* GetDeviceTokenResponse::New() const {
  return new GetDeviceTokenResponse;
}

void GetDeviceTokenResponse::Clear() {
  if (has_attach_data()) {
    if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      attach_data_->clear();
    }
  }
  user_token_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDeviceTokenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.GetDeviceTokenResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Im.Base.UserTokenInfo user_token_info = 1;
      case 1: {
        if (tag == 10) {
         parse_user_token_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_token_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_user_token_info;
        if (input->ExpectTag(18)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 2;
      case 2: {
        if (tag == 18) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.GetDeviceTokenResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.GetDeviceTokenResponse)
  return false;
#undef DO_
}

void GetDeviceTokenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.GetDeviceTokenResponse)
  // repeated .Im.Base.UserTokenInfo user_token_info = 1;
  for (int i = 0; i < this->user_token_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_token_info(i), output);
  }

  // optional bytes attach_data = 2;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.GetDeviceTokenResponse)
}

::google::protobuf::uint8* GetDeviceTokenResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.GetDeviceTokenResponse)
  // repeated .Im.Base.UserTokenInfo user_token_info = 1;
  for (int i = 0; i < this->user_token_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_token_info(i), target);
  }

  // optional bytes attach_data = 2;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.GetDeviceTokenResponse)
  return target;
}

int GetDeviceTokenResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes attach_data = 2;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .Im.Base.UserTokenInfo user_token_info = 1;
  total_size += 1 * this->user_token_info_size();
  for (int i = 0; i < this->user_token_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_token_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDeviceTokenResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDeviceTokenResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDeviceTokenResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDeviceTokenResponse::MergeFrom(const GetDeviceTokenResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_token_info_.MergeFrom(from.user_token_info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDeviceTokenResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceTokenResponse::CopyFrom(const GetDeviceTokenResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceTokenResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->user_token_info())) return false;
  return true;
}

void GetDeviceTokenResponse::Swap(GetDeviceTokenResponse* other) {
  if (other != this) {
    user_token_info_.Swap(&other->user_token_info_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDeviceTokenResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDeviceTokenResponse_descriptor_;
  metadata.reflection = GetDeviceTokenResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleSet::kMasterIdFieldNumber;
#endif  // !_MSC_VER

RoleSet::RoleSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.RoleSet)
}

void RoleSet::InitAsDefaultInstance() {
}

RoleSet::RoleSet(const RoleSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.RoleSet)
}

void RoleSet::SharedCtor() {
  _cached_size_ = 0;
  master_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleSet::~RoleSet() {
  // @@protoc_insertion_point(destructor:Im.Server.RoleSet)
  SharedDtor();
}

void RoleSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleSet_descriptor_;
}

const RoleSet& RoleSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

RoleSet* RoleSet::default_instance_ = NULL;

RoleSet* RoleSet::New() const {
  return new RoleSet;
}

void RoleSet::Clear() {
  master_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.RoleSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 master_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &master_id_)));
          set_has_master_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.RoleSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.RoleSet)
  return false;
#undef DO_
}

void RoleSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.RoleSet)
  // required uint32 master_id = 1;
  if (has_master_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->master_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.RoleSet)
}

::google::protobuf::uint8* RoleSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.RoleSet)
  // required uint32 master_id = 1;
  if (has_master_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->master_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.RoleSet)
  return target;
}

int RoleSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 master_id = 1;
    if (has_master_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->master_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleSet::MergeFrom(const RoleSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_master_id()) {
      set_master_id(from.master_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleSet::CopyFrom(const RoleSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoleSet::Swap(RoleSet* other) {
  if (other != this) {
    std::swap(master_id_, other->master_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleSet_descriptor_;
  metadata.reflection = RoleSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineUserInfo::kUserStatusListFieldNumber;
#endif  // !_MSC_VER

OnlineUserInfo::OnlineUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.OnlineUserInfo)
}

void OnlineUserInfo::InitAsDefaultInstance() {
}

OnlineUserInfo::OnlineUserInfo(const OnlineUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.OnlineUserInfo)
}

void OnlineUserInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineUserInfo::~OnlineUserInfo() {
  // @@protoc_insertion_point(destructor:Im.Server.OnlineUserInfo)
  SharedDtor();
}

void OnlineUserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OnlineUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineUserInfo_descriptor_;
}

const OnlineUserInfo& OnlineUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

OnlineUserInfo* OnlineUserInfo::default_instance_ = NULL;

OnlineUserInfo* OnlineUserInfo::New() const {
  return new OnlineUserInfo;
}

void OnlineUserInfo::Clear() {
  user_status_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.OnlineUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Im.Base.ServerUserStatus user_status_list = 1;
      case 1: {
        if (tag == 10) {
         parse_user_status_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_status_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_user_status_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.OnlineUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.OnlineUserInfo)
  return false;
#undef DO_
}

void OnlineUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.OnlineUserInfo)
  // repeated .Im.Base.ServerUserStatus user_status_list = 1;
  for (int i = 0; i < this->user_status_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_status_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.OnlineUserInfo)
}

::google::protobuf::uint8* OnlineUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.OnlineUserInfo)
  // repeated .Im.Base.ServerUserStatus user_status_list = 1;
  for (int i = 0; i < this->user_status_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_status_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.OnlineUserInfo)
  return target;
}

int OnlineUserInfo::ByteSize() const {
  int total_size = 0;

  // repeated .Im.Base.ServerUserStatus user_status_list = 1;
  total_size += 1 * this->user_status_list_size();
  for (int i = 0; i < this->user_status_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_status_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineUserInfo::MergeFrom(const OnlineUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_status_list_.MergeFrom(from.user_status_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineUserInfo::CopyFrom(const OnlineUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineUserInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->user_status_list())) return false;
  return true;
}

void OnlineUserInfo::Swap(OnlineUserInfo* other) {
  if (other != this) {
    user_status_list_.Swap(&other->user_status_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineUserInfo_descriptor_;
  metadata.reflection = OnlineUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgServerInfo::kIp1FieldNumber;
const int MsgServerInfo::kIp2FieldNumber;
const int MsgServerInfo::kPortFieldNumber;
const int MsgServerInfo::kHostNameFieldNumber;
const int MsgServerInfo::kMaxConnectCntFieldNumber;
const int MsgServerInfo::kCurrentConnectCntFieldNumber;
#endif  // !_MSC_VER

MsgServerInfo::MsgServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.MsgServerInfo)
}

void MsgServerInfo::InitAsDefaultInstance() {
}

MsgServerInfo::MsgServerInfo(const MsgServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.MsgServerInfo)
}

void MsgServerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_connect_cnt_ = 0u;
  current_connect_cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgServerInfo::~MsgServerInfo() {
  // @@protoc_insertion_point(destructor:Im.Server.MsgServerInfo)
  SharedDtor();
}

void MsgServerInfo::SharedDtor() {
  if (ip_1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_1_;
  }
  if (ip_2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_2_;
  }
  if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_name_;
  }
  if (this != default_instance_) {
  }
}

void MsgServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgServerInfo_descriptor_;
}

const MsgServerInfo& MsgServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

MsgServerInfo* MsgServerInfo::default_instance_ = NULL;

MsgServerInfo* MsgServerInfo::New() const {
  return new MsgServerInfo;
}

void MsgServerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgServerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(port_, current_connect_cnt_);
    if (has_ip_1()) {
      if (ip_1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_1_->clear();
      }
    }
    if (has_ip_2()) {
      if (ip_2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_2_->clear();
      }
    }
    if (has_host_name()) {
      if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        host_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.MsgServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip_1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_1().data(), this->ip_1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip_1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip_2;
        break;
      }

      // required string ip_2 = 2;
      case 2: {
        if (tag == 18) {
         parse_ip_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_2().data(), this->ip_2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip_2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required uint32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_host_name;
        break;
      }

      // required string host_name = 4;
      case 4: {
        if (tag == 34) {
         parse_host_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host_name().data(), this->host_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "host_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max_connect_cnt;
        break;
      }

      // required uint32 max_connect_cnt = 5;
      case 5: {
        if (tag == 40) {
         parse_max_connect_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_connect_cnt_)));
          set_has_max_connect_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_current_connect_cnt;
        break;
      }

      // required uint32 current_connect_cnt = 6;
      case 6: {
        if (tag == 48) {
         parse_current_connect_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_connect_cnt_)));
          set_has_current_connect_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.MsgServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.MsgServerInfo)
  return false;
#undef DO_
}

void MsgServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.MsgServerInfo)
  // required string ip_1 = 1;
  if (has_ip_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_1().data(), this->ip_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip_1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip_1(), output);
  }

  // required string ip_2 = 2;
  if (has_ip_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_2().data(), this->ip_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip_2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip_2(), output);
  }

  // required uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // required string host_name = 4;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->host_name(), output);
  }

  // required uint32 max_connect_cnt = 5;
  if (has_max_connect_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_connect_cnt(), output);
  }

  // required uint32 current_connect_cnt = 6;
  if (has_current_connect_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->current_connect_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.MsgServerInfo)
}

::google::protobuf::uint8* MsgServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.MsgServerInfo)
  // required string ip_1 = 1;
  if (has_ip_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_1().data(), this->ip_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip_1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip_1(), target);
  }

  // required string ip_2 = 2;
  if (has_ip_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_2().data(), this->ip_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip_2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip_2(), target);
  }

  // required uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // required string host_name = 4;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->host_name(), target);
  }

  // required uint32 max_connect_cnt = 5;
  if (has_max_connect_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_connect_cnt(), target);
  }

  // required uint32 current_connect_cnt = 6;
  if (has_current_connect_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->current_connect_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.MsgServerInfo)
  return target;
}

int MsgServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip_1 = 1;
    if (has_ip_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_1());
    }

    // required string ip_2 = 2;
    if (has_ip_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_2());
    }

    // required uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required string host_name = 4;
    if (has_host_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_name());
    }

    // required uint32 max_connect_cnt = 5;
    if (has_max_connect_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_connect_cnt());
    }

    // required uint32 current_connect_cnt = 6;
    if (has_current_connect_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_connect_cnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgServerInfo::MergeFrom(const MsgServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip_1()) {
      set_ip_1(from.ip_1());
    }
    if (from.has_ip_2()) {
      set_ip_2(from.ip_2());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_host_name()) {
      set_host_name(from.host_name());
    }
    if (from.has_max_connect_cnt()) {
      set_max_connect_cnt(from.max_connect_cnt());
    }
    if (from.has_current_connect_cnt()) {
      set_current_connect_cnt(from.current_connect_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgServerInfo::CopyFrom(const MsgServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void MsgServerInfo::Swap(MsgServerInfo* other) {
  if (other != this) {
    std::swap(ip_1_, other->ip_1_);
    std::swap(ip_2_, other->ip_2_);
    std::swap(port_, other->port_);
    std::swap(host_name_, other->host_name_);
    std::swap(max_connect_cnt_, other->max_connect_cnt_);
    std::swap(current_connect_cnt_, other->current_connect_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgServerInfo_descriptor_;
  metadata.reflection = MsgServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfo::kIp1FieldNumber;
const int ServerInfo::kIp2FieldNumber;
const int ServerInfo::kPortFieldNumber;
const int ServerInfo::kHostNameFieldNumber;
const int ServerInfo::kMaxConnectCntFieldNumber;
const int ServerInfo::kCurConnectCntFieldNumber;
#endif  // !_MSC_VER

ServerInfo::ServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.ServerInfo)
}

void ServerInfo::InitAsDefaultInstance() {
}

ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.ServerInfo)
}

void ServerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_connect_cnt_ = 0u;
  cur_connect_cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:Im.Server.ServerInfo)
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  if (ip_1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_1_;
  }
  if (ip_2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_2_;
  }
  if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_name_;
  }
  if (this != default_instance_) {
  }
}

void ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfo_descriptor_;
}

const ServerInfo& ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

ServerInfo* ServerInfo::default_instance_ = NULL;

ServerInfo* ServerInfo::New() const {
  return new ServerInfo;
}

void ServerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(port_, cur_connect_cnt_);
    if (has_ip_1()) {
      if (ip_1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_1_->clear();
      }
    }
    if (has_ip_2()) {
      if (ip_2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_2_->clear();
      }
    }
    if (has_host_name()) {
      if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        host_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.ServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip_1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_1().data(), this->ip_1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip_1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip_2;
        break;
      }

      // required string ip_2 = 2;
      case 2: {
        if (tag == 18) {
         parse_ip_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_2().data(), this->ip_2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip_2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required uint32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_host_name;
        break;
      }

      // required string host_name = 4;
      case 4: {
        if (tag == 34) {
         parse_host_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host_name().data(), this->host_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "host_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max_connect_cnt;
        break;
      }

      // required uint32 max_connect_cnt = 5;
      case 5: {
        if (tag == 40) {
         parse_max_connect_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_connect_cnt_)));
          set_has_max_connect_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cur_connect_cnt;
        break;
      }

      // required uint32 cur_connect_cnt = 6;
      case 6: {
        if (tag == 48) {
         parse_cur_connect_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_connect_cnt_)));
          set_has_cur_connect_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.ServerInfo)
  return false;
#undef DO_
}

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.ServerInfo)
  // required string ip_1 = 1;
  if (has_ip_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_1().data(), this->ip_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip_1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip_1(), output);
  }

  // required string ip_2 = 2;
  if (has_ip_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_2().data(), this->ip_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip_2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip_2(), output);
  }

  // required uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // required string host_name = 4;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->host_name(), output);
  }

  // required uint32 max_connect_cnt = 5;
  if (has_max_connect_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_connect_cnt(), output);
  }

  // required uint32 cur_connect_cnt = 6;
  if (has_cur_connect_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cur_connect_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.ServerInfo)
}

::google::protobuf::uint8* ServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.ServerInfo)
  // required string ip_1 = 1;
  if (has_ip_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_1().data(), this->ip_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip_1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip_1(), target);
  }

  // required string ip_2 = 2;
  if (has_ip_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_2().data(), this->ip_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip_2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip_2(), target);
  }

  // required uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // required string host_name = 4;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->host_name(), target);
  }

  // required uint32 max_connect_cnt = 5;
  if (has_max_connect_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_connect_cnt(), target);
  }

  // required uint32 cur_connect_cnt = 6;
  if (has_cur_connect_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cur_connect_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.ServerInfo)
  return target;
}

int ServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip_1 = 1;
    if (has_ip_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_1());
    }

    // required string ip_2 = 2;
    if (has_ip_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_2());
    }

    // required uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required string host_name = 4;
    if (has_host_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_name());
    }

    // required uint32 max_connect_cnt = 5;
    if (has_max_connect_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_connect_cnt());
    }

    // required uint32 cur_connect_cnt = 6;
    if (has_cur_connect_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_connect_cnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip_1()) {
      set_ip_1(from.ip_1());
    }
    if (from.has_ip_2()) {
      set_ip_2(from.ip_2());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_host_name()) {
      set_host_name(from.host_name());
    }
    if (from.has_max_connect_cnt()) {
      set_max_connect_cnt(from.max_connect_cnt());
    }
    if (from.has_cur_connect_cnt()) {
      set_cur_connect_cnt(from.cur_connect_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other != this) {
    std::swap(ip_1_, other->ip_1_);
    std::swap(ip_2_, other->ip_2_);
    std::swap(port_, other->port_);
    std::swap(host_name_, other->host_name_);
    std::swap(max_connect_cnt_, other->max_connect_cnt_);
    std::swap(cur_connect_cnt_, other->cur_connect_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfo_descriptor_;
  metadata.reflection = ServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserStatusUpdate::kUserStatusFieldNumber;
const int UserStatusUpdate::kUserIdFieldNumber;
const int UserStatusUpdate::kClientTypeFieldNumber;
#endif  // !_MSC_VER

UserStatusUpdate::UserStatusUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.UserStatusUpdate)
}

void UserStatusUpdate::InitAsDefaultInstance() {
}

UserStatusUpdate::UserStatusUpdate(const UserStatusUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.UserStatusUpdate)
}

void UserStatusUpdate::SharedCtor() {
  _cached_size_ = 0;
  user_status_ = 0u;
  user_id_ = 0u;
  client_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserStatusUpdate::~UserStatusUpdate() {
  // @@protoc_insertion_point(destructor:Im.Server.UserStatusUpdate)
  SharedDtor();
}

void UserStatusUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserStatusUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserStatusUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserStatusUpdate_descriptor_;
}

const UserStatusUpdate& UserStatusUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

UserStatusUpdate* UserStatusUpdate::default_instance_ = NULL;

UserStatusUpdate* UserStatusUpdate::New() const {
  return new UserStatusUpdate;
}

void UserStatusUpdate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserStatusUpdate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_status_, user_id_);
    client_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserStatusUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.UserStatusUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_status_)));
          set_has_user_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_client_type;
        break;
      }

      // required .Im.Base.ClientType client_type = 3;
      case 3: {
        if (tag == 24) {
         parse_client_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::ClientType_IsValid(value)) {
            set_client_type(static_cast< ::Im::Base::ClientType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.UserStatusUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.UserStatusUpdate)
  return false;
#undef DO_
}

void UserStatusUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.UserStatusUpdate)
  // required uint32 user_status = 1;
  if (has_user_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_status(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required .Im.Base.ClientType client_type = 3;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->client_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.UserStatusUpdate)
}

::google::protobuf::uint8* UserStatusUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.UserStatusUpdate)
  // required uint32 user_status = 1;
  if (has_user_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_status(), target);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // required .Im.Base.ClientType client_type = 3;
  if (has_client_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->client_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.UserStatusUpdate)
  return target;
}

int UserStatusUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_status = 1;
    if (has_user_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_status());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .Im.Base.ClientType client_type = 3;
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserStatusUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserStatusUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserStatusUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserStatusUpdate::MergeFrom(const UserStatusUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_status()) {
      set_user_status(from.user_status());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserStatusUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStatusUpdate::CopyFrom(const UserStatusUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStatusUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UserStatusUpdate::Swap(UserStatusUpdate* other) {
  if (other != this) {
    std::swap(user_status_, other->user_status_);
    std::swap(user_id_, other->user_id_);
    std::swap(client_type_, other->client_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserStatusUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserStatusUpdate_descriptor_;
  metadata.reflection = UserStatusUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserCountUpdate::kUserActionFieldNumber;
const int UserCountUpdate::kUserIdFieldNumber;
#endif  // !_MSC_VER

UserCountUpdate::UserCountUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.UserCountUpdate)
}

void UserCountUpdate::InitAsDefaultInstance() {
}

UserCountUpdate::UserCountUpdate(const UserCountUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.UserCountUpdate)
}

void UserCountUpdate::SharedCtor() {
  _cached_size_ = 0;
  user_action_ = 0u;
  user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserCountUpdate::~UserCountUpdate() {
  // @@protoc_insertion_point(destructor:Im.Server.UserCountUpdate)
  SharedDtor();
}

void UserCountUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserCountUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserCountUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserCountUpdate_descriptor_;
}

const UserCountUpdate& UserCountUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

UserCountUpdate* UserCountUpdate::default_instance_ = NULL;

UserCountUpdate* UserCountUpdate::New() const {
  return new UserCountUpdate;
}

void UserCountUpdate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserCountUpdate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_action_, user_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserCountUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.UserCountUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_action = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_action_)));
          set_has_user_action();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.UserCountUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.UserCountUpdate)
  return false;
#undef DO_
}

void UserCountUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.UserCountUpdate)
  // required uint32 user_action = 1;
  if (has_user_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_action(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.UserCountUpdate)
}

::google::protobuf::uint8* UserCountUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.UserCountUpdate)
  // required uint32 user_action = 1;
  if (has_user_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_action(), target);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.UserCountUpdate)
  return target;
}

int UserCountUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_action = 1;
    if (has_user_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_action());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserCountUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserCountUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserCountUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserCountUpdate::MergeFrom(const UserCountUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_action()) {
      set_user_action(from.user_action());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserCountUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCountUpdate::CopyFrom(const UserCountUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCountUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserCountUpdate::Swap(UserCountUpdate* other) {
  if (other != this) {
    std::swap(user_action_, other->user_action_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserCountUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserCountUpdate_descriptor_;
  metadata.reflection = UserCountUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerUpdateNotity::kActionFieldNumber;
const int ServerUpdateNotity::kUserIdFieldNumber;
#endif  // !_MSC_VER

ServerUpdateNotity::ServerUpdateNotity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.ServerUpdateNotity)
}

void ServerUpdateNotity::InitAsDefaultInstance() {
}

ServerUpdateNotity::ServerUpdateNotity(const ServerUpdateNotity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.ServerUpdateNotity)
}

void ServerUpdateNotity::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0u;
  user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerUpdateNotity::~ServerUpdateNotity() {
  // @@protoc_insertion_point(destructor:Im.Server.ServerUpdateNotity)
  SharedDtor();
}

void ServerUpdateNotity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerUpdateNotity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerUpdateNotity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerUpdateNotity_descriptor_;
}

const ServerUpdateNotity& ServerUpdateNotity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

ServerUpdateNotity* ServerUpdateNotity::default_instance_ = NULL;

ServerUpdateNotity* ServerUpdateNotity::New() const {
  return new ServerUpdateNotity;
}

void ServerUpdateNotity::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerUpdateNotity*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(action_, user_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerUpdateNotity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.ServerUpdateNotity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 action = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.ServerUpdateNotity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.ServerUpdateNotity)
  return false;
#undef DO_
}

void ServerUpdateNotity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.ServerUpdateNotity)
  // required uint32 action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->action(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.ServerUpdateNotity)
}

::google::protobuf::uint8* ServerUpdateNotity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.ServerUpdateNotity)
  // required uint32 action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->action(), target);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.ServerUpdateNotity)
  return target;
}

int ServerUpdateNotity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerUpdateNotity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerUpdateNotity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerUpdateNotity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerUpdateNotity::MergeFrom(const ServerUpdateNotity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerUpdateNotity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerUpdateNotity::CopyFrom(const ServerUpdateNotity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerUpdateNotity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ServerUpdateNotity::Swap(ServerUpdateNotity* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerUpdateNotity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerUpdateNotity_descriptor_;
  metadata.reflection = ServerUpdateNotity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerKickUser::kUserIdFieldNumber;
const int ServerKickUser::kClientTypeFieldNumber;
const int ServerKickUser::kReasonFieldNumber;
#endif  // !_MSC_VER

ServerKickUser::ServerKickUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.ServerKickUser)
}

void ServerKickUser::InitAsDefaultInstance() {
}

ServerKickUser::ServerKickUser(const ServerKickUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.ServerKickUser)
}

void ServerKickUser::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  client_type_ = 1;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerKickUser::~ServerKickUser() {
  // @@protoc_insertion_point(destructor:Im.Server.ServerKickUser)
  SharedDtor();
}

void ServerKickUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerKickUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerKickUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerKickUser_descriptor_;
}

const ServerKickUser& ServerKickUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

ServerKickUser* ServerKickUser::default_instance_ = NULL;

ServerKickUser* ServerKickUser::New() const {
  return new ServerKickUser;
}

void ServerKickUser::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = 0u;
    client_type_ = 1;
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerKickUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.ServerKickUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_client_type;
        break;
      }

      // required .Im.Base.ClientType client_type = 2;
      case 2: {
        if (tag == 16) {
         parse_client_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::ClientType_IsValid(value)) {
            set_client_type(static_cast< ::Im::Base::ClientType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reason;
        break;
      }

      // required uint32 reason = 3;
      case 3: {
        if (tag == 24) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.ServerKickUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.ServerKickUser)
  return false;
#undef DO_
}

void ServerKickUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.ServerKickUser)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .Im.Base.ClientType client_type = 2;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->client_type(), output);
  }

  // required uint32 reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.ServerKickUser)
}

::google::protobuf::uint8* ServerKickUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.ServerKickUser)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .Im.Base.ClientType client_type = 2;
  if (has_client_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->client_type(), target);
  }

  // required uint32 reason = 3;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.ServerKickUser)
  return target;
}

int ServerKickUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .Im.Base.ClientType client_type = 2;
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
    }

    // required uint32 reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerKickUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerKickUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerKickUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerKickUser::MergeFrom(const ServerKickUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerKickUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerKickUser::CopyFrom(const ServerKickUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerKickUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ServerKickUser::Swap(ServerKickUser* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(client_type_, other->client_type_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerKickUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerKickUser_descriptor_;
  metadata.reflection = ServerKickUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerPcLoginStatusNotify::kUserIdFieldNumber;
const int ServerPcLoginStatusNotify::kLoginStatusFieldNumber;
#endif  // !_MSC_VER

ServerPcLoginStatusNotify::ServerPcLoginStatusNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.ServerPcLoginStatusNotify)
}

void ServerPcLoginStatusNotify::InitAsDefaultInstance() {
}

ServerPcLoginStatusNotify::ServerPcLoginStatusNotify(const ServerPcLoginStatusNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.ServerPcLoginStatusNotify)
}

void ServerPcLoginStatusNotify::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  login_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerPcLoginStatusNotify::~ServerPcLoginStatusNotify() {
  // @@protoc_insertion_point(destructor:Im.Server.ServerPcLoginStatusNotify)
  SharedDtor();
}

void ServerPcLoginStatusNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerPcLoginStatusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerPcLoginStatusNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerPcLoginStatusNotify_descriptor_;
}

const ServerPcLoginStatusNotify& ServerPcLoginStatusNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

ServerPcLoginStatusNotify* ServerPcLoginStatusNotify::default_instance_ = NULL;

ServerPcLoginStatusNotify* ServerPcLoginStatusNotify::New() const {
  return new ServerPcLoginStatusNotify;
}

void ServerPcLoginStatusNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerPcLoginStatusNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, login_status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerPcLoginStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.ServerPcLoginStatusNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_login_status;
        break;
      }

      // required uint32 login_status = 2;
      case 2: {
        if (tag == 16) {
         parse_login_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_status_)));
          set_has_login_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.ServerPcLoginStatusNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.ServerPcLoginStatusNotify)
  return false;
#undef DO_
}

void ServerPcLoginStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.ServerPcLoginStatusNotify)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 login_status = 2;
  if (has_login_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->login_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.ServerPcLoginStatusNotify)
}

::google::protobuf::uint8* ServerPcLoginStatusNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.ServerPcLoginStatusNotify)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 login_status = 2;
  if (has_login_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->login_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.ServerPcLoginStatusNotify)
  return target;
}

int ServerPcLoginStatusNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 login_status = 2;
    if (has_login_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerPcLoginStatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerPcLoginStatusNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerPcLoginStatusNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerPcLoginStatusNotify::MergeFrom(const ServerPcLoginStatusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_login_status()) {
      set_login_status(from.login_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerPcLoginStatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerPcLoginStatusNotify::CopyFrom(const ServerPcLoginStatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerPcLoginStatusNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ServerPcLoginStatusNotify::Swap(ServerPcLoginStatusNotify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(login_status_, other->login_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerPcLoginStatusNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerPcLoginStatusNotify_descriptor_;
  metadata.reflection = ServerPcLoginStatusNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushToUserRequest::kFlashFieldNumber;
const int PushToUserRequest::kDataFieldNumber;
const int PushToUserRequest::kUserTokenListFieldNumber;
#endif  // !_MSC_VER

PushToUserRequest::PushToUserRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.PushToUserRequest)
}

void PushToUserRequest::InitAsDefaultInstance() {
}

PushToUserRequest::PushToUserRequest(const PushToUserRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.PushToUserRequest)
}

void PushToUserRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  flash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushToUserRequest::~PushToUserRequest() {
  // @@protoc_insertion_point(destructor:Im.Server.PushToUserRequest)
  SharedDtor();
}

void PushToUserRequest::SharedDtor() {
  if (flash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete flash_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void PushToUserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushToUserRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushToUserRequest_descriptor_;
}

const PushToUserRequest& PushToUserRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

PushToUserRequest* PushToUserRequest::default_instance_ = NULL;

PushToUserRequest* PushToUserRequest::New() const {
  return new PushToUserRequest;
}

void PushToUserRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_flash()) {
      if (flash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        flash_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  user_token_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushToUserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.PushToUserRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string flash = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->flash().data(), this->flash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "flash");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required string data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_token_list;
        break;
      }

      // repeated .Im.Base.UserTokenInfo user_token_list = 3;
      case 3: {
        if (tag == 26) {
         parse_user_token_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_token_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_token_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.PushToUserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.PushToUserRequest)
  return false;
#undef DO_
}

void PushToUserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.PushToUserRequest)
  // required string flash = 1;
  if (has_flash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flash().data(), this->flash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->flash(), output);
  }

  // required string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  // repeated .Im.Base.UserTokenInfo user_token_list = 3;
  for (int i = 0; i < this->user_token_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user_token_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.PushToUserRequest)
}

::google::protobuf::uint8* PushToUserRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.PushToUserRequest)
  // required string flash = 1;
  if (has_flash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flash().data(), this->flash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->flash(), target);
  }

  // required string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  // repeated .Im.Base.UserTokenInfo user_token_list = 3;
  for (int i = 0; i < this->user_token_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user_token_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.PushToUserRequest)
  return target;
}

int PushToUserRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string flash = 1;
    if (has_flash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flash());
    }

    // required string data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  // repeated .Im.Base.UserTokenInfo user_token_list = 3;
  total_size += 1 * this->user_token_list_size();
  for (int i = 0; i < this->user_token_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_token_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushToUserRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushToUserRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushToUserRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushToUserRequest::MergeFrom(const PushToUserRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_token_list_.MergeFrom(from.user_token_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flash()) {
      set_flash(from.flash());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushToUserRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushToUserRequest::CopyFrom(const PushToUserRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushToUserRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->user_token_list())) return false;
  return true;
}

void PushToUserRequest::Swap(PushToUserRequest* other) {
  if (other != this) {
    std::swap(flash_, other->flash_);
    std::swap(data_, other->data_);
    user_token_list_.Swap(&other->user_token_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushToUserRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushToUserRequest_descriptor_;
  metadata.reflection = PushToUserRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushToUserRepsonse::kPushResultListFieldNumber;
#endif  // !_MSC_VER

PushToUserRepsonse::PushToUserRepsonse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.PushToUserRepsonse)
}

void PushToUserRepsonse::InitAsDefaultInstance() {
}

PushToUserRepsonse::PushToUserRepsonse(const PushToUserRepsonse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.PushToUserRepsonse)
}

void PushToUserRepsonse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushToUserRepsonse::~PushToUserRepsonse() {
  // @@protoc_insertion_point(destructor:Im.Server.PushToUserRepsonse)
  SharedDtor();
}

void PushToUserRepsonse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PushToUserRepsonse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushToUserRepsonse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushToUserRepsonse_descriptor_;
}

const PushToUserRepsonse& PushToUserRepsonse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

PushToUserRepsonse* PushToUserRepsonse::default_instance_ = NULL;

PushToUserRepsonse* PushToUserRepsonse::New() const {
  return new PushToUserRepsonse;
}

void PushToUserRepsonse::Clear() {
  push_result_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushToUserRepsonse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.PushToUserRepsonse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Im.Base.PushResult push_result_list = 1;
      case 1: {
        if (tag == 10) {
         parse_push_result_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_push_result_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_push_result_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.PushToUserRepsonse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.PushToUserRepsonse)
  return false;
#undef DO_
}

void PushToUserRepsonse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.PushToUserRepsonse)
  // repeated .Im.Base.PushResult push_result_list = 1;
  for (int i = 0; i < this->push_result_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->push_result_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.PushToUserRepsonse)
}

::google::protobuf::uint8* PushToUserRepsonse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.PushToUserRepsonse)
  // repeated .Im.Base.PushResult push_result_list = 1;
  for (int i = 0; i < this->push_result_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->push_result_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.PushToUserRepsonse)
  return target;
}

int PushToUserRepsonse::ByteSize() const {
  int total_size = 0;

  // repeated .Im.Base.PushResult push_result_list = 1;
  total_size += 1 * this->push_result_list_size();
  for (int i = 0; i < this->push_result_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->push_result_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushToUserRepsonse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushToUserRepsonse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushToUserRepsonse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushToUserRepsonse::MergeFrom(const PushToUserRepsonse& from) {
  GOOGLE_CHECK_NE(&from, this);
  push_result_list_.MergeFrom(from.push_result_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushToUserRepsonse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushToUserRepsonse::CopyFrom(const PushToUserRepsonse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushToUserRepsonse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->push_result_list())) return false;
  return true;
}

void PushToUserRepsonse::Swap(PushToUserRepsonse* other) {
  if (other != this) {
    push_result_list_.Swap(&other->push_result_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushToUserRepsonse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushToUserRepsonse_descriptor_;
  metadata.reflection = PushToUserRepsonse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupGetShieldRequest::kGroupIdFieldNumber;
const int GroupGetShieldRequest::kUserIdFieldNumber;
const int GroupGetShieldRequest::kAttachDataFieldNumber;
#endif  // !_MSC_VER

GroupGetShieldRequest::GroupGetShieldRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.GroupGetShieldRequest)
}

void GroupGetShieldRequest::InitAsDefaultInstance() {
}

GroupGetShieldRequest::GroupGetShieldRequest(const GroupGetShieldRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.GroupGetShieldRequest)
}

void GroupGetShieldRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupGetShieldRequest::~GroupGetShieldRequest() {
  // @@protoc_insertion_point(destructor:Im.Server.GroupGetShieldRequest)
  SharedDtor();
}

void GroupGetShieldRequest::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void GroupGetShieldRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupGetShieldRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupGetShieldRequest_descriptor_;
}

const GroupGetShieldRequest& GroupGetShieldRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

GroupGetShieldRequest* GroupGetShieldRequest::default_instance_ = NULL;

GroupGetShieldRequest* GroupGetShieldRequest::New() const {
  return new GroupGetShieldRequest;
}

void GroupGetShieldRequest::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    group_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupGetShieldRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.GroupGetShieldRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // repeated uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_user_id())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        if (input->ExpectTag(26)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 3;
      case 3: {
        if (tag == 26) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.GroupGetShieldRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.GroupGetShieldRequest)
  return false;
#undef DO_
}

void GroupGetShieldRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.GroupGetShieldRequest)
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // repeated uint32 user_id = 2;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->user_id(i), output);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.GroupGetShieldRequest)
}

::google::protobuf::uint8* GroupGetShieldRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.GroupGetShieldRequest)
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // repeated uint32 user_id = 2;
  for (int i = 0; i < this->user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->user_id(i), target);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.GroupGetShieldRequest)
  return target;
}

int GroupGetShieldRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional bytes attach_data = 3;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 user_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupGetShieldRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupGetShieldRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupGetShieldRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupGetShieldRequest::MergeFrom(const GroupGetShieldRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupGetShieldRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupGetShieldRequest::CopyFrom(const GroupGetShieldRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupGetShieldRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupGetShieldRequest::Swap(GroupGetShieldRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    user_id_.Swap(&other->user_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupGetShieldRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupGetShieldRequest_descriptor_;
  metadata.reflection = GroupGetShieldRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupGetShieldResponse::kGroupIdFieldNumber;
const int GroupGetShieldResponse::kShieldStatusListFieldNumber;
const int GroupGetShieldResponse::kAttachDataFieldNumber;
#endif  // !_MSC_VER

GroupGetShieldResponse::GroupGetShieldResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.GroupGetShieldResponse)
}

void GroupGetShieldResponse::InitAsDefaultInstance() {
}

GroupGetShieldResponse::GroupGetShieldResponse(const GroupGetShieldResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.GroupGetShieldResponse)
}

void GroupGetShieldResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupGetShieldResponse::~GroupGetShieldResponse() {
  // @@protoc_insertion_point(destructor:Im.Server.GroupGetShieldResponse)
  SharedDtor();
}

void GroupGetShieldResponse::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void GroupGetShieldResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupGetShieldResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupGetShieldResponse_descriptor_;
}

const GroupGetShieldResponse& GroupGetShieldResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

GroupGetShieldResponse* GroupGetShieldResponse::default_instance_ = NULL;

GroupGetShieldResponse* GroupGetShieldResponse::New() const {
  return new GroupGetShieldResponse;
}

void GroupGetShieldResponse::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    group_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  shield_status_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupGetShieldResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.GroupGetShieldResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shield_status_list;
        break;
      }

      // repeated .Im.Base.ShieldStatus shield_status_list = 2;
      case 2: {
        if (tag == 18) {
         parse_shield_status_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shield_status_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shield_status_list;
        if (input->ExpectTag(26)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 3;
      case 3: {
        if (tag == 26) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.GroupGetShieldResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.GroupGetShieldResponse)
  return false;
#undef DO_
}

void GroupGetShieldResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.GroupGetShieldResponse)
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // repeated .Im.Base.ShieldStatus shield_status_list = 2;
  for (int i = 0; i < this->shield_status_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shield_status_list(i), output);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.GroupGetShieldResponse)
}

::google::protobuf::uint8* GroupGetShieldResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.GroupGetShieldResponse)
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // repeated .Im.Base.ShieldStatus shield_status_list = 2;
  for (int i = 0; i < this->shield_status_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shield_status_list(i), target);
  }

  // optional bytes attach_data = 3;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.GroupGetShieldResponse)
  return target;
}

int GroupGetShieldResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional bytes attach_data = 3;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .Im.Base.ShieldStatus shield_status_list = 2;
  total_size += 1 * this->shield_status_list_size();
  for (int i = 0; i < this->shield_status_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shield_status_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupGetShieldResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupGetShieldResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupGetShieldResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupGetShieldResponse::MergeFrom(const GroupGetShieldResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  shield_status_list_.MergeFrom(from.shield_status_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupGetShieldResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupGetShieldResponse::CopyFrom(const GroupGetShieldResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupGetShieldResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->shield_status_list())) return false;
  return true;
}

void GroupGetShieldResponse::Swap(GroupGetShieldResponse* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    shield_status_list_.Swap(&other->shield_status_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupGetShieldResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupGetShieldResponse_descriptor_;
  metadata.reflection = GroupGetShieldResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileTransferRequest::kFromUserIdFieldNumber;
const int FileTransferRequest::kToUserIdFieldNumber;
const int FileTransferRequest::kFileNameFieldNumber;
const int FileTransferRequest::kFileSizeFieldNumber;
const int FileTransferRequest::kTransferModeFieldNumber;
const int FileTransferRequest::kAttachDataFieldNumber;
#endif  // !_MSC_VER

FileTransferRequest::FileTransferRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.FileTransferRequest)
}

void FileTransferRequest::InitAsDefaultInstance() {
}

FileTransferRequest::FileTransferRequest(const FileTransferRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.FileTransferRequest)
}

void FileTransferRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_user_id_ = 0u;
  to_user_id_ = 0u;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_size_ = 0u;
  transfer_mode_ = 1;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileTransferRequest::~FileTransferRequest() {
  // @@protoc_insertion_point(destructor:Im.Server.FileTransferRequest)
  SharedDtor();
}

void FileTransferRequest::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void FileTransferRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileTransferRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileTransferRequest_descriptor_;
}

const FileTransferRequest& FileTransferRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

FileTransferRequest* FileTransferRequest::default_instance_ = NULL;

FileTransferRequest* FileTransferRequest::New() const {
  return new FileTransferRequest;
}

void FileTransferRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FileTransferRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(from_user_id_, to_user_id_);
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_name_->clear();
      }
    }
    file_size_ = 0u;
    transfer_mode_ = 1;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileTransferRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.FileTransferRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 from_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_user_id;
        break;
      }

      // required uint32 to_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_to_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_user_id_)));
          set_has_to_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_file_name;
        break;
      }

      // required string file_name = 3;
      case 3: {
        if (tag == 26) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_file_size;
        break;
      }

      // required uint32 file_size = 4;
      case 4: {
        if (tag == 32) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_transfer_mode;
        break;
      }

      // required .Im.Base.FileType transfer_mode = 5;
      case 5: {
        if (tag == 40) {
         parse_transfer_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::FileType_IsValid(value)) {
            set_transfer_mode(static_cast< ::Im::Base::FileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 6;
      case 6: {
        if (tag == 50) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.FileTransferRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.FileTransferRequest)
  return false;
#undef DO_
}

void FileTransferRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.FileTransferRequest)
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_user_id(), output);
  }

  // required uint32 to_user_id = 2;
  if (has_to_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to_user_id(), output);
  }

  // required string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_name(), output);
  }

  // required uint32 file_size = 4;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->file_size(), output);
  }

  // required .Im.Base.FileType transfer_mode = 5;
  if (has_transfer_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->transfer_mode(), output);
  }

  // optional bytes attach_data = 6;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.FileTransferRequest)
}

::google::protobuf::uint8* FileTransferRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.FileTransferRequest)
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->from_user_id(), target);
  }

  // required uint32 to_user_id = 2;
  if (has_to_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->to_user_id(), target);
  }

  // required string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_name(), target);
  }

  // required uint32 file_size = 4;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->file_size(), target);
  }

  // required .Im.Base.FileType transfer_mode = 5;
  if (has_transfer_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->transfer_mode(), target);
  }

  // optional bytes attach_data = 6;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.FileTransferRequest)
  return target;
}

int FileTransferRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 from_user_id = 1;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_user_id());
    }

    // required uint32 to_user_id = 2;
    if (has_to_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_user_id());
    }

    // required string file_name = 3;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // required uint32 file_size = 4;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // required .Im.Base.FileType transfer_mode = 5;
    if (has_transfer_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transfer_mode());
    }

    // optional bytes attach_data = 6;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileTransferRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileTransferRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileTransferRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileTransferRequest::MergeFrom(const FileTransferRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_to_user_id()) {
      set_to_user_id(from.to_user_id());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_transfer_mode()) {
      set_transfer_mode(from.transfer_mode());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileTransferRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileTransferRequest::CopyFrom(const FileTransferRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTransferRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void FileTransferRequest::Swap(FileTransferRequest* other) {
  if (other != this) {
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(to_user_id_, other->to_user_id_);
    std::swap(file_name_, other->file_name_);
    std::swap(file_size_, other->file_size_);
    std::swap(transfer_mode_, other->transfer_mode_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileTransferRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileTransferRequest_descriptor_;
  metadata.reflection = FileTransferRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileTransferResponse::kResultCodeFieldNumber;
const int FileTransferResponse::kFromUserIdFieldNumber;
const int FileTransferResponse::kToUserIdFieldNumber;
const int FileTransferResponse::kFileNameFieldNumber;
const int FileTransferResponse::kFileSizeFieldNumber;
const int FileTransferResponse::kTaskIdFieldNumber;
const int FileTransferResponse::kTransferModeFieldNumber;
const int FileTransferResponse::kAttachDataFieldNumber;
#endif  // !_MSC_VER

FileTransferResponse::FileTransferResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.FileTransferResponse)
}

void FileTransferResponse::InitAsDefaultInstance() {
}

FileTransferResponse::FileTransferResponse(const FileTransferResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.FileTransferResponse)
}

void FileTransferResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_code_ = 0u;
  from_user_id_ = 0u;
  to_user_id_ = 0u;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_size_ = 0u;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transfer_mode_ = 1;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileTransferResponse::~FileTransferResponse() {
  // @@protoc_insertion_point(destructor:Im.Server.FileTransferResponse)
  SharedDtor();
}

void FileTransferResponse::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void FileTransferResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileTransferResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileTransferResponse_descriptor_;
}

const FileTransferResponse& FileTransferResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

FileTransferResponse* FileTransferResponse::default_instance_ = NULL;

FileTransferResponse* FileTransferResponse::New() const {
  return new FileTransferResponse;
}

void FileTransferResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FileTransferResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(result_code_, from_user_id_);
    ZR_(to_user_id_, file_size_);
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_name_->clear();
      }
    }
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        task_id_->clear();
      }
    }
    transfer_mode_ = 1;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileTransferResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.FileTransferResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_from_user_id;
        break;
      }

      // required uint32 from_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_from_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_to_user_id;
        break;
      }

      // required uint32 to_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_to_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_user_id_)));
          set_has_to_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_file_name;
        break;
      }

      // optional string file_name = 4;
      case 4: {
        if (tag == 34) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_file_size;
        break;
      }

      // optional uint32 file_size = 5;
      case 5: {
        if (tag == 40) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_task_id;
        break;
      }

      // optional string task_id = 6;
      case 6: {
        if (tag == 50) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->task_id().data(), this->task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "task_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_transfer_mode;
        break;
      }

      // optional .Im.Base.FileType transfer_mode = 7;
      case 7: {
        if (tag == 56) {
         parse_transfer_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Im::Base::FileType_IsValid(value)) {
            set_transfer_mode(static_cast< ::Im::Base::FileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 8;
      case 8: {
        if (tag == 66) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.FileTransferResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.FileTransferResponse)
  return false;
#undef DO_
}

void FileTransferResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.FileTransferResponse)
  // required uint32 result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_code(), output);
  }

  // required uint32 from_user_id = 2;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->from_user_id(), output);
  }

  // required uint32 to_user_id = 3;
  if (has_to_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->to_user_id(), output);
  }

  // optional string file_name = 4;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->file_name(), output);
  }

  // optional uint32 file_size = 5;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->file_size(), output);
  }

  // optional string task_id = 6;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->task_id(), output);
  }

  // optional .Im.Base.FileType transfer_mode = 7;
  if (has_transfer_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->transfer_mode(), output);
  }

  // optional bytes attach_data = 8;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.FileTransferResponse)
}

::google::protobuf::uint8* FileTransferResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.FileTransferResponse)
  // required uint32 result_code = 1;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_code(), target);
  }

  // required uint32 from_user_id = 2;
  if (has_from_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->from_user_id(), target);
  }

  // required uint32 to_user_id = 3;
  if (has_to_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->to_user_id(), target);
  }

  // optional string file_name = 4;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file_name(), target);
  }

  // optional uint32 file_size = 5;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->file_size(), target);
  }

  // optional string task_id = 6;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->task_id(), target);
  }

  // optional .Im.Base.FileType transfer_mode = 7;
  if (has_transfer_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->transfer_mode(), target);
  }

  // optional bytes attach_data = 8;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.FileTransferResponse)
  return target;
}

int FileTransferResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_code = 1;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // required uint32 from_user_id = 2;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_user_id());
    }

    // required uint32 to_user_id = 3;
    if (has_to_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_user_id());
    }

    // optional string file_name = 4;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional uint32 file_size = 5;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional string task_id = 6;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_id());
    }

    // optional .Im.Base.FileType transfer_mode = 7;
    if (has_transfer_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transfer_mode());
    }

    // optional bytes attach_data = 8;
    if (has_attach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileTransferResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileTransferResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileTransferResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileTransferResponse::MergeFrom(const FileTransferResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_to_user_id()) {
      set_to_user_id(from.to_user_id());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_transfer_mode()) {
      set_transfer_mode(from.transfer_mode());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileTransferResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileTransferResponse::CopyFrom(const FileTransferResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTransferResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FileTransferResponse::Swap(FileTransferResponse* other) {
  if (other != this) {
    std::swap(result_code_, other->result_code_);
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(to_user_id_, other->to_user_id_);
    std::swap(file_name_, other->file_name_);
    std::swap(file_size_, other->file_size_);
    std::swap(task_id_, other->task_id_);
    std::swap(transfer_mode_, other->transfer_mode_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileTransferResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileTransferResponse_descriptor_;
  metadata.reflection = FileTransferResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FileServerIpRequest::FileServerIpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.FileServerIpRequest)
}

void FileServerIpRequest::InitAsDefaultInstance() {
}

FileServerIpRequest::FileServerIpRequest(const FileServerIpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.FileServerIpRequest)
}

void FileServerIpRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileServerIpRequest::~FileServerIpRequest() {
  // @@protoc_insertion_point(destructor:Im.Server.FileServerIpRequest)
  SharedDtor();
}

void FileServerIpRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileServerIpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileServerIpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileServerIpRequest_descriptor_;
}

const FileServerIpRequest& FileServerIpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

FileServerIpRequest* FileServerIpRequest::default_instance_ = NULL;

FileServerIpRequest* FileServerIpRequest::New() const {
  return new FileServerIpRequest;
}

void FileServerIpRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileServerIpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.FileServerIpRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.FileServerIpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.FileServerIpRequest)
  return false;
#undef DO_
}

void FileServerIpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.FileServerIpRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.FileServerIpRequest)
}

::google::protobuf::uint8* FileServerIpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.FileServerIpRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.FileServerIpRequest)
  return target;
}

int FileServerIpRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileServerIpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileServerIpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileServerIpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileServerIpRequest::MergeFrom(const FileServerIpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileServerIpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileServerIpRequest::CopyFrom(const FileServerIpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileServerIpRequest::IsInitialized() const {

  return true;
}

void FileServerIpRequest::Swap(FileServerIpRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileServerIpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileServerIpRequest_descriptor_;
  metadata.reflection = FileServerIpRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileServerIpResponse::kIpAddrListFieldNumber;
#endif  // !_MSC_VER

FileServerIpResponse::FileServerIpResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Im.Server.FileServerIpResponse)
}

void FileServerIpResponse::InitAsDefaultInstance() {
}

FileServerIpResponse::FileServerIpResponse(const FileServerIpResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Im.Server.FileServerIpResponse)
}

void FileServerIpResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileServerIpResponse::~FileServerIpResponse() {
  // @@protoc_insertion_point(destructor:Im.Server.FileServerIpResponse)
  SharedDtor();
}

void FileServerIpResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileServerIpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileServerIpResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileServerIpResponse_descriptor_;
}

const FileServerIpResponse& FileServerIpResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Im_2eServer_2eproto();
  return *default_instance_;
}

FileServerIpResponse* FileServerIpResponse::default_instance_ = NULL;

FileServerIpResponse* FileServerIpResponse::New() const {
  return new FileServerIpResponse;
}

void FileServerIpResponse::Clear() {
  ip_addr_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileServerIpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Im.Server.FileServerIpResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Im.Base.IpAddr ip_addr_list = 1;
      case 1: {
        if (tag == 10) {
         parse_ip_addr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ip_addr_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ip_addr_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Im.Server.FileServerIpResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Im.Server.FileServerIpResponse)
  return false;
#undef DO_
}

void FileServerIpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Im.Server.FileServerIpResponse)
  // repeated .Im.Base.IpAddr ip_addr_list = 1;
  for (int i = 0; i < this->ip_addr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ip_addr_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Im.Server.FileServerIpResponse)
}

::google::protobuf::uint8* FileServerIpResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Im.Server.FileServerIpResponse)
  // repeated .Im.Base.IpAddr ip_addr_list = 1;
  for (int i = 0; i < this->ip_addr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ip_addr_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Im.Server.FileServerIpResponse)
  return target;
}

int FileServerIpResponse::ByteSize() const {
  int total_size = 0;

  // repeated .Im.Base.IpAddr ip_addr_list = 1;
  total_size += 1 * this->ip_addr_list_size();
  for (int i = 0; i < this->ip_addr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ip_addr_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileServerIpResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileServerIpResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileServerIpResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileServerIpResponse::MergeFrom(const FileServerIpResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ip_addr_list_.MergeFrom(from.ip_addr_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileServerIpResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileServerIpResponse::CopyFrom(const FileServerIpResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileServerIpResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->ip_addr_list())) return false;
  return true;
}

void FileServerIpResponse::Swap(FileServerIpResponse* other) {
  if (other != this) {
    ip_addr_list_.Swap(&other->ip_addr_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileServerIpResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileServerIpResponse_descriptor_;
  metadata.reflection = FileServerIpResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Server
}  // namespace Im

// @@protoc_insertion_point(global_scope)
